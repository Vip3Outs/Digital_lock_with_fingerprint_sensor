
arduino_bootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000031c  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080011a  0080011a  000003ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000123d  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a79  00000000  00000000  00001781  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000816  00000000  00000000  000021fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050f  00000000  00000000  00002bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000696  00000000  00000000  00003107  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000379d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <main>
  9e:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
    while ((TWCR & (1 << TWINT)) == 0);
}

void i2c_stop_condition(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  ac:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  b0:	08 95       	ret

000000b2 <i2c_start_condition>:
  b2:	84 ea       	ldi	r24, 0xA4	; 164
  b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 23       	and	r24, r24
  c0:	ec f7       	brge	.-6      	; 0xbc <i2c_start_condition+0xa>
  c2:	08 95       	ret

000000c4 <i2c_send_byte>:
}

void i2c_send_byte(unsigned char byte)
{														
	TWDR = byte;
  c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = (1 << TWINT) | (1 << TWEN);
  c8:	84 e8       	ldi	r24, 0x84	; 132
  ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & (1 << TWINT)) == 0);
  ce:	ec eb       	ldi	r30, 0xBC	; 188
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 23       	and	r24, r24
  d6:	ec f7       	brge	.-6      	; 0xd2 <i2c_send_byte+0xe>
}
  d8:	08 95       	ret

000000da <i2c_send_packet>:

void i2c_send_packet(unsigned char value, unsigned char address) 
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	c8 2f       	mov	r28, r24
  e0:	d6 2f       	mov	r29, r22
	i2c_start_condition();
  e2:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start_condition>
	i2c_send_byte(address);
  e6:	8d 2f       	mov	r24, r29
  e8:	0e 94 62 00 	call	0xc4	; 0xc4 <i2c_send_byte>
	i2c_send_byte(value);
  ec:	8c 2f       	mov	r24, r28
  ee:	0e 94 62 00 	call	0xc4	; 0xc4 <i2c_send_byte>
    while ((TWCR & (1 << TWINT)) == 0);
}

void i2c_stop_condition(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
  f2:	84 e9       	ldi	r24, 0x94	; 148
  f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
{
	i2c_start_condition();
	i2c_send_byte(address);
	i2c_send_byte(value);
	i2c_stop_condition();
}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <putnibble>:

	uint8_t led_pin;



void putnibble(char t){
  fe:	cf 93       	push	r28
 100:	c8 2f       	mov	r28, r24
	t <<= 4;
	i2c_send_packet(led_pin |= 0x04, SLA_WRITE_ADDR);
 102:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 106:	84 60       	ori	r24, 0x04	; 4
 108:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 10c:	6e e7       	ldi	r22, 0x7E	; 126
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 6d 00 	call	0xda	; 0xda <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	80 e1       	ldi	r24, 0x10	; 16
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <putnibble+0x1a>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <putnibble+0x20>
	_delay_us(50);
	i2c_send_packet(led_pin | t, SLA_WRITE_ADDR);
 11e:	8c 2f       	mov	r24, r28
 120:	82 95       	swap	r24
 122:	80 7f       	andi	r24, 0xF0	; 240
 124:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <__data_end>
 128:	89 2b       	or	r24, r25
 12a:	6e e7       	ldi	r22, 0x7E	; 126
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 6d 00 	call	0xda	; 0xda <i2c_send_packet>
	i2c_send_packet(led_pin &= ~0x04, SLA_WRITE_ADDR);
 134:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 138:	8b 7f       	andi	r24, 0xFB	; 251
 13a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 13e:	6e e7       	ldi	r22, 0x7E	; 126
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 6d 00 	call	0xda	; 0xda <i2c_send_packet>
 148:	80 e1       	ldi	r24, 0x10	; 16
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <putnibble+0x4c>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <putnibble+0x52>
	_delay_us(50);
}
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <lcd_send_byte>:

void lcd_send_byte(char c){
 154:	cf 93       	push	r28
 156:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
	i2c_send_packet(led_pin &=~ 0x01, SLA_WRITE_ADDR); 
 158:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 15c:	8e 7f       	andi	r24, 0xFE	; 254
 15e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 162:	6e e7       	ldi	r22, 0x7E	; 126
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 6d 00 	call	0xda	; 0xda <i2c_send_packet>
	putnibble(highc);
 16c:	8c 2f       	mov	r24, r28
 16e:	82 95       	swap	r24
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	0e 94 7f 00 	call	0xfe	; 0xfe <putnibble>
	putnibble(c);
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 7f 00 	call	0xfe	; 0xfe <putnibble>
}
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <lcd_send_char>:

void lcd_send_char(char c){
 180:	cf 93       	push	r28
 182:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
	i2c_send_packet (led_pin |= 0x01, SLA_WRITE_ADDR);
 184:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 18e:	6e e7       	ldi	r22, 0x7E	; 126
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 6d 00 	call	0xda	; 0xda <i2c_send_packet>
	putnibble(highc);
 198:	8c 2f       	mov	r24, r28
 19a:	82 95       	swap	r24
 19c:	8f 70       	andi	r24, 0x0F	; 15
 19e:	0e 94 7f 00 	call	0xfe	; 0xfe <putnibble>
	putnibble(c);
 1a2:	8c 2f       	mov	r24, r28
 1a4:	0e 94 7f 00 	call	0xfe	; 0xfe <putnibble>
}
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <lcd_init>:

void lcd_init(){
	led_pin = 0;
 1ac:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
	i2c_init();
 1b0:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	85 ea       	ldi	r24, 0xA5	; 165
 1b6:	9e e0       	ldi	r25, 0x0E	; 14
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_init+0xc>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <lcd_init+0x12>
 1be:	00 00       	nop
	_delay_ms(15);
	putnibble(0b00000011);					//Enter 4bit mode
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	0e 94 7f 00 	call	0xfe	; 0xfe <putnibble>
 1c6:	87 ee       	ldi	r24, 0xE7	; 231
 1c8:	93 e0       	ldi	r25, 0x03	; 3
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_init+0x1e>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_init+0x24>
 1d0:	00 00       	nop
	_delay_ms(4);
	putnibble(0b00000011);					
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	0e 94 7f 00 	call	0xfe	; 0xfe <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	91 e2       	ldi	r25, 0x21	; 33
 1da:	9a 95       	dec	r25
 1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_init+0x2e>
 1de:	00 00       	nop
	_delay_us(100);							
	putnibble(0b00000011);					
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	0e 94 7f 00 	call	0xfe	; 0xfe <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	89 ef       	ldi	r24, 0xF9	; 249
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_init+0x3e>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <lcd_init+0x44>
 1f0:	00 00       	nop
	_delay_ms(1);
	putnibble(0b00000010);
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	0e 94 7f 00 	call	0xfe	; 0xfe <putnibble>
 1f8:	89 ef       	ldi	r24, 0xF9	; 249
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_init+0x50>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_init+0x56>
 202:	00 00       	nop
	_delay_ms(1);			
	lcd_send_byte(0x28);		//Select 16x2 LCD in 4Bit mode
 204:	88 e2       	ldi	r24, 0x28	; 40
 206:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_send_byte>
 20a:	89 ef       	ldi	r24, 0xF9	; 249
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_init+0x62>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_init+0x68>
 214:	00 00       	nop
	_delay_ms(1);	
	lcd_send_byte(0x0C);		//Display ON Cursor off
 216:	8c e0       	ldi	r24, 0x0C	; 12
 218:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_send_byte>
 21c:	89 ef       	ldi	r24, 0xF9	; 249
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <lcd_init+0x74>
 224:	00 c0       	rjmp	.+0      	; 0x226 <lcd_init+0x7a>
 226:	00 00       	nop
	_delay_ms(1);
	lcd_send_byte(0x06);		//Cursor auto increment
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_send_byte>
 22e:	89 ef       	ldi	r24, 0xF9	; 249
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x86>
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x8c>
 238:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(led_pin |= 0x08, SLA_WRITE_ADDR);	
 23a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 23e:	88 60       	ori	r24, 0x08	; 8
 240:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 244:	6e e7       	ldi	r22, 0x7E	; 126
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 6d 00 	call	0xda	; 0xda <i2c_send_packet>
	i2c_send_packet(led_pin &=~ 0x02, SLA_WRITE_ADDR);
 24e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 252:	8d 7f       	andi	r24, 0xFD	; 253
 254:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 258:	6e e7       	ldi	r22, 0x7E	; 126
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 6d 00 	call	0xda	; 0xda <i2c_send_packet>
 262:	08 95       	ret

00000264 <lcd_clear>:
}

void lcd_clear(){
	lcd_send_byte(0x01);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	86 e7       	ldi	r24, 0x76	; 118
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_clear+0xa>
 272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_clear+0x10>
 274:	00 00       	nop
 276:	08 95       	ret

00000278 <lcd_setCursor>:
	_delay_us(1500);
}

void lcd_setCursor(char col, char row){
	char adr;
	adr = 0x40 * row + col;
 278:	90 e4       	ldi	r25, 0x40	; 64
 27a:	69 9f       	mul	r22, r25
 27c:	80 0d       	add	r24, r0
 27e:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd_send_byte(adr);
 280:	80 68       	ori	r24, 0x80	; 128
 282:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_send_byte>
 286:	08 95       	ret

00000288 <lcd_send_string>:
}

void lcd_send_string(const char *str){
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	ec 01       	movw	r28, r24
	while(*str != 0)
 28e:	88 81       	ld	r24, Y
 290:	88 23       	and	r24, r24
 292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_send_string+0x18>
 294:	21 96       	adiw	r28, 0x01	; 1
	lcd_send_char(*str++);
 296:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_send_char>
	adr |= 0x80;
	lcd_send_byte(adr);
}

void lcd_send_string(const char *str){
	while(*str != 0)
 29a:	89 91       	ld	r24, Y+
 29c:	81 11       	cpse	r24, r1
 29e:	fb cf       	rjmp	.-10     	; 0x296 <lcd_send_string+0xe>
	lcd_send_char(*str++);
}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <main>:
uint8_t getFingerprintEnroll();
uint8_t readNumber();

int main(void){

	lcd_init();
 2a6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_init>
	initUART();
 2aa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <initUART>
	
			lcd_setCursor(0,0);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_setCursor>
			lcd_clear();
 2b6:	0e 94 32 01 	call	0x264	; 0x264 <lcd_clear>
			lcd_send_string("Hello world!");
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	0e 94 44 01 	call	0x288	; 0x288 <lcd_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	2f ef       	ldi	r18, 0xFF	; 255
 2c4:	87 ea       	ldi	r24, 0xA7	; 167
 2c6:	91 e6       	ldi	r25, 0x61	; 97
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <main+0x22>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0x2c>
 2d2:	00 00       	nop
			_delay_ms(2000);
			lcd_setCursor(0,1);
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_setCursor>
			lcd_send_string("---DZIALA---");
 2dc:	8d e0       	ldi	r24, 0x0D	; 13
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	0e 94 44 01 	call	0x288	; 0x288 <lcd_send_string>
			lcd_clear();
 2e4:	0e 94 32 01 	call	0x264	; 0x264 <lcd_clear>
			lcd_setCursor(0,0);
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_setCursor>
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <main+0x4a>

000002f2 <initUART>:


/*! \brief Configures baud rate (refer data sheet) */
void initUART(void){
	// Not necessary; initialize anyway
	DDRD |= (1 << PD1);
 2f2:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~ (1 << PD0);
 2f4:	50 98       	cbi	0x0a, 0	; 10

	// Set baud rate; lower byte and top nibble
	UBRR0H = ((_UBRR) & 0xF00);
 2f6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t) ((_UBRR) & 0xFF);
 2fa:	80 e1       	ldi	r24, 0x10	; 16
 2fc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	TX_START();
 300:	e1 ec       	ldi	r30, 0xC1	; 193
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	88 60       	ori	r24, 0x08	; 8
 308:	80 83       	st	Z, r24
	RX_START();
 30a:	80 81       	ld	r24, Z
 30c:	80 61       	ori	r24, 0x10	; 16
 30e:	80 83       	st	Z, r24

	// Set frame format = 8-N-1
	UCSR0C = (0x03 << UCSZ00);
 310:	86 e0       	ldi	r24, 0x06	; 6
 312:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 316:	08 95       	ret

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
