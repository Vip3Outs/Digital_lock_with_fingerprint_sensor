
arduino_bootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017c  00800100  00000f9a  0000102e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080027c  0080027c  000011aa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002172  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d46  00000000  00000000  0000355a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f44  00000000  00000000  000042a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  000051e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e7  00000000  00000000  00005628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000130a  00000000  00000000  00005d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00007019  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	ed 00       	.word	0x00ed	; ????
  6a:	f3 00       	.word	0x00f3	; ????
  6c:	ff 00       	.word	0x00ff	; ????
  6e:	ff 00       	.word	0x00ff	; ????
  70:	ff 00       	.word	0x00ff	; ????
  72:	ff 00       	.word	0x00ff	; ????
  74:	04 01       	movw	r0, r8
  76:	07 01       	movw	r0, r14
  78:	0b 01       	movw	r0, r22

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	12 e0       	ldi	r17, 0x02	; 2
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	ea e9       	ldi	r30, 0x9A	; 154
  8e:	ff e0       	ldi	r31, 0x0F	; 15
  90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
  92:	05 90       	lpm	r0, Z+
  94:	0d 92       	st	X+, r0
  96:	ac 37       	cpi	r26, 0x7C	; 124
  98:	b1 07       	cpc	r27, r17
  9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
  9c:	22 e0       	ldi	r18, 0x02	; 2
  9e:	ac e7       	ldi	r26, 0x7C	; 124
  a0:	b2 e0       	ldi	r27, 0x02	; 2
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a4 38       	cpi	r26, 0x84	; 132
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 51 04 	call	0x8a2	; 0x8a2 <main>
  b0:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <writeStructuredPacket>:
   sensor
    @param   packet A structure containing the bytes to transmit
*/
/**************************************************************************/

void writeStructuredPacket(const struct fps_Packet packet) {
  b8:	af 92       	push	r10
  ba:	bf 92       	push	r11
  bc:	cf 92       	push	r12
  be:	df 92       	push	r13
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	0d 85       	ldd	r16, Y+13	; 0x0d
  d2:	1e 85       	ldd	r17, Y+14	; 0x0e
  d4:	cf 84       	ldd	r12, Y+15	; 0x0f
  d6:	a8 88       	ldd	r10, Y+16	; 0x10
  d8:	b9 88       	ldd	r11, Y+17	; 0x11

  putByte((uint8_t)(packet.start_code >> 8));
  da:	81 2f       	mov	r24, r17
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 a0 04 	call	0x940	; 0x940 <putByte>
  putByte((uint8_t)(packet.start_code & 0xFF));
  e2:	c8 01       	movw	r24, r16
  e4:	99 27       	eor	r25, r25
  e6:	0e 94 a0 04 	call	0x940	; 0x940 <putByte>
  putByte(packet.address[0]);
  ea:	8a 89       	ldd	r24, Y+18	; 0x12
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 a0 04 	call	0x940	; 0x940 <putByte>
  putByte(packet.address[1]);
  f2:	8b 89       	ldd	r24, Y+19	; 0x13
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 a0 04 	call	0x940	; 0x940 <putByte>
  putByte(packet.address[2]);
  fa:	8c 89       	ldd	r24, Y+20	; 0x14
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 a0 04 	call	0x940	; 0x940 <putByte>
  putByte(packet.address[3]);
 102:	8d 89       	ldd	r24, Y+21	; 0x15
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 a0 04 	call	0x940	; 0x940 <putByte>
  putByte(packet.s_type);
 10a:	ec 2c       	mov	r14, r12
 10c:	f1 2c       	mov	r15, r1
 10e:	c7 01       	movw	r24, r14
 110:	0e 94 a0 04 	call	0x940	; 0x940 <putByte>

  uint16_t wire_length = packet.s_length + 2;
 114:	85 01       	movw	r16, r10
 116:	0e 5f       	subi	r16, 0xFE	; 254
 118:	1f 4f       	sbci	r17, 0xFF	; 255
  putByte((uint8_t)(wire_length >> 8));
 11a:	c1 2e       	mov	r12, r17
 11c:	dd 24       	eor	r13, r13
 11e:	c6 01       	movw	r24, r12
 120:	0e 94 a0 04 	call	0x940	; 0x940 <putByte>
  putByte((uint8_t)(wire_length & 0xFF));
 124:	11 27       	eor	r17, r17
 126:	c8 01       	movw	r24, r16
 128:	0e 94 a0 04 	call	0x940	; 0x940 <putByte>
//  Serial.print((uint8_t)(wire_length >> 8), HEX);
//  Serial.print(", 0x");
//  Serial.print((uint8_t)(wire_length & 0xFF), HEX);
//#endif

  uint16_t sum = ((wire_length) >> 8) + ((wire_length)&0xFF) + packet.s_type;
 12c:	c0 0e       	add	r12, r16
 12e:	d1 1e       	adc	r13, r17
 130:	ce 0c       	add	r12, r14
 132:	df 1c       	adc	r13, r15
  for (uint8_t i = 0; i < packet.s_length; i++) {
 134:	a1 14       	cp	r10, r1
 136:	b1 04       	cpc	r11, r1
 138:	a1 f0       	breq	.+40     	; 0x162 <writeStructuredPacket+0xaa>
 13a:	f1 2c       	mov	r15, r1
    putByte(packet.s_data[i]);
 13c:	e6 e1       	ldi	r30, 0x16	; 22
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	ec 0f       	add	r30, r28
 142:	fd 1f       	adc	r31, r29
 144:	ef 0d       	add	r30, r15
 146:	f1 1d       	adc	r31, r1
 148:	00 81       	ld	r16, Z
 14a:	10 e0       	ldi	r17, 0x00	; 0
 14c:	c8 01       	movw	r24, r16
 14e:	0e 94 a0 04 	call	0x940	; 0x940 <putByte>
    sum += packet.s_data[i];
 152:	c0 0e       	add	r12, r16
 154:	d1 1e       	adc	r13, r17
//  Serial.print(", 0x");
//  Serial.print((uint8_t)(wire_length & 0xFF), HEX);
//#endif

  uint16_t sum = ((wire_length) >> 8) + ((wire_length)&0xFF) + packet.s_type;
  for (uint8_t i = 0; i < packet.s_length; i++) {
 156:	f3 94       	inc	r15
 158:	8f 2d       	mov	r24, r15
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	8a 15       	cp	r24, r10
 15e:	9b 05       	cpc	r25, r11
 160:	68 f3       	brcs	.-38     	; 0x13c <writeStructuredPacket+0x84>
//    Serial.print(", 0x");
//    Serial.print(packet.data[i], HEX);
//#endif
  }

  putByte((uint8_t)(sum >> 8));
 162:	8d 2d       	mov	r24, r13
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 a0 04 	call	0x940	; 0x940 <putByte>
  putByte((uint8_t)(sum & 0xFF));
 16a:	c6 01       	movw	r24, r12
 16c:	99 27       	eor	r25, r25
 16e:	0e 94 a0 04 	call	0x940	; 0x940 <putByte>
//  Serial.print(", 0x");
//  Serial.println((uint8_t)(sum & 0xFF), HEX);
//#endif

 // return;
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	ff 90       	pop	r15
 17c:	ef 90       	pop	r14
 17e:	df 90       	pop	r13
 180:	cf 90       	pop	r12
 182:	bf 90       	pop	r11
 184:	af 90       	pop	r10
 186:	08 95       	ret

00000188 <getStructuredPacket>:
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_TIMEOUT</code> or
   <code>FINGERPRINT_BADPACKET</code> on failure
*/
/**************************************************************************/
uint8_t getStructuredPacket(struct fps_Packet *packet, uint16_t timeout) {
 188:	cf 92       	push	r12
 18a:	df 92       	push	r13
 18c:	ef 92       	push	r14
 18e:	ff 92       	push	r15
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	7c 01       	movw	r14, r24
 19a:	6b 01       	movw	r12, r22
  uint8_t byte;
  uint16_t idx = 0, timer = 0;
 19c:	00 e0       	ldi	r16, 0x00	; 0
 19e:	10 e0       	ldi	r17, 0x00	; 0
 1a0:	c0 e0       	ldi	r28, 0x00	; 0
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
 1a4:	0c c0       	rjmp	.+24     	; 0x1be <getStructuredPacket+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	8f e9       	ldi	r24, 0x9F	; 159
 1a8:	9f e0       	ldi	r25, 0x0F	; 15
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <getStructuredPacket+0x22>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <getStructuredPacket+0x28>
 1b0:	00 00       	nop
//#endif

  while (true) {
    while (checkEmptyRegister() == false) {
      _delay_ms(1);
      timer++;
 1b2:	0f 5f       	subi	r16, 0xFF	; 255
 1b4:	1f 4f       	sbci	r17, 0xFF	; 255
      if (timer >= timeout) {
 1b6:	0c 15       	cp	r16, r12
 1b8:	1d 05       	cpc	r17, r13
 1ba:	08 f0       	brcs	.+2      	; 0x1be <getStructuredPacket+0x36>
 1bc:	43 c0       	rjmp	.+134    	; 0x244 <getStructuredPacket+0xbc>
//#ifdef FINGERPRINT_DEBUG
//  Serial.print("<- ");
//#endif

  while (true) {
    while (checkEmptyRegister() == false) {
 1be:	0e 94 a8 04 	call	0x950	; 0x950 <checkEmptyRegister>
 1c2:	89 2b       	or	r24, r25
 1c4:	81 f3       	breq	.-32     	; 0x1a6 <getStructuredPacket+0x1e>
//        Serial.println("Timed out");
//#endif
        return FINGERPRINT_TIMEOUT;
      }
    }
    byte = getByte();
 1c6:	0e 94 98 04 	call	0x930	; 0x930 <getByte>
//#ifdef FINGERPRINT_DEBUG
//    Serial.print("0x");
//    Serial.print(byte, HEX);
//    Serial.print(", ");
//#endif
    switch (idx) {
 1ca:	c9 30       	cpi	r28, 0x09	; 9
 1cc:	d1 05       	cpc	r29, r1
 1ce:	60 f5       	brcc	.+88     	; 0x228 <getStructuredPacket+0xa0>
 1d0:	fe 01       	movw	r30, r28
 1d2:	ec 5c       	subi	r30, 0xCC	; 204
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	0c 94 b0 04 	jmp	0x960	; 0x960 <__tablejump2__>
    case 0:
      if (byte != (FINGERPRINT_STARTCODE >> 8))
 1da:	8f 3e       	cpi	r24, 0xEF	; 239
 1dc:	81 f7       	brne	.-32     	; 0x1be <getStructuredPacket+0x36>
        continue;
      packet->start_code = (uint16_t)byte << 8;
 1de:	f7 01       	movw	r30, r14
 1e0:	10 82       	st	Z, r1
 1e2:	81 83       	std	Z+1, r24	; 0x01
      break;
 1e4:	2d c0       	rjmp	.+90     	; 0x240 <getStructuredPacket+0xb8>
    case 1:
      packet->start_code |= byte;
 1e6:	f7 01       	movw	r30, r14
 1e8:	20 81       	ld	r18, Z
 1ea:	31 81       	ldd	r19, Z+1	; 0x01
 1ec:	a9 01       	movw	r20, r18
 1ee:	48 2b       	or	r20, r24
 1f0:	ca 01       	movw	r24, r20
 1f2:	91 83       	std	Z+1, r25	; 0x01
 1f4:	80 83       	st	Z, r24
      if (packet->start_code != FINGERPRINT_STARTCODE)
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	9f 4e       	sbci	r25, 0xEF	; 239
 1fa:	11 f1       	breq	.+68     	; 0x240 <getStructuredPacket+0xb8>
 1fc:	25 c0       	rjmp	.+74     	; 0x248 <getStructuredPacket+0xc0>
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      packet->address[idx - 2] = byte;
 1fe:	f7 01       	movw	r30, r14
 200:	ec 0f       	add	r30, r28
 202:	fd 1f       	adc	r31, r29
 204:	83 83       	std	Z+3, r24	; 0x03
      break;
 206:	1c c0       	rjmp	.+56     	; 0x240 <getStructuredPacket+0xb8>
    case 6:
      packet->s_type = byte;
 208:	f7 01       	movw	r30, r14
 20a:	82 83       	std	Z+2, r24	; 0x02
      break;
 20c:	19 c0       	rjmp	.+50     	; 0x240 <getStructuredPacket+0xb8>
    case 7:
      packet->s_length = (uint16_t)byte << 8;
 20e:	f7 01       	movw	r30, r14
 210:	13 82       	std	Z+3, r1	; 0x03
 212:	84 83       	std	Z+4, r24	; 0x04
      break;
 214:	15 c0       	rjmp	.+42     	; 0x240 <getStructuredPacket+0xb8>
    case 8:
      packet->s_length |= byte;
 216:	f7 01       	movw	r30, r14
 218:	23 81       	ldd	r18, Z+3	; 0x03
 21a:	34 81       	ldd	r19, Z+4	; 0x04
 21c:	a9 01       	movw	r20, r18
 21e:	48 2b       	or	r20, r24
 220:	ca 01       	movw	r24, r20
 222:	94 83       	std	Z+4, r25	; 0x04
 224:	83 83       	std	Z+3, r24	; 0x03
      break;
 226:	0c c0       	rjmp	.+24     	; 0x240 <getStructuredPacket+0xb8>
    default:
      packet->s_data[idx - 9] = byte;
 228:	f7 01       	movw	r30, r14
 22a:	ec 0f       	add	r30, r28
 22c:	fd 1f       	adc	r31, r29
 22e:	80 83       	st	Z, r24
      if ((idx - 8) == packet->s_length) {
 230:	f7 01       	movw	r30, r14
 232:	23 81       	ldd	r18, Z+3	; 0x03
 234:	34 81       	ldd	r19, Z+4	; 0x04
 236:	ce 01       	movw	r24, r28
 238:	08 97       	sbiw	r24, 0x08	; 8
 23a:	82 17       	cp	r24, r18
 23c:	93 07       	cpc	r25, r19
 23e:	31 f0       	breq	.+12     	; 0x24c <getStructuredPacket+0xc4>
//#endif
        return FINGERPRINT_OK;
      }
      break;
    }
    idx++;
 240:	21 96       	adiw	r28, 0x01	; 1
 242:	bd cf       	rjmp	.-134    	; 0x1be <getStructuredPacket+0x36>
      timer++;
      if (timer >= timeout) {
//#ifdef FINGERPRINT_DEBUG
//        Serial.println("Timed out");
//#endif
        return FINGERPRINT_TIMEOUT;
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	03 c0       	rjmp	.+6      	; 0x24e <getStructuredPacket+0xc6>
      packet->start_code = (uint16_t)byte << 8;
      break;
    case 1:
      packet->start_code |= byte;
      if (packet->start_code != FINGERPRINT_STARTCODE)
        return FINGERPRINT_BADPACKET;
 248:	8e ef       	ldi	r24, 0xFE	; 254
 24a:	01 c0       	rjmp	.+2      	; 0x24e <getStructuredPacket+0xc6>
      packet->s_data[idx - 9] = byte;
      if ((idx - 8) == packet->s_length) {
//#ifdef FINGERPRINT_DEBUG
//       Serial.println(" OK ");
//#endif
        return FINGERPRINT_OK;
 24c:	80 e0       	ldi	r24, 0x00	; 0
    }
    idx++;
  }
  // Shouldn't get here so...
  return FINGERPRINT_BADPACKET;
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	08 95       	ret

00000260 <getImage>:
    @returns <code>FINGERPRINT_NOFINGER</code> if no finger detected
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
    @returns <code>FINGERPRINT_IMAGEFAIL</code> on imaging error
*/
/**************************************************************************/
uint8_t getImage(void) {
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
 268:	c9 54       	subi	r28, 0x49	; 73
 26a:	d1 09       	sbc	r29, r1
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	f8 94       	cli
 270:	de bf       	out	0x3e, r29	; 62
 272:	0f be       	out	0x3f, r0	; 63
 274:	cd bf       	out	0x3d, r28	; 61
  SEND_CMD_PACKET(FINGERPRINT_GETIMAGE);
 276:	8d b7       	in	r24, 0x3d	; 61
 278:	9e b7       	in	r25, 0x3e	; 62
 27a:	89 54       	subi	r24, 0x49	; 73
 27c:	91 09       	sbc	r25, r1
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	9e bf       	out	0x3e, r25	; 62
 284:	0f be       	out	0x3f, r0	; 63
 286:	8d bf       	out	0x3d, r24	; 61
 288:	ad b7       	in	r26, 0x3d	; 61
 28a:	be b7       	in	r27, 0x3e	; 62
 28c:	11 96       	adiw	r26, 0x01	; 1
 28e:	89 e4       	ldi	r24, 0x49	; 73
 290:	fe 01       	movw	r30, r28
 292:	31 96       	adiw	r30, 0x01	; 1
 294:	01 90       	ld	r0, Z+
 296:	0d 92       	st	X+, r0
 298:	8a 95       	dec	r24
 29a:	e1 f7       	brne	.-8      	; 0x294 <getImage+0x34>
 29c:	0e 94 5c 00 	call	0xb8	; 0xb8 <writeStructuredPacket>
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
 2aa:	68 ee       	ldi	r22, 0xE8	; 232
 2ac:	73 e0       	ldi	r23, 0x03	; 3
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	0e 94 c4 00 	call	0x188	; 0x188 <getStructuredPacket>
 2b6:	81 11       	cpse	r24, r1
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <getImage+0x64>
 2ba:	8b 81       	ldd	r24, Y+3	; 0x03
 2bc:	87 30       	cpi	r24, 0x07	; 7
 2be:	21 f4       	brne	.+8      	; 0x2c8 <getImage+0x68>
 2c0:	8a 85       	ldd	r24, Y+10	; 0x0a
 2c2:	03 c0       	rjmp	.+6      	; 0x2ca <getImage+0x6a>
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <getImage+0x6a>
 2c8:	81 e0       	ldi	r24, 0x01	; 1
}
 2ca:	c7 5b       	subi	r28, 0xB7	; 183
 2cc:	df 4f       	sbci	r29, 0xFF	; 255
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <image2Tz>:
    @returns <code>FINGERPRINT_FEATUREFAIL</code> on failure to identify
   fingerprint features
    @returns <code>FINGERPRINT_INVALIDIMAGE</code> on failure to identify
   fingerprint features
*/
uint8_t image2Tz(uint8_t slot) {
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
 2e6:	c9 54       	subi	r28, 0x49	; 73
 2e8:	d1 09       	sbc	r29, r1
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	f8 94       	cli
 2ee:	de bf       	out	0x3e, r29	; 62
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	cd bf       	out	0x3d, r28	; 61
  SEND_CMD_PACKET(FINGERPRINT_IMAGE2TZ, slot);
 2f4:	8d b7       	in	r24, 0x3d	; 61
 2f6:	9e b7       	in	r25, 0x3e	; 62
 2f8:	89 54       	subi	r24, 0x49	; 73
 2fa:	91 09       	sbc	r25, r1
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	9e bf       	out	0x3e, r25	; 62
 302:	0f be       	out	0x3f, r0	; 63
 304:	8d bf       	out	0x3d, r24	; 61
 306:	ad b7       	in	r26, 0x3d	; 61
 308:	be b7       	in	r27, 0x3e	; 62
 30a:	11 96       	adiw	r26, 0x01	; 1
 30c:	89 e4       	ldi	r24, 0x49	; 73
 30e:	fe 01       	movw	r30, r28
 310:	31 96       	adiw	r30, 0x01	; 1
 312:	01 90       	ld	r0, Z+
 314:	0d 92       	st	X+, r0
 316:	8a 95       	dec	r24
 318:	e1 f7       	brne	.-8      	; 0x312 <image2Tz+0x34>
 31a:	0e 94 5c 00 	call	0xb8	; 0xb8 <writeStructuredPacket>
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	68 ee       	ldi	r22, 0xE8	; 232
 32a:	73 e0       	ldi	r23, 0x03	; 3
 32c:	ce 01       	movw	r24, r28
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	0e 94 c4 00 	call	0x188	; 0x188 <getStructuredPacket>
 334:	81 11       	cpse	r24, r1
 336:	05 c0       	rjmp	.+10     	; 0x342 <image2Tz+0x64>
 338:	8b 81       	ldd	r24, Y+3	; 0x03
 33a:	87 30       	cpi	r24, 0x07	; 7
 33c:	21 f4       	brne	.+8      	; 0x346 <image2Tz+0x68>
 33e:	8a 85       	ldd	r24, Y+10	; 0x0a
 340:	03 c0       	rjmp	.+6      	; 0x348 <image2Tz+0x6a>
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	01 c0       	rjmp	.+2      	; 0x348 <image2Tz+0x6a>
 346:	81 e0       	ldi	r24, 0x01	; 1
}
 348:	c7 5b       	subi	r28, 0xB7	; 183
 34a:	df 4f       	sbci	r29, 0xFF	; 255
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	de bf       	out	0x3e, r29	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	cd bf       	out	0x3d, r28	; 61
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <createModel>:
   model
    @returns <code>FINGERPRINT_OK</code> on success
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
    @returns <code>FINGERPRINT_ENROLLMISMATCH</code> on mismatch of fingerprints
*/
uint8_t createModel(void) {
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	c9 54       	subi	r28, 0x49	; 73
 366:	d1 09       	sbc	r29, r1
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	cd bf       	out	0x3d, r28	; 61
  SEND_CMD_PACKET(FINGERPRINT_REGMODEL);
 372:	8d b7       	in	r24, 0x3d	; 61
 374:	9e b7       	in	r25, 0x3e	; 62
 376:	89 54       	subi	r24, 0x49	; 73
 378:	91 09       	sbc	r25, r1
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	f8 94       	cli
 37e:	9e bf       	out	0x3e, r25	; 62
 380:	0f be       	out	0x3f, r0	; 63
 382:	8d bf       	out	0x3d, r24	; 61
 384:	ad b7       	in	r26, 0x3d	; 61
 386:	be b7       	in	r27, 0x3e	; 62
 388:	11 96       	adiw	r26, 0x01	; 1
 38a:	89 e4       	ldi	r24, 0x49	; 73
 38c:	fe 01       	movw	r30, r28
 38e:	31 96       	adiw	r30, 0x01	; 1
 390:	01 90       	ld	r0, Z+
 392:	0d 92       	st	X+, r0
 394:	8a 95       	dec	r24
 396:	e1 f7       	brne	.-8      	; 0x390 <createModel+0x34>
 398:	0e 94 5c 00 	call	0xb8	; 0xb8 <writeStructuredPacket>
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	f8 94       	cli
 3a0:	de bf       	out	0x3e, r29	; 62
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	cd bf       	out	0x3d, r28	; 61
 3a6:	68 ee       	ldi	r22, 0xE8	; 232
 3a8:	73 e0       	ldi	r23, 0x03	; 3
 3aa:	ce 01       	movw	r24, r28
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	0e 94 c4 00 	call	0x188	; 0x188 <getStructuredPacket>
 3b2:	81 11       	cpse	r24, r1
 3b4:	05 c0       	rjmp	.+10     	; 0x3c0 <createModel+0x64>
 3b6:	8b 81       	ldd	r24, Y+3	; 0x03
 3b8:	87 30       	cpi	r24, 0x07	; 7
 3ba:	21 f4       	brne	.+8      	; 0x3c4 <createModel+0x68>
 3bc:	8a 85       	ldd	r24, Y+10	; 0x0a
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <createModel+0x6a>
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <createModel+0x6a>
 3c4:	81 e0       	ldi	r24, 0x01	; 1
}
 3c6:	c7 5b       	subi	r28, 0xB7	; 183
 3c8:	df 4f       	sbci	r29, 0xFF	; 255
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	f8 94       	cli
 3ce:	de bf       	out	0x3e, r29	; 62
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	cd bf       	out	0x3d, r28	; 61
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <storeModel>:
    @returns <code>FINGERPRINT_BADLOCATION</code> if the location is invalid
    @returns <code>FINGERPRINT_FLASHERR</code> if the model couldn't be written
   to flash memory
    @returns <code>FINGERPRINT_PACKETRECIEVEERR</code> on communication error
*/
uint8_t storeModel(uint16_t location) {
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
 3e2:	c9 54       	subi	r28, 0x49	; 73
 3e4:	d1 09       	sbc	r29, r1
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
  SEND_CMD_PACKET(FINGERPRINT_STORE, 0x01, (uint8_t)(location >> 8), (uint8_t)(location & 0xFF));
 3f0:	8d b7       	in	r24, 0x3d	; 61
 3f2:	9e b7       	in	r25, 0x3e	; 62
 3f4:	89 54       	subi	r24, 0x49	; 73
 3f6:	91 09       	sbc	r25, r1
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	9e bf       	out	0x3e, r25	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	8d bf       	out	0x3d, r24	; 61
 402:	ad b7       	in	r26, 0x3d	; 61
 404:	be b7       	in	r27, 0x3e	; 62
 406:	11 96       	adiw	r26, 0x01	; 1
 408:	89 e4       	ldi	r24, 0x49	; 73
 40a:	fe 01       	movw	r30, r28
 40c:	31 96       	adiw	r30, 0x01	; 1
 40e:	01 90       	ld	r0, Z+
 410:	0d 92       	st	X+, r0
 412:	8a 95       	dec	r24
 414:	e1 f7       	brne	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	0e 94 5c 00 	call	0xb8	; 0xb8 <writeStructuredPacket>
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	f8 94       	cli
 41e:	de bf       	out	0x3e, r29	; 62
 420:	0f be       	out	0x3f, r0	; 63
 422:	cd bf       	out	0x3d, r28	; 61
 424:	68 ee       	ldi	r22, 0xE8	; 232
 426:	73 e0       	ldi	r23, 0x03	; 3
 428:	ce 01       	movw	r24, r28
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	0e 94 c4 00 	call	0x188	; 0x188 <getStructuredPacket>
 430:	81 11       	cpse	r24, r1
 432:	05 c0       	rjmp	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	87 30       	cpi	r24, 0x07	; 7
 438:	21 f4       	brne	.+8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43a:	8a 85       	ldd	r24, Y+10	; 0x0a
 43c:	03 c0       	rjmp	.+6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	01 c0       	rjmp	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 442:	81 e0       	ldi	r24, 0x01	; 1
}
 444:	c7 5b       	subi	r28, 0xB7	; 183
 446:	df 4f       	sbci	r29, 0xFF	; 255
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	f8 94       	cli
 44c:	de bf       	out	0x3e, r29	; 62
 44e:	0f be       	out	0x3f, r0	; 63
 450:	cd bf       	out	0x3d, r28	; 61
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <i2c_init>:
    while ((TWCR & (1 << TWINT)) == 0);
}

void i2c_stop_condition(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 45e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 462:	08 95       	ret

00000464 <i2c_start_condition>:
 464:	84 ea       	ldi	r24, 0xA4	; 164
 466:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 46a:	ec eb       	ldi	r30, 0xBC	; 188
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	88 23       	and	r24, r24
 472:	ec f7       	brge	.-6      	; 0x46e <i2c_start_condition+0xa>
 474:	08 95       	ret

00000476 <i2c_send_byte>:
}

void i2c_send_byte(unsigned char byte)
{														
	TWDR = byte;
 476:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = (1 << TWINT) | (1 << TWEN);
 47a:	84 e8       	ldi	r24, 0x84	; 132
 47c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & (1 << TWINT)) == 0);
 480:	ec eb       	ldi	r30, 0xBC	; 188
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	88 23       	and	r24, r24
 488:	ec f7       	brge	.-6      	; 0x484 <i2c_send_byte+0xe>
}
 48a:	08 95       	ret

0000048c <i2c_send_packet>:

void i2c_send_packet(unsigned char value, unsigned char address) 
{
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	c8 2f       	mov	r28, r24
 492:	d6 2f       	mov	r29, r22
	i2c_start_condition();
 494:	0e 94 32 02 	call	0x464	; 0x464 <i2c_start_condition>
	i2c_send_byte(address);
 498:	8d 2f       	mov	r24, r29
 49a:	0e 94 3b 02 	call	0x476	; 0x476 <i2c_send_byte>
	i2c_send_byte(value);
 49e:	8c 2f       	mov	r24, r28
 4a0:	0e 94 3b 02 	call	0x476	; 0x476 <i2c_send_byte>
    while ((TWCR & (1 << TWINT)) == 0);
}

void i2c_stop_condition(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 4a4:	84 e9       	ldi	r24, 0x94	; 148
 4a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
{
	i2c_start_condition();
	i2c_send_byte(address);
	i2c_send_byte(value);
	i2c_stop_condition();
}
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

000004b0 <putnibble>:
	uint8_t led_pin;
//} lcd;


void putnibble(char t)
{
 4b0:	cf 93       	push	r28
 4b2:	c8 2f       	mov	r28, r24
	t <<= 4;
	i2c_send_packet(led_pin |= 0x04, SLA_WRITE_ADDR);
 4b4:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
 4b8:	84 60       	ori	r24, 0x04	; 4
 4ba:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <__data_end>
 4be:	6e e7       	ldi	r22, 0x7E	; 126
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 46 02 	call	0x48c	; 0x48c <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c8:	80 e1       	ldi	r24, 0x10	; 16
 4ca:	8a 95       	dec	r24
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <putnibble+0x1a>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <putnibble+0x20>
	_delay_us(50);
	i2c_send_packet(led_pin | t, SLA_WRITE_ADDR);
 4d0:	8c 2f       	mov	r24, r28
 4d2:	82 95       	swap	r24
 4d4:	80 7f       	andi	r24, 0xF0	; 240
 4d6:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <__data_end>
 4da:	89 2b       	or	r24, r25
 4dc:	6e e7       	ldi	r22, 0x7E	; 126
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 46 02 	call	0x48c	; 0x48c <i2c_send_packet>
	i2c_send_packet(led_pin &= ~0x04, SLA_WRITE_ADDR);
 4e6:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
 4ea:	8b 7f       	andi	r24, 0xFB	; 251
 4ec:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <__data_end>
 4f0:	6e e7       	ldi	r22, 0x7E	; 126
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 46 02 	call	0x48c	; 0x48c <i2c_send_packet>
 4fa:	80 e1       	ldi	r24, 0x10	; 16
 4fc:	8a 95       	dec	r24
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <putnibble+0x4c>
 500:	00 c0       	rjmp	.+0      	; 0x502 <putnibble+0x52>
	_delay_us(50);
}
 502:	cf 91       	pop	r28
 504:	08 95       	ret

00000506 <lcd_send_byte>:

void lcd_send_byte(char c)
{
 506:	cf 93       	push	r28
 508:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
	i2c_send_packet(led_pin &=~ 0x01, SLA_WRITE_ADDR); 
 50a:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
 50e:	8e 7f       	andi	r24, 0xFE	; 254
 510:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <__data_end>
 514:	6e e7       	ldi	r22, 0x7E	; 126
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 46 02 	call	0x48c	; 0x48c <i2c_send_packet>
	putnibble(highc);
 51e:	8c 2f       	mov	r24, r28
 520:	82 95       	swap	r24
 522:	8f 70       	andi	r24, 0x0F	; 15
 524:	0e 94 58 02 	call	0x4b0	; 0x4b0 <putnibble>
	putnibble(c);
 528:	8c 2f       	mov	r24, r28
 52a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <putnibble>
}
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <lcd_send_char>:

void lcd_send_char(char c)
{
 532:	cf 93       	push	r28
 534:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
	i2c_send_packet (led_pin |= 0x01, SLA_WRITE_ADDR);
 536:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
 53a:	81 60       	ori	r24, 0x01	; 1
 53c:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <__data_end>
 540:	6e e7       	ldi	r22, 0x7E	; 126
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 46 02 	call	0x48c	; 0x48c <i2c_send_packet>
	putnibble(highc);
 54a:	8c 2f       	mov	r24, r28
 54c:	82 95       	swap	r24
 54e:	8f 70       	andi	r24, 0x0F	; 15
 550:	0e 94 58 02 	call	0x4b0	; 0x4b0 <putnibble>
	putnibble(c);
 554:	8c 2f       	mov	r24, r28
 556:	0e 94 58 02 	call	0x4b0	; 0x4b0 <putnibble>
}
 55a:	cf 91       	pop	r28
 55c:	08 95       	ret

0000055e <lcd_init>:

void lcd_init()
{
	led_pin = 0;
 55e:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <__data_end>
	i2c_init();
 562:	0e 94 2c 02 	call	0x458	; 0x458 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 566:	85 ea       	ldi	r24, 0xA5	; 165
 568:	9e e0       	ldi	r25, 0x0E	; 14
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <lcd_init+0xc>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <lcd_init+0x12>
 570:	00 00       	nop
	_delay_ms(15);
	putnibble(0b00000011);					//Enter 4bit mode
 572:	83 e0       	ldi	r24, 0x03	; 3
 574:	0e 94 58 02 	call	0x4b0	; 0x4b0 <putnibble>
 578:	87 ee       	ldi	r24, 0xE7	; 231
 57a:	93 e0       	ldi	r25, 0x03	; 3
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <lcd_init+0x1e>
 580:	00 c0       	rjmp	.+0      	; 0x582 <lcd_init+0x24>
 582:	00 00       	nop
	_delay_ms(4);
	putnibble(0b00000011);					
 584:	83 e0       	ldi	r24, 0x03	; 3
 586:	0e 94 58 02 	call	0x4b0	; 0x4b0 <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 58a:	91 e2       	ldi	r25, 0x21	; 33
 58c:	9a 95       	dec	r25
 58e:	f1 f7       	brne	.-4      	; 0x58c <lcd_init+0x2e>
 590:	00 00       	nop
	_delay_us(100);							
	putnibble(0b00000011);					
 592:	83 e0       	ldi	r24, 0x03	; 3
 594:	0e 94 58 02 	call	0x4b0	; 0x4b0 <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 598:	89 ef       	ldi	r24, 0xF9	; 249
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	01 97       	sbiw	r24, 0x01	; 1
 59e:	f1 f7       	brne	.-4      	; 0x59c <lcd_init+0x3e>
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <lcd_init+0x44>
 5a2:	00 00       	nop
	_delay_ms(1);
	putnibble(0b00000010);
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	0e 94 58 02 	call	0x4b0	; 0x4b0 <putnibble>
 5aa:	89 ef       	ldi	r24, 0xF9	; 249
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	01 97       	sbiw	r24, 0x01	; 1
 5b0:	f1 f7       	brne	.-4      	; 0x5ae <lcd_init+0x50>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <lcd_init+0x56>
 5b4:	00 00       	nop
	_delay_ms(1);			
	lcd_send_byte(0x28);		//Select 16x2 LCD in 4Bit mode
 5b6:	88 e2       	ldi	r24, 0x28	; 40
 5b8:	0e 94 83 02 	call	0x506	; 0x506 <lcd_send_byte>
 5bc:	89 ef       	ldi	r24, 0xF9	; 249
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <lcd_init+0x62>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <lcd_init+0x68>
 5c6:	00 00       	nop
	_delay_ms(1);	
	lcd_send_byte(0x0C);		//Display ON Cursor off
 5c8:	8c e0       	ldi	r24, 0x0C	; 12
 5ca:	0e 94 83 02 	call	0x506	; 0x506 <lcd_send_byte>
 5ce:	89 ef       	ldi	r24, 0xF9	; 249
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	01 97       	sbiw	r24, 0x01	; 1
 5d4:	f1 f7       	brne	.-4      	; 0x5d2 <lcd_init+0x74>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <lcd_init+0x7a>
 5d8:	00 00       	nop
	_delay_ms(1);
	lcd_send_byte(0x06);		//Cursor auto increment
 5da:	86 e0       	ldi	r24, 0x06	; 6
 5dc:	0e 94 83 02 	call	0x506	; 0x506 <lcd_send_byte>
 5e0:	89 ef       	ldi	r24, 0xF9	; 249
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	01 97       	sbiw	r24, 0x01	; 1
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <lcd_init+0x86>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <lcd_init+0x8c>
 5ea:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(led_pin |= 0x08, SLA_WRITE_ADDR);	
 5ec:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
 5f0:	88 60       	ori	r24, 0x08	; 8
 5f2:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <__data_end>
 5f6:	6e e7       	ldi	r22, 0x7E	; 126
 5f8:	70 e0       	ldi	r23, 0x00	; 0
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 46 02 	call	0x48c	; 0x48c <i2c_send_packet>
	i2c_send_packet(led_pin &=~ 0x02, SLA_WRITE_ADDR);
 600:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
 604:	8d 7f       	andi	r24, 0xFD	; 253
 606:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <__data_end>
 60a:	6e e7       	ldi	r22, 0x7E	; 126
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 46 02 	call	0x48c	; 0x48c <i2c_send_packet>
 614:	08 95       	ret

00000616 <lcd_clear>:
}

void lcd_clear()
{
	lcd_send_byte(0x01);
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	0e 94 83 02 	call	0x506	; 0x506 <lcd_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 61c:	86 e7       	ldi	r24, 0x76	; 118
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	01 97       	sbiw	r24, 0x01	; 1
 622:	f1 f7       	brne	.-4      	; 0x620 <lcd_clear+0xa>
 624:	00 c0       	rjmp	.+0      	; 0x626 <lcd_clear+0x10>
 626:	00 00       	nop
 628:	08 95       	ret

0000062a <lcd_setCursor>:
}

void lcd_setCursor(char col, char row)
{
	char adr;
	adr = 0x40 * row + col;
 62a:	90 e4       	ldi	r25, 0x40	; 64
 62c:	69 9f       	mul	r22, r25
 62e:	80 0d       	add	r24, r0
 630:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd_send_byte(adr);
 632:	80 68       	ori	r24, 0x80	; 128
 634:	0e 94 83 02 	call	0x506	; 0x506 <lcd_send_byte>
 638:	08 95       	ret

0000063a <lcd_send_string>:
}

void lcd_send_string(const char *str)
{
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	ec 01       	movw	r28, r24
	while(*str != 0)
 640:	88 81       	ld	r24, Y
 642:	88 23       	and	r24, r24
 644:	31 f0       	breq	.+12     	; 0x652 <lcd_send_string+0x18>
 646:	21 96       	adiw	r28, 0x01	; 1
	lcd_send_char(*str++);
 648:	0e 94 99 02 	call	0x532	; 0x532 <lcd_send_char>
	lcd_send_byte(adr);
}

void lcd_send_string(const char *str)
{
	while(*str != 0)
 64c:	89 91       	ld	r24, Y+
 64e:	81 11       	cpse	r24, r1
 650:	fb cf       	rjmp	.-10     	; 0x648 <lcd_send_string+0xe>
	lcd_send_char(*str++);
}
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	08 95       	ret

00000658 <getFingerprintEnroll>:
		_delay_ms(5000);
	}
	return 0;
}

uint8_t getFingerprintEnroll (){
 658:	cf 93       	push	r28
	uint8_t p = -1;
	printf("Waiting for valid finger to enroll as #\n"); printf(id);
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	91 e0       	ldi	r25, 0x01	; 1
 65e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
 662:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <id>
 666:	1f 92       	push	r1
 668:	8f 93       	push	r24
 66a:	0e 94 b6 04 	call	0x96c	; 0x96c <printf>
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
	 while (p != FINGERPRINT_OK) {
		 p = getImage();
 672:	0e 94 30 01 	call	0x260	; 0x260 <getImage>
 676:	c8 2f       	mov	r28, r24
		 switch (p) {
 678:	81 30       	cpi	r24, 0x01	; 1
 67a:	81 f0       	breq	.+32     	; 0x69c <getFingerprintEnroll+0x44>
 67c:	28 f0       	brcs	.+10     	; 0x688 <getFingerprintEnroll+0x30>
 67e:	82 30       	cpi	r24, 0x02	; 2
 680:	41 f0       	breq	.+16     	; 0x692 <getFingerprintEnroll+0x3a>
 682:	83 30       	cpi	r24, 0x03	; 3
 684:	81 f0       	breq	.+32     	; 0x6a6 <getFingerprintEnroll+0x4e>
 686:	14 c0       	rjmp	.+40     	; 0x6b0 <getFingerprintEnroll+0x58>
			 case FINGERPRINT_OK:
			 printf("Image taken\n");
 688:	88 e2       	ldi	r24, 0x28	; 40
 68a:	91 e0       	ldi	r25, 0x01	; 1
 68c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
 690:	15 c0       	rjmp	.+42     	; 0x6bc <getFingerprintEnroll+0x64>
			 break;
			 case FINGERPRINT_NOFINGER:
			 printf(".");
 692:	8e e2       	ldi	r24, 0x2E	; 46
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 cc 04 	call	0x998	; 0x998 <putchar>
			 break;
 69a:	eb cf       	rjmp	.-42     	; 0x672 <getFingerprintEnroll+0x1a>
			 case FINGERPRINT_PACKETRECIEVEERR:
			 printf("Communication error\n");
 69c:	84 e3       	ldi	r24, 0x34	; 52
 69e:	91 e0       	ldi	r25, 0x01	; 1
 6a0:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
			 break;
 6a4:	e6 cf       	rjmp	.-52     	; 0x672 <getFingerprintEnroll+0x1a>
			 case FINGERPRINT_IMAGEFAIL:
			 printf("Imaging error\n");
 6a6:	88 e4       	ldi	r24, 0x48	; 72
 6a8:	91 e0       	ldi	r25, 0x01	; 1
 6aa:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
			 break;
 6ae:	e1 cf       	rjmp	.-62     	; 0x672 <getFingerprintEnroll+0x1a>
			 default:
			 printf("Unknown error\n");
 6b0:	86 e5       	ldi	r24, 0x56	; 86
 6b2:	91 e0       	ldi	r25, 0x01	; 1
 6b4:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
}

uint8_t getFingerprintEnroll (){
	uint8_t p = -1;
	printf("Waiting for valid finger to enroll as #\n"); printf(id);
	 while (p != FINGERPRINT_OK) {
 6b8:	c1 11       	cpse	r28, r1
 6ba:	db cf       	rjmp	.-74     	; 0x672 <getFingerprintEnroll+0x1a>
			 printf("Unknown error\n");
			 break;
		 }
	 }
	 
	 p = image2Tz(1);
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	0e 94 6f 01 	call	0x2de	; 0x2de <image2Tz>
 6c2:	c8 2f       	mov	r28, r24
	  switch (p) {
 6c4:	86 30       	cpi	r24, 0x06	; 6
 6c6:	e9 f0       	breq	.+58     	; 0x702 <getFingerprintEnroll+0xaa>
 6c8:	28 f4       	brcc	.+10     	; 0x6d4 <getFingerprintEnroll+0x7c>
 6ca:	88 23       	and	r24, r24
 6cc:	41 f0       	breq	.+16     	; 0x6de <getFingerprintEnroll+0x86>
 6ce:	81 30       	cpi	r24, 0x01	; 1
 6d0:	f1 f0       	breq	.+60     	; 0x70e <getFingerprintEnroll+0xb6>
 6d2:	2f c0       	rjmp	.+94     	; 0x732 <getFingerprintEnroll+0xda>
 6d4:	87 30       	cpi	r24, 0x07	; 7
 6d6:	09 f1       	breq	.+66     	; 0x71a <getFingerprintEnroll+0xc2>
 6d8:	85 31       	cpi	r24, 0x15	; 21
 6da:	29 f1       	breq	.+74     	; 0x726 <getFingerprintEnroll+0xce>
 6dc:	2a c0       	rjmp	.+84     	; 0x732 <getFingerprintEnroll+0xda>
		  case FINGERPRINT_OK:
		  printf("Image converted\n");
 6de:	84 e6       	ldi	r24, 0x64	; 100
 6e0:	91 e0       	ldi	r25, 0x01	; 1
 6e2:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  default:
		  printf("Unknown error\n");
		  return p;
	  }
	  
	  printf("Remove finger\n");
 6e6:	84 e7       	ldi	r24, 0x74	; 116
 6e8:	91 e0       	ldi	r25, 0x01	; 1
 6ea:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ee:	2f ef       	ldi	r18, 0xFF	; 255
 6f0:	87 ea       	ldi	r24, 0xA7	; 167
 6f2:	91 e6       	ldi	r25, 0x61	; 97
 6f4:	21 50       	subi	r18, 0x01	; 1
 6f6:	80 40       	sbci	r24, 0x00	; 0
 6f8:	90 40       	sbci	r25, 0x00	; 0
 6fa:	e1 f7       	brne	.-8      	; 0x6f4 <getFingerprintEnroll+0x9c>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <getFingerprintEnroll+0xa6>
 6fe:	00 00       	nop
 700:	1e c0       	rjmp	.+60     	; 0x73e <getFingerprintEnroll+0xe6>
	  switch (p) {
		  case FINGERPRINT_OK:
		  printf("Image converted\n");
		  break;
		  case FINGERPRINT_IMAGEMESS:
		  printf("Image too messy\n");
 702:	82 e8       	ldi	r24, 0x82	; 130
 704:	91 e0       	ldi	r25, 0x01	; 1
 706:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 70a:	86 e0       	ldi	r24, 0x06	; 6
 70c:	c8 c0       	rjmp	.+400    	; 0x89e <getFingerprintEnroll+0x246>
		  case FINGERPRINT_PACKETRECIEVEERR:
		  printf("Communication error\n");
 70e:	84 e3       	ldi	r24, 0x34	; 52
 710:	91 e0       	ldi	r25, 0x01	; 1
 712:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	c2 c0       	rjmp	.+388    	; 0x89e <getFingerprintEnroll+0x246>
		  case FINGERPRINT_FEATUREFAIL:
		  printf("Could not find fingerprint features\n");
 71a:	82 e9       	ldi	r24, 0x92	; 146
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 722:	87 e0       	ldi	r24, 0x07	; 7
 724:	bc c0       	rjmp	.+376    	; 0x89e <getFingerprintEnroll+0x246>
		  case FINGERPRINT_INVALIDIMAGE:
		  printf("Could not find fingerprint features\n");
 726:	82 e9       	ldi	r24, 0x92	; 146
 728:	91 e0       	ldi	r25, 0x01	; 1
 72a:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 72e:	85 e1       	ldi	r24, 0x15	; 21
 730:	b6 c0       	rjmp	.+364    	; 0x89e <getFingerprintEnroll+0x246>
		  default:
		  printf("Unknown error\n");
 732:	86 e5       	ldi	r24, 0x56	; 86
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 73a:	8c 2f       	mov	r24, r28
 73c:	b0 c0       	rjmp	.+352    	; 0x89e <getFingerprintEnroll+0x246>
	  printf("Remove finger\n");
	  _delay_ms(2000);
	  p = 0;
	  
	  while (p != FINGERPRINT_NOFINGER) {
		  p = getImage();
 73e:	0e 94 30 01 	call	0x260	; 0x260 <getImage>
	  
	  printf("Remove finger\n");
	  _delay_ms(2000);
	  p = 0;
	  
	  while (p != FINGERPRINT_NOFINGER) {
 742:	82 30       	cpi	r24, 0x02	; 2
 744:	e1 f7       	brne	.-8      	; 0x73e <getFingerprintEnroll+0xe6>
		  p = getImage();
	  }
	  p = -1;
	  printf("Place same finger again\n");
 746:	86 eb       	ldi	r24, 0xB6	; 182
 748:	91 e0       	ldi	r25, 0x01	; 1
 74a:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
	  while (p != FINGERPRINT_OK) {
		  p = getImage();
 74e:	0e 94 30 01 	call	0x260	; 0x260 <getImage>
 752:	c8 2f       	mov	r28, r24
		  switch (p) {
 754:	81 30       	cpi	r24, 0x01	; 1
 756:	81 f0       	breq	.+32     	; 0x778 <getFingerprintEnroll+0x120>
 758:	28 f0       	brcs	.+10     	; 0x764 <getFingerprintEnroll+0x10c>
 75a:	82 30       	cpi	r24, 0x02	; 2
 75c:	41 f0       	breq	.+16     	; 0x76e <getFingerprintEnroll+0x116>
 75e:	83 30       	cpi	r24, 0x03	; 3
 760:	81 f0       	breq	.+32     	; 0x782 <getFingerprintEnroll+0x12a>
 762:	14 c0       	rjmp	.+40     	; 0x78c <getFingerprintEnroll+0x134>
			  case FINGERPRINT_OK:
			  printf("Image taken\n");
 764:	88 e2       	ldi	r24, 0x28	; 40
 766:	91 e0       	ldi	r25, 0x01	; 1
 768:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
 76c:	15 c0       	rjmp	.+42     	; 0x798 <getFingerprintEnroll+0x140>
			  break;
			  case FINGERPRINT_NOFINGER:
			  printf(".");
 76e:	8e e2       	ldi	r24, 0x2E	; 46
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	0e 94 cc 04 	call	0x998	; 0x998 <putchar>
			  break;
 776:	eb cf       	rjmp	.-42     	; 0x74e <getFingerprintEnroll+0xf6>
			  case FINGERPRINT_PACKETRECIEVEERR:
			  printf("Communication error\n");
 778:	84 e3       	ldi	r24, 0x34	; 52
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
			  break;
 780:	e6 cf       	rjmp	.-52     	; 0x74e <getFingerprintEnroll+0xf6>
			  case FINGERPRINT_IMAGEFAIL:
			  printf("Imaging error\n");
 782:	88 e4       	ldi	r24, 0x48	; 72
 784:	91 e0       	ldi	r25, 0x01	; 1
 786:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
			  break;
 78a:	e1 cf       	rjmp	.-62     	; 0x74e <getFingerprintEnroll+0xf6>
			  default:
			  printf("Unknown error\n");
 78c:	86 e5       	ldi	r24, 0x56	; 86
 78e:	91 e0       	ldi	r25, 0x01	; 1
 790:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
	  while (p != FINGERPRINT_NOFINGER) {
		  p = getImage();
	  }
	  p = -1;
	  printf("Place same finger again\n");
	  while (p != FINGERPRINT_OK) {
 794:	c1 11       	cpse	r28, r1
 796:	db cf       	rjmp	.-74     	; 0x74e <getFingerprintEnroll+0xf6>
		  }
	  }

	  // OK success!

	  p = image2Tz(2);
 798:	82 e0       	ldi	r24, 0x02	; 2
 79a:	0e 94 6f 01 	call	0x2de	; 0x2de <image2Tz>
 79e:	c8 2f       	mov	r28, r24
	  switch (p) {
 7a0:	86 30       	cpi	r24, 0x06	; 6
 7a2:	c9 f0       	breq	.+50     	; 0x7d6 <getFingerprintEnroll+0x17e>
 7a4:	28 f4       	brcc	.+10     	; 0x7b0 <getFingerprintEnroll+0x158>
 7a6:	88 23       	and	r24, r24
 7a8:	41 f0       	breq	.+16     	; 0x7ba <getFingerprintEnroll+0x162>
 7aa:	81 30       	cpi	r24, 0x01	; 1
 7ac:	d1 f0       	breq	.+52     	; 0x7e2 <getFingerprintEnroll+0x18a>
 7ae:	2b c0       	rjmp	.+86     	; 0x806 <getFingerprintEnroll+0x1ae>
 7b0:	87 30       	cpi	r24, 0x07	; 7
 7b2:	e9 f0       	breq	.+58     	; 0x7ee <getFingerprintEnroll+0x196>
 7b4:	85 31       	cpi	r24, 0x15	; 21
 7b6:	09 f1       	breq	.+66     	; 0x7fa <getFingerprintEnroll+0x1a2>
 7b8:	26 c0       	rjmp	.+76     	; 0x806 <getFingerprintEnroll+0x1ae>
		  case FINGERPRINT_OK:
		  printf("Image converted\n");
 7ba:	84 e6       	ldi	r24, 0x64	; 100
 7bc:	91 e0       	ldi	r25, 0x01	; 1
 7be:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  printf("Unknown error\n");
		  return p;
	  }

	  // OK converted!
	  printf("Creating model for #\n");
 7c2:	8e ec       	ldi	r24, 0xCE	; 206
 7c4:	91 e0       	ldi	r25, 0x01	; 1
 7c6:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>

	  p = createModel();
 7ca:	0e 94 ae 01 	call	0x35c	; 0x35c <createModel>
 7ce:	c8 2f       	mov	r28, r24
	  if (p == FINGERPRINT_OK) {
 7d0:	81 11       	cpse	r24, r1
 7d2:	2c c0       	rjmp	.+88     	; 0x82c <getFingerprintEnroll+0x1d4>
 7d4:	1e c0       	rjmp	.+60     	; 0x812 <getFingerprintEnroll+0x1ba>
	  switch (p) {
		  case FINGERPRINT_OK:
		  printf("Image converted\n");
		  break;
		  case FINGERPRINT_IMAGEMESS:
		  printf("Image too messy\n");
 7d6:	82 e8       	ldi	r24, 0x82	; 130
 7d8:	91 e0       	ldi	r25, 0x01	; 1
 7da:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 7de:	86 e0       	ldi	r24, 0x06	; 6
 7e0:	5e c0       	rjmp	.+188    	; 0x89e <getFingerprintEnroll+0x246>
		  case FINGERPRINT_PACKETRECIEVEERR:
		  printf("Communication error\n");
 7e2:	84 e3       	ldi	r24, 0x34	; 52
 7e4:	91 e0       	ldi	r25, 0x01	; 1
 7e6:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	58 c0       	rjmp	.+176    	; 0x89e <getFingerprintEnroll+0x246>
		  case FINGERPRINT_FEATUREFAIL:
		  printf("Could not find fingerprint features\n");
 7ee:	82 e9       	ldi	r24, 0x92	; 146
 7f0:	91 e0       	ldi	r25, 0x01	; 1
 7f2:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 7f6:	87 e0       	ldi	r24, 0x07	; 7
 7f8:	52 c0       	rjmp	.+164    	; 0x89e <getFingerprintEnroll+0x246>
		  case FINGERPRINT_INVALIDIMAGE:
		  printf("Could not find fingerprint features\n");
 7fa:	82 e9       	ldi	r24, 0x92	; 146
 7fc:	91 e0       	ldi	r25, 0x01	; 1
 7fe:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 802:	85 e1       	ldi	r24, 0x15	; 21
 804:	4c c0       	rjmp	.+152    	; 0x89e <getFingerprintEnroll+0x246>
		  default:
		  printf("Unknown error\n");
 806:	86 e5       	ldi	r24, 0x56	; 86
 808:	91 e0       	ldi	r25, 0x01	; 1
 80a:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 80e:	8c 2f       	mov	r24, r28
 810:	46 c0       	rjmp	.+140    	; 0x89e <getFingerprintEnroll+0x246>
	  // OK converted!
	  printf("Creating model for #\n");

	  p = createModel();
	  if (p == FINGERPRINT_OK) {
		  printf("Prints matched!\n");
 812:	83 ee       	ldi	r24, 0xE3	; 227
 814:	91 e0       	ldi	r25, 0x01	; 1
 816:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  } else {
		  printf("Unknown error\n");
		  return p;
	  }

	  p = storeModel(id);
 81a:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <id>
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 ed 01 	call	0x3da	; 0x3da <storeModel>
 824:	c8 2f       	mov	r28, r24
	  if (p == FINGERPRINT_OK) {
 826:	81 11       	cpse	r24, r1
 828:	1d c0       	rjmp	.+58     	; 0x864 <getFingerprintEnroll+0x20c>
 82a:	16 c0       	rjmp	.+44     	; 0x858 <getFingerprintEnroll+0x200>
	  printf("Creating model for #\n");

	  p = createModel();
	  if (p == FINGERPRINT_OK) {
		  printf("Prints matched!\n");
		  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 82c:	81 30       	cpi	r24, 0x01	; 1
 82e:	31 f4       	brne	.+12     	; 0x83c <getFingerprintEnroll+0x1e4>
		  printf("Communication error\n");
 830:	84 e3       	ldi	r24, 0x34	; 52
 832:	91 e0       	ldi	r25, 0x01	; 1
 834:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	31 c0       	rjmp	.+98     	; 0x89e <getFingerprintEnroll+0x246>
		  } else if (p == FINGERPRINT_ENROLLMISMATCH) {
 83c:	8a 30       	cpi	r24, 0x0A	; 10
 83e:	31 f4       	brne	.+12     	; 0x84c <getFingerprintEnroll+0x1f4>
		  printf("Fingerprints did not match\n");
 840:	83 ef       	ldi	r24, 0xF3	; 243
 842:	91 e0       	ldi	r25, 0x01	; 1
 844:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 848:	8a e0       	ldi	r24, 0x0A	; 10
 84a:	29 c0       	rjmp	.+82     	; 0x89e <getFingerprintEnroll+0x246>
		  } else {
		  printf("Unknown error\n");
 84c:	86 e5       	ldi	r24, 0x56	; 86
 84e:	91 e0       	ldi	r25, 0x01	; 1
 850:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 854:	8c 2f       	mov	r24, r28
 856:	23 c0       	rjmp	.+70     	; 0x89e <getFingerprintEnroll+0x246>
	  }

	  p = storeModel(id);
	  if (p == FINGERPRINT_OK) {
		  printf("Stored!\n");
 858:	8e e0       	ldi	r24, 0x0E	; 14
 85a:	92 e0       	ldi	r25, 0x02	; 2
 85c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  } else {
		  printf("Unknown error\n");
		  return p;
	  }

	  return true;
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	1d c0       	rjmp	.+58     	; 0x89e <getFingerprintEnroll+0x246>
	  }

	  p = storeModel(id);
	  if (p == FINGERPRINT_OK) {
		  printf("Stored!\n");
		  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
 864:	81 30       	cpi	r24, 0x01	; 1
 866:	31 f4       	brne	.+12     	; 0x874 <getFingerprintEnroll+0x21c>
		  printf("Communication error\n");
 868:	84 e3       	ldi	r24, 0x34	; 52
 86a:	91 e0       	ldi	r25, 0x01	; 1
 86c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	15 c0       	rjmp	.+42     	; 0x89e <getFingerprintEnroll+0x246>
		  } else if (p == FINGERPRINT_BADLOCATION) {
 874:	8b 30       	cpi	r24, 0x0B	; 11
 876:	31 f4       	brne	.+12     	; 0x884 <getFingerprintEnroll+0x22c>
		  printf("Could not store in that location\n");
 878:	86 e1       	ldi	r24, 0x16	; 22
 87a:	92 e0       	ldi	r25, 0x02	; 2
 87c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 880:	8b e0       	ldi	r24, 0x0B	; 11
 882:	0d c0       	rjmp	.+26     	; 0x89e <getFingerprintEnroll+0x246>
		  } else if (p == FINGERPRINT_FLASHERR) {
 884:	88 31       	cpi	r24, 0x18	; 24
 886:	31 f4       	brne	.+12     	; 0x894 <getFingerprintEnroll+0x23c>
		  printf("Error writing to flash\n");
 888:	87 e3       	ldi	r24, 0x37	; 55
 88a:	92 e0       	ldi	r25, 0x02	; 2
 88c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 890:	88 e1       	ldi	r24, 0x18	; 24
 892:	05 c0       	rjmp	.+10     	; 0x89e <getFingerprintEnroll+0x246>
		  } else {
		  printf("Unknown error\n");
 894:	86 e5       	ldi	r24, 0x56	; 86
 896:	91 e0       	ldi	r25, 0x01	; 1
 898:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <puts>
		  return p;
 89c:	8c 2f       	mov	r24, r28
	  }

	  return true;
	
}
 89e:	cf 91       	pop	r28
 8a0:	08 95       	ret

000008a2 <main>:
uint8_t getFingerprintEnroll();
uint8_t readNumber();

int main(void){

	lcd_init();
 8a2:	0e 94 af 02 	call	0x55e	; 0x55e <lcd_init>
	initUART();
 8a6:	0e 94 85 04 	call	0x90a	; 0x90a <initUART>
	
			lcd_setCursor(0,0);
 8aa:	60 e0       	ldi	r22, 0x00	; 0
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	0e 94 15 03 	call	0x62a	; 0x62a <lcd_setCursor>
			lcd_clear();
 8b2:	0e 94 0b 03 	call	0x616	; 0x616 <lcd_clear>
			lcd_send_string("Hello world!");
 8b6:	8e e4       	ldi	r24, 0x4E	; 78
 8b8:	92 e0       	ldi	r25, 0x02	; 2
 8ba:	0e 94 1d 03 	call	0x63a	; 0x63a <lcd_send_string>
 8be:	2f ef       	ldi	r18, 0xFF	; 255
 8c0:	87 ea       	ldi	r24, 0xA7	; 167
 8c2:	91 e6       	ldi	r25, 0x61	; 97
 8c4:	21 50       	subi	r18, 0x01	; 1
 8c6:	80 40       	sbci	r24, 0x00	; 0
 8c8:	90 40       	sbci	r25, 0x00	; 0
 8ca:	e1 f7       	brne	.-8      	; 0x8c4 <main+0x22>
 8cc:	00 c0       	rjmp	.+0      	; 0x8ce <main+0x2c>
 8ce:	00 00       	nop
			_delay_ms(2000);
			lcd_setCursor(0,1);
 8d0:	61 e0       	ldi	r22, 0x01	; 1
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	0e 94 15 03 	call	0x62a	; 0x62a <lcd_setCursor>
			lcd_send_string("KURWA DZIALA XD");
 8d8:	8b e5       	ldi	r24, 0x5B	; 91
 8da:	92 e0       	ldi	r25, 0x02	; 2
 8dc:	0e 94 1d 03 	call	0x63a	; 0x63a <lcd_send_string>
			lcd_clear();
 8e0:	0e 94 0b 03 	call	0x616	; 0x616 <lcd_clear>
			lcd_setCursor(0,0);
 8e4:	60 e0       	ldi	r22, 0x00	; 0
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	0e 94 15 03 	call	0x62a	; 0x62a <lcd_setCursor>
			
			id = 1;
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <id>
				
	while(1)
	{	
		getFingerprintEnroll();
 8f2:	0e 94 2c 03 	call	0x658	; 0x658 <getFingerprintEnroll>
 8f6:	2f ef       	ldi	r18, 0xFF	; 255
 8f8:	83 e2       	ldi	r24, 0x23	; 35
 8fa:	94 ef       	ldi	r25, 0xF4	; 244
 8fc:	21 50       	subi	r18, 0x01	; 1
 8fe:	80 40       	sbci	r24, 0x00	; 0
 900:	90 40       	sbci	r25, 0x00	; 0
 902:	e1 f7       	brne	.-8      	; 0x8fc <main+0x5a>
 904:	00 c0       	rjmp	.+0      	; 0x906 <__stack+0x7>
 906:	00 00       	nop
 908:	f4 cf       	rjmp	.-24     	; 0x8f2 <main+0x50>

0000090a <initUART>:
	{
		++temp;
	}

	return rxstr;
}
 90a:	51 9a       	sbi	0x0a, 1	; 10
 90c:	50 98       	cbi	0x0a, 0	; 10
 90e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 912:	80 e1       	ldi	r24, 0x10	; 16
 914:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 918:	e1 ec       	ldi	r30, 0xC1	; 193
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	80 81       	ld	r24, Z
 91e:	88 60       	ori	r24, 0x08	; 8
 920:	80 83       	st	Z, r24
 922:	80 81       	ld	r24, Z
 924:	80 61       	ori	r24, 0x10	; 16
 926:	80 83       	st	Z, r24
 928:	86 e0       	ldi	r24, 0x06	; 6
 92a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 92e:	08 95       	ret

00000930 <getByte>:
 930:	e0 ec       	ldi	r30, 0xC0	; 192
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	80 81       	ld	r24, Z
 936:	88 23       	and	r24, r24
 938:	ec f7       	brge	.-6      	; 0x934 <getByte+0x4>
 93a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 93e:	08 95       	ret

00000940 <putByte>:
 940:	e0 ec       	ldi	r30, 0xC0	; 192
 942:	f0 e0       	ldi	r31, 0x00	; 0
 944:	90 81       	ld	r25, Z
 946:	95 ff       	sbrs	r25, 5
 948:	fd cf       	rjmp	.-6      	; 0x944 <putByte+0x4>
 94a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 94e:	08 95       	ret

00000950 <checkEmptyRegister>:

bool checkEmptyRegister(){
	 if(!(UCSR0A & (1<<UDRE0))) return true;
 950:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 954:	85 fb       	bst	r24, 5
 956:	88 27       	eor	r24, r24
 958:	80 f9       	bld	r24, 0
	 else return false;
 95a:	91 e0       	ldi	r25, 0x01	; 1
 95c:	89 27       	eor	r24, r25
 95e:	08 95       	ret

00000960 <__tablejump2__>:
 960:	ee 0f       	add	r30, r30
 962:	ff 1f       	adc	r31, r31
 964:	05 90       	lpm	r0, Z+
 966:	f4 91       	lpm	r31, Z
 968:	e0 2d       	mov	r30, r0
 96a:	09 94       	ijmp

0000096c <printf>:
 96c:	a0 e0       	ldi	r26, 0x00	; 0
 96e:	b0 e0       	ldi	r27, 0x00	; 0
 970:	ec eb       	ldi	r30, 0xBC	; 188
 972:	f4 e0       	ldi	r31, 0x04	; 4
 974:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__prologue_saves__+0x20>
 978:	ae 01       	movw	r20, r28
 97a:	4b 5f       	subi	r20, 0xFB	; 251
 97c:	5f 4f       	sbci	r21, 0xFF	; 255
 97e:	fa 01       	movw	r30, r20
 980:	61 91       	ld	r22, Z+
 982:	71 91       	ld	r23, Z+
 984:	af 01       	movw	r20, r30
 986:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <__iob+0x2>
 98a:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <__iob+0x3>
 98e:	0e 94 03 05 	call	0xa06	; 0xa06 <vfprintf>
 992:	e2 e0       	ldi	r30, 0x02	; 2
 994:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__epilogue_restores__+0x20>

00000998 <putchar>:
 998:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <__iob+0x2>
 99c:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <__iob+0x3>
 9a0:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 9a4:	08 95       	ret

000009a6 <puts>:
 9a6:	0f 93       	push	r16
 9a8:	1f 93       	push	r17
 9aa:	cf 93       	push	r28
 9ac:	df 93       	push	r29
 9ae:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <__iob+0x2>
 9b2:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <__iob+0x3>
 9b6:	23 81       	ldd	r18, Z+3	; 0x03
 9b8:	21 ff       	sbrs	r18, 1
 9ba:	1b c0       	rjmp	.+54     	; 0x9f2 <puts+0x4c>
 9bc:	8c 01       	movw	r16, r24
 9be:	d0 e0       	ldi	r29, 0x00	; 0
 9c0:	c0 e0       	ldi	r28, 0x00	; 0
 9c2:	f8 01       	movw	r30, r16
 9c4:	81 91       	ld	r24, Z+
 9c6:	8f 01       	movw	r16, r30
 9c8:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <__iob+0x2>
 9cc:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <__iob+0x3>
 9d0:	db 01       	movw	r26, r22
 9d2:	18 96       	adiw	r26, 0x08	; 8
 9d4:	ed 91       	ld	r30, X+
 9d6:	fc 91       	ld	r31, X
 9d8:	19 97       	sbiw	r26, 0x09	; 9
 9da:	88 23       	and	r24, r24
 9dc:	31 f0       	breq	.+12     	; 0x9ea <puts+0x44>
 9de:	09 95       	icall
 9e0:	89 2b       	or	r24, r25
 9e2:	79 f3       	breq	.-34     	; 0x9c2 <puts+0x1c>
 9e4:	df ef       	ldi	r29, 0xFF	; 255
 9e6:	cf ef       	ldi	r28, 0xFF	; 255
 9e8:	ec cf       	rjmp	.-40     	; 0x9c2 <puts+0x1c>
 9ea:	8a e0       	ldi	r24, 0x0A	; 10
 9ec:	09 95       	icall
 9ee:	89 2b       	or	r24, r25
 9f0:	19 f0       	breq	.+6      	; 0x9f8 <puts+0x52>
 9f2:	8f ef       	ldi	r24, 0xFF	; 255
 9f4:	9f ef       	ldi	r25, 0xFF	; 255
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <puts+0x56>
 9f8:	8d 2f       	mov	r24, r29
 9fa:	9c 2f       	mov	r25, r28
 9fc:	df 91       	pop	r29
 9fe:	cf 91       	pop	r28
 a00:	1f 91       	pop	r17
 a02:	0f 91       	pop	r16
 a04:	08 95       	ret

00000a06 <vfprintf>:
 a06:	ab e0       	ldi	r26, 0x0B	; 11
 a08:	b0 e0       	ldi	r27, 0x00	; 0
 a0a:	e9 e0       	ldi	r30, 0x09	; 9
 a0c:	f5 e0       	ldi	r31, 0x05	; 5
 a0e:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__prologue_saves__>
 a12:	6c 01       	movw	r12, r24
 a14:	7b 01       	movw	r14, r22
 a16:	8a 01       	movw	r16, r20
 a18:	fc 01       	movw	r30, r24
 a1a:	17 82       	std	Z+7, r1	; 0x07
 a1c:	16 82       	std	Z+6, r1	; 0x06
 a1e:	83 81       	ldd	r24, Z+3	; 0x03
 a20:	81 ff       	sbrs	r24, 1
 a22:	cc c1       	rjmp	.+920    	; 0xdbc <vfprintf+0x3b6>
 a24:	ce 01       	movw	r24, r28
 a26:	01 96       	adiw	r24, 0x01	; 1
 a28:	3c 01       	movw	r6, r24
 a2a:	f6 01       	movw	r30, r12
 a2c:	93 81       	ldd	r25, Z+3	; 0x03
 a2e:	f7 01       	movw	r30, r14
 a30:	93 fd       	sbrc	r25, 3
 a32:	85 91       	lpm	r24, Z+
 a34:	93 ff       	sbrs	r25, 3
 a36:	81 91       	ld	r24, Z+
 a38:	7f 01       	movw	r14, r30
 a3a:	88 23       	and	r24, r24
 a3c:	09 f4       	brne	.+2      	; 0xa40 <vfprintf+0x3a>
 a3e:	ba c1       	rjmp	.+884    	; 0xdb4 <vfprintf+0x3ae>
 a40:	85 32       	cpi	r24, 0x25	; 37
 a42:	39 f4       	brne	.+14     	; 0xa52 <vfprintf+0x4c>
 a44:	93 fd       	sbrc	r25, 3
 a46:	85 91       	lpm	r24, Z+
 a48:	93 ff       	sbrs	r25, 3
 a4a:	81 91       	ld	r24, Z+
 a4c:	7f 01       	movw	r14, r30
 a4e:	85 32       	cpi	r24, 0x25	; 37
 a50:	29 f4       	brne	.+10     	; 0xa5c <vfprintf+0x56>
 a52:	b6 01       	movw	r22, r12
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 a5a:	e7 cf       	rjmp	.-50     	; 0xa2a <vfprintf+0x24>
 a5c:	91 2c       	mov	r9, r1
 a5e:	21 2c       	mov	r2, r1
 a60:	31 2c       	mov	r3, r1
 a62:	ff e1       	ldi	r31, 0x1F	; 31
 a64:	f3 15       	cp	r31, r3
 a66:	d8 f0       	brcs	.+54     	; 0xa9e <vfprintf+0x98>
 a68:	8b 32       	cpi	r24, 0x2B	; 43
 a6a:	79 f0       	breq	.+30     	; 0xa8a <vfprintf+0x84>
 a6c:	38 f4       	brcc	.+14     	; 0xa7c <vfprintf+0x76>
 a6e:	80 32       	cpi	r24, 0x20	; 32
 a70:	79 f0       	breq	.+30     	; 0xa90 <vfprintf+0x8a>
 a72:	83 32       	cpi	r24, 0x23	; 35
 a74:	a1 f4       	brne	.+40     	; 0xa9e <vfprintf+0x98>
 a76:	23 2d       	mov	r18, r3
 a78:	20 61       	ori	r18, 0x10	; 16
 a7a:	1d c0       	rjmp	.+58     	; 0xab6 <vfprintf+0xb0>
 a7c:	8d 32       	cpi	r24, 0x2D	; 45
 a7e:	61 f0       	breq	.+24     	; 0xa98 <vfprintf+0x92>
 a80:	80 33       	cpi	r24, 0x30	; 48
 a82:	69 f4       	brne	.+26     	; 0xa9e <vfprintf+0x98>
 a84:	23 2d       	mov	r18, r3
 a86:	21 60       	ori	r18, 0x01	; 1
 a88:	16 c0       	rjmp	.+44     	; 0xab6 <vfprintf+0xb0>
 a8a:	83 2d       	mov	r24, r3
 a8c:	82 60       	ori	r24, 0x02	; 2
 a8e:	38 2e       	mov	r3, r24
 a90:	e3 2d       	mov	r30, r3
 a92:	e4 60       	ori	r30, 0x04	; 4
 a94:	3e 2e       	mov	r3, r30
 a96:	2a c0       	rjmp	.+84     	; 0xaec <vfprintf+0xe6>
 a98:	f3 2d       	mov	r31, r3
 a9a:	f8 60       	ori	r31, 0x08	; 8
 a9c:	1d c0       	rjmp	.+58     	; 0xad8 <vfprintf+0xd2>
 a9e:	37 fc       	sbrc	r3, 7
 aa0:	2d c0       	rjmp	.+90     	; 0xafc <vfprintf+0xf6>
 aa2:	20 ed       	ldi	r18, 0xD0	; 208
 aa4:	28 0f       	add	r18, r24
 aa6:	2a 30       	cpi	r18, 0x0A	; 10
 aa8:	40 f0       	brcs	.+16     	; 0xaba <vfprintf+0xb4>
 aaa:	8e 32       	cpi	r24, 0x2E	; 46
 aac:	b9 f4       	brne	.+46     	; 0xadc <vfprintf+0xd6>
 aae:	36 fc       	sbrc	r3, 6
 ab0:	81 c1       	rjmp	.+770    	; 0xdb4 <vfprintf+0x3ae>
 ab2:	23 2d       	mov	r18, r3
 ab4:	20 64       	ori	r18, 0x40	; 64
 ab6:	32 2e       	mov	r3, r18
 ab8:	19 c0       	rjmp	.+50     	; 0xaec <vfprintf+0xe6>
 aba:	36 fe       	sbrs	r3, 6
 abc:	06 c0       	rjmp	.+12     	; 0xaca <vfprintf+0xc4>
 abe:	8a e0       	ldi	r24, 0x0A	; 10
 ac0:	98 9e       	mul	r9, r24
 ac2:	20 0d       	add	r18, r0
 ac4:	11 24       	eor	r1, r1
 ac6:	92 2e       	mov	r9, r18
 ac8:	11 c0       	rjmp	.+34     	; 0xaec <vfprintf+0xe6>
 aca:	ea e0       	ldi	r30, 0x0A	; 10
 acc:	2e 9e       	mul	r2, r30
 ace:	20 0d       	add	r18, r0
 ad0:	11 24       	eor	r1, r1
 ad2:	22 2e       	mov	r2, r18
 ad4:	f3 2d       	mov	r31, r3
 ad6:	f0 62       	ori	r31, 0x20	; 32
 ad8:	3f 2e       	mov	r3, r31
 ada:	08 c0       	rjmp	.+16     	; 0xaec <vfprintf+0xe6>
 adc:	8c 36       	cpi	r24, 0x6C	; 108
 ade:	21 f4       	brne	.+8      	; 0xae8 <vfprintf+0xe2>
 ae0:	83 2d       	mov	r24, r3
 ae2:	80 68       	ori	r24, 0x80	; 128
 ae4:	38 2e       	mov	r3, r24
 ae6:	02 c0       	rjmp	.+4      	; 0xaec <vfprintf+0xe6>
 ae8:	88 36       	cpi	r24, 0x68	; 104
 aea:	41 f4       	brne	.+16     	; 0xafc <vfprintf+0xf6>
 aec:	f7 01       	movw	r30, r14
 aee:	93 fd       	sbrc	r25, 3
 af0:	85 91       	lpm	r24, Z+
 af2:	93 ff       	sbrs	r25, 3
 af4:	81 91       	ld	r24, Z+
 af6:	7f 01       	movw	r14, r30
 af8:	81 11       	cpse	r24, r1
 afa:	b3 cf       	rjmp	.-154    	; 0xa62 <vfprintf+0x5c>
 afc:	98 2f       	mov	r25, r24
 afe:	9f 7d       	andi	r25, 0xDF	; 223
 b00:	95 54       	subi	r25, 0x45	; 69
 b02:	93 30       	cpi	r25, 0x03	; 3
 b04:	28 f4       	brcc	.+10     	; 0xb10 <vfprintf+0x10a>
 b06:	0c 5f       	subi	r16, 0xFC	; 252
 b08:	1f 4f       	sbci	r17, 0xFF	; 255
 b0a:	9f e3       	ldi	r25, 0x3F	; 63
 b0c:	99 83       	std	Y+1, r25	; 0x01
 b0e:	0d c0       	rjmp	.+26     	; 0xb2a <vfprintf+0x124>
 b10:	83 36       	cpi	r24, 0x63	; 99
 b12:	31 f0       	breq	.+12     	; 0xb20 <vfprintf+0x11a>
 b14:	83 37       	cpi	r24, 0x73	; 115
 b16:	71 f0       	breq	.+28     	; 0xb34 <vfprintf+0x12e>
 b18:	83 35       	cpi	r24, 0x53	; 83
 b1a:	09 f0       	breq	.+2      	; 0xb1e <vfprintf+0x118>
 b1c:	59 c0       	rjmp	.+178    	; 0xbd0 <vfprintf+0x1ca>
 b1e:	21 c0       	rjmp	.+66     	; 0xb62 <vfprintf+0x15c>
 b20:	f8 01       	movw	r30, r16
 b22:	80 81       	ld	r24, Z
 b24:	89 83       	std	Y+1, r24	; 0x01
 b26:	0e 5f       	subi	r16, 0xFE	; 254
 b28:	1f 4f       	sbci	r17, 0xFF	; 255
 b2a:	88 24       	eor	r8, r8
 b2c:	83 94       	inc	r8
 b2e:	91 2c       	mov	r9, r1
 b30:	53 01       	movw	r10, r6
 b32:	13 c0       	rjmp	.+38     	; 0xb5a <vfprintf+0x154>
 b34:	28 01       	movw	r4, r16
 b36:	f2 e0       	ldi	r31, 0x02	; 2
 b38:	4f 0e       	add	r4, r31
 b3a:	51 1c       	adc	r5, r1
 b3c:	f8 01       	movw	r30, r16
 b3e:	a0 80       	ld	r10, Z
 b40:	b1 80       	ldd	r11, Z+1	; 0x01
 b42:	36 fe       	sbrs	r3, 6
 b44:	03 c0       	rjmp	.+6      	; 0xb4c <vfprintf+0x146>
 b46:	69 2d       	mov	r22, r9
 b48:	70 e0       	ldi	r23, 0x00	; 0
 b4a:	02 c0       	rjmp	.+4      	; 0xb50 <vfprintf+0x14a>
 b4c:	6f ef       	ldi	r22, 0xFF	; 255
 b4e:	7f ef       	ldi	r23, 0xFF	; 255
 b50:	c5 01       	movw	r24, r10
 b52:	0e 94 ef 06 	call	0xdde	; 0xdde <strnlen>
 b56:	4c 01       	movw	r8, r24
 b58:	82 01       	movw	r16, r4
 b5a:	f3 2d       	mov	r31, r3
 b5c:	ff 77       	andi	r31, 0x7F	; 127
 b5e:	3f 2e       	mov	r3, r31
 b60:	16 c0       	rjmp	.+44     	; 0xb8e <vfprintf+0x188>
 b62:	28 01       	movw	r4, r16
 b64:	22 e0       	ldi	r18, 0x02	; 2
 b66:	42 0e       	add	r4, r18
 b68:	51 1c       	adc	r5, r1
 b6a:	f8 01       	movw	r30, r16
 b6c:	a0 80       	ld	r10, Z
 b6e:	b1 80       	ldd	r11, Z+1	; 0x01
 b70:	36 fe       	sbrs	r3, 6
 b72:	03 c0       	rjmp	.+6      	; 0xb7a <vfprintf+0x174>
 b74:	69 2d       	mov	r22, r9
 b76:	70 e0       	ldi	r23, 0x00	; 0
 b78:	02 c0       	rjmp	.+4      	; 0xb7e <vfprintf+0x178>
 b7a:	6f ef       	ldi	r22, 0xFF	; 255
 b7c:	7f ef       	ldi	r23, 0xFF	; 255
 b7e:	c5 01       	movw	r24, r10
 b80:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <strnlen_P>
 b84:	4c 01       	movw	r8, r24
 b86:	f3 2d       	mov	r31, r3
 b88:	f0 68       	ori	r31, 0x80	; 128
 b8a:	3f 2e       	mov	r3, r31
 b8c:	82 01       	movw	r16, r4
 b8e:	33 fc       	sbrc	r3, 3
 b90:	1b c0       	rjmp	.+54     	; 0xbc8 <vfprintf+0x1c2>
 b92:	82 2d       	mov	r24, r2
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	88 16       	cp	r8, r24
 b98:	99 06       	cpc	r9, r25
 b9a:	b0 f4       	brcc	.+44     	; 0xbc8 <vfprintf+0x1c2>
 b9c:	b6 01       	movw	r22, r12
 b9e:	80 e2       	ldi	r24, 0x20	; 32
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 ba6:	2a 94       	dec	r2
 ba8:	f4 cf       	rjmp	.-24     	; 0xb92 <vfprintf+0x18c>
 baa:	f5 01       	movw	r30, r10
 bac:	37 fc       	sbrc	r3, 7
 bae:	85 91       	lpm	r24, Z+
 bb0:	37 fe       	sbrs	r3, 7
 bb2:	81 91       	ld	r24, Z+
 bb4:	5f 01       	movw	r10, r30
 bb6:	b6 01       	movw	r22, r12
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 bbe:	21 10       	cpse	r2, r1
 bc0:	2a 94       	dec	r2
 bc2:	21 e0       	ldi	r18, 0x01	; 1
 bc4:	82 1a       	sub	r8, r18
 bc6:	91 08       	sbc	r9, r1
 bc8:	81 14       	cp	r8, r1
 bca:	91 04       	cpc	r9, r1
 bcc:	71 f7       	brne	.-36     	; 0xbaa <vfprintf+0x1a4>
 bce:	e8 c0       	rjmp	.+464    	; 0xda0 <vfprintf+0x39a>
 bd0:	84 36       	cpi	r24, 0x64	; 100
 bd2:	11 f0       	breq	.+4      	; 0xbd8 <vfprintf+0x1d2>
 bd4:	89 36       	cpi	r24, 0x69	; 105
 bd6:	41 f5       	brne	.+80     	; 0xc28 <vfprintf+0x222>
 bd8:	f8 01       	movw	r30, r16
 bda:	37 fe       	sbrs	r3, 7
 bdc:	07 c0       	rjmp	.+14     	; 0xbec <vfprintf+0x1e6>
 bde:	60 81       	ld	r22, Z
 be0:	71 81       	ldd	r23, Z+1	; 0x01
 be2:	82 81       	ldd	r24, Z+2	; 0x02
 be4:	93 81       	ldd	r25, Z+3	; 0x03
 be6:	0c 5f       	subi	r16, 0xFC	; 252
 be8:	1f 4f       	sbci	r17, 0xFF	; 255
 bea:	08 c0       	rjmp	.+16     	; 0xbfc <vfprintf+0x1f6>
 bec:	60 81       	ld	r22, Z
 bee:	71 81       	ldd	r23, Z+1	; 0x01
 bf0:	07 2e       	mov	r0, r23
 bf2:	00 0c       	add	r0, r0
 bf4:	88 0b       	sbc	r24, r24
 bf6:	99 0b       	sbc	r25, r25
 bf8:	0e 5f       	subi	r16, 0xFE	; 254
 bfa:	1f 4f       	sbci	r17, 0xFF	; 255
 bfc:	f3 2d       	mov	r31, r3
 bfe:	ff 76       	andi	r31, 0x6F	; 111
 c00:	3f 2e       	mov	r3, r31
 c02:	97 ff       	sbrs	r25, 7
 c04:	09 c0       	rjmp	.+18     	; 0xc18 <vfprintf+0x212>
 c06:	90 95       	com	r25
 c08:	80 95       	com	r24
 c0a:	70 95       	com	r23
 c0c:	61 95       	neg	r22
 c0e:	7f 4f       	sbci	r23, 0xFF	; 255
 c10:	8f 4f       	sbci	r24, 0xFF	; 255
 c12:	9f 4f       	sbci	r25, 0xFF	; 255
 c14:	f0 68       	ori	r31, 0x80	; 128
 c16:	3f 2e       	mov	r3, r31
 c18:	2a e0       	ldi	r18, 0x0A	; 10
 c1a:	30 e0       	ldi	r19, 0x00	; 0
 c1c:	a3 01       	movw	r20, r6
 c1e:	0e 94 36 07 	call	0xe6c	; 0xe6c <__ultoa_invert>
 c22:	88 2e       	mov	r8, r24
 c24:	86 18       	sub	r8, r6
 c26:	45 c0       	rjmp	.+138    	; 0xcb2 <vfprintf+0x2ac>
 c28:	85 37       	cpi	r24, 0x75	; 117
 c2a:	31 f4       	brne	.+12     	; 0xc38 <vfprintf+0x232>
 c2c:	23 2d       	mov	r18, r3
 c2e:	2f 7e       	andi	r18, 0xEF	; 239
 c30:	b2 2e       	mov	r11, r18
 c32:	2a e0       	ldi	r18, 0x0A	; 10
 c34:	30 e0       	ldi	r19, 0x00	; 0
 c36:	25 c0       	rjmp	.+74     	; 0xc82 <vfprintf+0x27c>
 c38:	93 2d       	mov	r25, r3
 c3a:	99 7f       	andi	r25, 0xF9	; 249
 c3c:	b9 2e       	mov	r11, r25
 c3e:	8f 36       	cpi	r24, 0x6F	; 111
 c40:	c1 f0       	breq	.+48     	; 0xc72 <vfprintf+0x26c>
 c42:	18 f4       	brcc	.+6      	; 0xc4a <vfprintf+0x244>
 c44:	88 35       	cpi	r24, 0x58	; 88
 c46:	79 f0       	breq	.+30     	; 0xc66 <vfprintf+0x260>
 c48:	b5 c0       	rjmp	.+362    	; 0xdb4 <vfprintf+0x3ae>
 c4a:	80 37       	cpi	r24, 0x70	; 112
 c4c:	19 f0       	breq	.+6      	; 0xc54 <vfprintf+0x24e>
 c4e:	88 37       	cpi	r24, 0x78	; 120
 c50:	21 f0       	breq	.+8      	; 0xc5a <vfprintf+0x254>
 c52:	b0 c0       	rjmp	.+352    	; 0xdb4 <vfprintf+0x3ae>
 c54:	e9 2f       	mov	r30, r25
 c56:	e0 61       	ori	r30, 0x10	; 16
 c58:	be 2e       	mov	r11, r30
 c5a:	b4 fe       	sbrs	r11, 4
 c5c:	0d c0       	rjmp	.+26     	; 0xc78 <vfprintf+0x272>
 c5e:	fb 2d       	mov	r31, r11
 c60:	f4 60       	ori	r31, 0x04	; 4
 c62:	bf 2e       	mov	r11, r31
 c64:	09 c0       	rjmp	.+18     	; 0xc78 <vfprintf+0x272>
 c66:	34 fe       	sbrs	r3, 4
 c68:	0a c0       	rjmp	.+20     	; 0xc7e <vfprintf+0x278>
 c6a:	29 2f       	mov	r18, r25
 c6c:	26 60       	ori	r18, 0x06	; 6
 c6e:	b2 2e       	mov	r11, r18
 c70:	06 c0       	rjmp	.+12     	; 0xc7e <vfprintf+0x278>
 c72:	28 e0       	ldi	r18, 0x08	; 8
 c74:	30 e0       	ldi	r19, 0x00	; 0
 c76:	05 c0       	rjmp	.+10     	; 0xc82 <vfprintf+0x27c>
 c78:	20 e1       	ldi	r18, 0x10	; 16
 c7a:	30 e0       	ldi	r19, 0x00	; 0
 c7c:	02 c0       	rjmp	.+4      	; 0xc82 <vfprintf+0x27c>
 c7e:	20 e1       	ldi	r18, 0x10	; 16
 c80:	32 e0       	ldi	r19, 0x02	; 2
 c82:	f8 01       	movw	r30, r16
 c84:	b7 fe       	sbrs	r11, 7
 c86:	07 c0       	rjmp	.+14     	; 0xc96 <vfprintf+0x290>
 c88:	60 81       	ld	r22, Z
 c8a:	71 81       	ldd	r23, Z+1	; 0x01
 c8c:	82 81       	ldd	r24, Z+2	; 0x02
 c8e:	93 81       	ldd	r25, Z+3	; 0x03
 c90:	0c 5f       	subi	r16, 0xFC	; 252
 c92:	1f 4f       	sbci	r17, 0xFF	; 255
 c94:	06 c0       	rjmp	.+12     	; 0xca2 <vfprintf+0x29c>
 c96:	60 81       	ld	r22, Z
 c98:	71 81       	ldd	r23, Z+1	; 0x01
 c9a:	80 e0       	ldi	r24, 0x00	; 0
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	0e 5f       	subi	r16, 0xFE	; 254
 ca0:	1f 4f       	sbci	r17, 0xFF	; 255
 ca2:	a3 01       	movw	r20, r6
 ca4:	0e 94 36 07 	call	0xe6c	; 0xe6c <__ultoa_invert>
 ca8:	88 2e       	mov	r8, r24
 caa:	86 18       	sub	r8, r6
 cac:	fb 2d       	mov	r31, r11
 cae:	ff 77       	andi	r31, 0x7F	; 127
 cb0:	3f 2e       	mov	r3, r31
 cb2:	36 fe       	sbrs	r3, 6
 cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <vfprintf+0x2ca>
 cb6:	23 2d       	mov	r18, r3
 cb8:	2e 7f       	andi	r18, 0xFE	; 254
 cba:	a2 2e       	mov	r10, r18
 cbc:	89 14       	cp	r8, r9
 cbe:	58 f4       	brcc	.+22     	; 0xcd6 <vfprintf+0x2d0>
 cc0:	34 fe       	sbrs	r3, 4
 cc2:	0b c0       	rjmp	.+22     	; 0xcda <vfprintf+0x2d4>
 cc4:	32 fc       	sbrc	r3, 2
 cc6:	09 c0       	rjmp	.+18     	; 0xcda <vfprintf+0x2d4>
 cc8:	83 2d       	mov	r24, r3
 cca:	8e 7e       	andi	r24, 0xEE	; 238
 ccc:	a8 2e       	mov	r10, r24
 cce:	05 c0       	rjmp	.+10     	; 0xcda <vfprintf+0x2d4>
 cd0:	b8 2c       	mov	r11, r8
 cd2:	a3 2c       	mov	r10, r3
 cd4:	03 c0       	rjmp	.+6      	; 0xcdc <vfprintf+0x2d6>
 cd6:	b8 2c       	mov	r11, r8
 cd8:	01 c0       	rjmp	.+2      	; 0xcdc <vfprintf+0x2d6>
 cda:	b9 2c       	mov	r11, r9
 cdc:	a4 fe       	sbrs	r10, 4
 cde:	0f c0       	rjmp	.+30     	; 0xcfe <vfprintf+0x2f8>
 ce0:	fe 01       	movw	r30, r28
 ce2:	e8 0d       	add	r30, r8
 ce4:	f1 1d       	adc	r31, r1
 ce6:	80 81       	ld	r24, Z
 ce8:	80 33       	cpi	r24, 0x30	; 48
 cea:	21 f4       	brne	.+8      	; 0xcf4 <vfprintf+0x2ee>
 cec:	9a 2d       	mov	r25, r10
 cee:	99 7e       	andi	r25, 0xE9	; 233
 cf0:	a9 2e       	mov	r10, r25
 cf2:	09 c0       	rjmp	.+18     	; 0xd06 <vfprintf+0x300>
 cf4:	a2 fe       	sbrs	r10, 2
 cf6:	06 c0       	rjmp	.+12     	; 0xd04 <vfprintf+0x2fe>
 cf8:	b3 94       	inc	r11
 cfa:	b3 94       	inc	r11
 cfc:	04 c0       	rjmp	.+8      	; 0xd06 <vfprintf+0x300>
 cfe:	8a 2d       	mov	r24, r10
 d00:	86 78       	andi	r24, 0x86	; 134
 d02:	09 f0       	breq	.+2      	; 0xd06 <vfprintf+0x300>
 d04:	b3 94       	inc	r11
 d06:	a3 fc       	sbrc	r10, 3
 d08:	11 c0       	rjmp	.+34     	; 0xd2c <vfprintf+0x326>
 d0a:	a0 fe       	sbrs	r10, 0
 d0c:	06 c0       	rjmp	.+12     	; 0xd1a <vfprintf+0x314>
 d0e:	b2 14       	cp	r11, r2
 d10:	88 f4       	brcc	.+34     	; 0xd34 <vfprintf+0x32e>
 d12:	28 0c       	add	r2, r8
 d14:	92 2c       	mov	r9, r2
 d16:	9b 18       	sub	r9, r11
 d18:	0e c0       	rjmp	.+28     	; 0xd36 <vfprintf+0x330>
 d1a:	b2 14       	cp	r11, r2
 d1c:	60 f4       	brcc	.+24     	; 0xd36 <vfprintf+0x330>
 d1e:	b6 01       	movw	r22, r12
 d20:	80 e2       	ldi	r24, 0x20	; 32
 d22:	90 e0       	ldi	r25, 0x00	; 0
 d24:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 d28:	b3 94       	inc	r11
 d2a:	f7 cf       	rjmp	.-18     	; 0xd1a <vfprintf+0x314>
 d2c:	b2 14       	cp	r11, r2
 d2e:	18 f4       	brcc	.+6      	; 0xd36 <vfprintf+0x330>
 d30:	2b 18       	sub	r2, r11
 d32:	02 c0       	rjmp	.+4      	; 0xd38 <vfprintf+0x332>
 d34:	98 2c       	mov	r9, r8
 d36:	21 2c       	mov	r2, r1
 d38:	a4 fe       	sbrs	r10, 4
 d3a:	10 c0       	rjmp	.+32     	; 0xd5c <vfprintf+0x356>
 d3c:	b6 01       	movw	r22, r12
 d3e:	80 e3       	ldi	r24, 0x30	; 48
 d40:	90 e0       	ldi	r25, 0x00	; 0
 d42:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 d46:	a2 fe       	sbrs	r10, 2
 d48:	17 c0       	rjmp	.+46     	; 0xd78 <vfprintf+0x372>
 d4a:	a1 fc       	sbrc	r10, 1
 d4c:	03 c0       	rjmp	.+6      	; 0xd54 <vfprintf+0x34e>
 d4e:	88 e7       	ldi	r24, 0x78	; 120
 d50:	90 e0       	ldi	r25, 0x00	; 0
 d52:	02 c0       	rjmp	.+4      	; 0xd58 <vfprintf+0x352>
 d54:	88 e5       	ldi	r24, 0x58	; 88
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	b6 01       	movw	r22, r12
 d5a:	0c c0       	rjmp	.+24     	; 0xd74 <vfprintf+0x36e>
 d5c:	8a 2d       	mov	r24, r10
 d5e:	86 78       	andi	r24, 0x86	; 134
 d60:	59 f0       	breq	.+22     	; 0xd78 <vfprintf+0x372>
 d62:	a1 fe       	sbrs	r10, 1
 d64:	02 c0       	rjmp	.+4      	; 0xd6a <vfprintf+0x364>
 d66:	8b e2       	ldi	r24, 0x2B	; 43
 d68:	01 c0       	rjmp	.+2      	; 0xd6c <vfprintf+0x366>
 d6a:	80 e2       	ldi	r24, 0x20	; 32
 d6c:	a7 fc       	sbrc	r10, 7
 d6e:	8d e2       	ldi	r24, 0x2D	; 45
 d70:	b6 01       	movw	r22, r12
 d72:	90 e0       	ldi	r25, 0x00	; 0
 d74:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 d78:	89 14       	cp	r8, r9
 d7a:	38 f4       	brcc	.+14     	; 0xd8a <vfprintf+0x384>
 d7c:	b6 01       	movw	r22, r12
 d7e:	80 e3       	ldi	r24, 0x30	; 48
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 d86:	9a 94       	dec	r9
 d88:	f7 cf       	rjmp	.-18     	; 0xd78 <vfprintf+0x372>
 d8a:	8a 94       	dec	r8
 d8c:	f3 01       	movw	r30, r6
 d8e:	e8 0d       	add	r30, r8
 d90:	f1 1d       	adc	r31, r1
 d92:	80 81       	ld	r24, Z
 d94:	b6 01       	movw	r22, r12
 d96:	90 e0       	ldi	r25, 0x00	; 0
 d98:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 d9c:	81 10       	cpse	r8, r1
 d9e:	f5 cf       	rjmp	.-22     	; 0xd8a <vfprintf+0x384>
 da0:	22 20       	and	r2, r2
 da2:	09 f4       	brne	.+2      	; 0xda6 <vfprintf+0x3a0>
 da4:	42 ce       	rjmp	.-892    	; 0xa2a <vfprintf+0x24>
 da6:	b6 01       	movw	r22, r12
 da8:	80 e2       	ldi	r24, 0x20	; 32
 daa:	90 e0       	ldi	r25, 0x00	; 0
 dac:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fputc>
 db0:	2a 94       	dec	r2
 db2:	f6 cf       	rjmp	.-20     	; 0xda0 <vfprintf+0x39a>
 db4:	f6 01       	movw	r30, r12
 db6:	86 81       	ldd	r24, Z+6	; 0x06
 db8:	97 81       	ldd	r25, Z+7	; 0x07
 dba:	02 c0       	rjmp	.+4      	; 0xdc0 <vfprintf+0x3ba>
 dbc:	8f ef       	ldi	r24, 0xFF	; 255
 dbe:	9f ef       	ldi	r25, 0xFF	; 255
 dc0:	2b 96       	adiw	r28, 0x0b	; 11
 dc2:	e2 e1       	ldi	r30, 0x12	; 18
 dc4:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__epilogue_restores__>

00000dc8 <strnlen_P>:
 dc8:	fc 01       	movw	r30, r24
 dca:	05 90       	lpm	r0, Z+
 dcc:	61 50       	subi	r22, 0x01	; 1
 dce:	70 40       	sbci	r23, 0x00	; 0
 dd0:	01 10       	cpse	r0, r1
 dd2:	d8 f7       	brcc	.-10     	; 0xdca <strnlen_P+0x2>
 dd4:	80 95       	com	r24
 dd6:	90 95       	com	r25
 dd8:	8e 0f       	add	r24, r30
 dda:	9f 1f       	adc	r25, r31
 ddc:	08 95       	ret

00000dde <strnlen>:
 dde:	fc 01       	movw	r30, r24
 de0:	61 50       	subi	r22, 0x01	; 1
 de2:	70 40       	sbci	r23, 0x00	; 0
 de4:	01 90       	ld	r0, Z+
 de6:	01 10       	cpse	r0, r1
 de8:	d8 f7       	brcc	.-10     	; 0xde0 <strnlen+0x2>
 dea:	80 95       	com	r24
 dec:	90 95       	com	r25
 dee:	8e 0f       	add	r24, r30
 df0:	9f 1f       	adc	r25, r31
 df2:	08 95       	ret

00000df4 <fputc>:
 df4:	0f 93       	push	r16
 df6:	1f 93       	push	r17
 df8:	cf 93       	push	r28
 dfa:	df 93       	push	r29
 dfc:	fb 01       	movw	r30, r22
 dfe:	23 81       	ldd	r18, Z+3	; 0x03
 e00:	21 fd       	sbrc	r18, 1
 e02:	03 c0       	rjmp	.+6      	; 0xe0a <fputc+0x16>
 e04:	8f ef       	ldi	r24, 0xFF	; 255
 e06:	9f ef       	ldi	r25, 0xFF	; 255
 e08:	2c c0       	rjmp	.+88     	; 0xe62 <fputc+0x6e>
 e0a:	22 ff       	sbrs	r18, 2
 e0c:	16 c0       	rjmp	.+44     	; 0xe3a <fputc+0x46>
 e0e:	46 81       	ldd	r20, Z+6	; 0x06
 e10:	57 81       	ldd	r21, Z+7	; 0x07
 e12:	24 81       	ldd	r18, Z+4	; 0x04
 e14:	35 81       	ldd	r19, Z+5	; 0x05
 e16:	42 17       	cp	r20, r18
 e18:	53 07       	cpc	r21, r19
 e1a:	44 f4       	brge	.+16     	; 0xe2c <fputc+0x38>
 e1c:	a0 81       	ld	r26, Z
 e1e:	b1 81       	ldd	r27, Z+1	; 0x01
 e20:	9d 01       	movw	r18, r26
 e22:	2f 5f       	subi	r18, 0xFF	; 255
 e24:	3f 4f       	sbci	r19, 0xFF	; 255
 e26:	31 83       	std	Z+1, r19	; 0x01
 e28:	20 83       	st	Z, r18
 e2a:	8c 93       	st	X, r24
 e2c:	26 81       	ldd	r18, Z+6	; 0x06
 e2e:	37 81       	ldd	r19, Z+7	; 0x07
 e30:	2f 5f       	subi	r18, 0xFF	; 255
 e32:	3f 4f       	sbci	r19, 0xFF	; 255
 e34:	37 83       	std	Z+7, r19	; 0x07
 e36:	26 83       	std	Z+6, r18	; 0x06
 e38:	14 c0       	rjmp	.+40     	; 0xe62 <fputc+0x6e>
 e3a:	8b 01       	movw	r16, r22
 e3c:	ec 01       	movw	r28, r24
 e3e:	fb 01       	movw	r30, r22
 e40:	00 84       	ldd	r0, Z+8	; 0x08
 e42:	f1 85       	ldd	r31, Z+9	; 0x09
 e44:	e0 2d       	mov	r30, r0
 e46:	09 95       	icall
 e48:	89 2b       	or	r24, r25
 e4a:	e1 f6       	brne	.-72     	; 0xe04 <fputc+0x10>
 e4c:	d8 01       	movw	r26, r16
 e4e:	16 96       	adiw	r26, 0x06	; 6
 e50:	8d 91       	ld	r24, X+
 e52:	9c 91       	ld	r25, X
 e54:	17 97       	sbiw	r26, 0x07	; 7
 e56:	01 96       	adiw	r24, 0x01	; 1
 e58:	17 96       	adiw	r26, 0x07	; 7
 e5a:	9c 93       	st	X, r25
 e5c:	8e 93       	st	-X, r24
 e5e:	16 97       	sbiw	r26, 0x06	; 6
 e60:	ce 01       	movw	r24, r28
 e62:	df 91       	pop	r29
 e64:	cf 91       	pop	r28
 e66:	1f 91       	pop	r17
 e68:	0f 91       	pop	r16
 e6a:	08 95       	ret

00000e6c <__ultoa_invert>:
 e6c:	fa 01       	movw	r30, r20
 e6e:	aa 27       	eor	r26, r26
 e70:	28 30       	cpi	r18, 0x08	; 8
 e72:	51 f1       	breq	.+84     	; 0xec8 <__ultoa_invert+0x5c>
 e74:	20 31       	cpi	r18, 0x10	; 16
 e76:	81 f1       	breq	.+96     	; 0xed8 <__ultoa_invert+0x6c>
 e78:	e8 94       	clt
 e7a:	6f 93       	push	r22
 e7c:	6e 7f       	andi	r22, 0xFE	; 254
 e7e:	6e 5f       	subi	r22, 0xFE	; 254
 e80:	7f 4f       	sbci	r23, 0xFF	; 255
 e82:	8f 4f       	sbci	r24, 0xFF	; 255
 e84:	9f 4f       	sbci	r25, 0xFF	; 255
 e86:	af 4f       	sbci	r26, 0xFF	; 255
 e88:	b1 e0       	ldi	r27, 0x01	; 1
 e8a:	3e d0       	rcall	.+124    	; 0xf08 <__ultoa_invert+0x9c>
 e8c:	b4 e0       	ldi	r27, 0x04	; 4
 e8e:	3c d0       	rcall	.+120    	; 0xf08 <__ultoa_invert+0x9c>
 e90:	67 0f       	add	r22, r23
 e92:	78 1f       	adc	r23, r24
 e94:	89 1f       	adc	r24, r25
 e96:	9a 1f       	adc	r25, r26
 e98:	a1 1d       	adc	r26, r1
 e9a:	68 0f       	add	r22, r24
 e9c:	79 1f       	adc	r23, r25
 e9e:	8a 1f       	adc	r24, r26
 ea0:	91 1d       	adc	r25, r1
 ea2:	a1 1d       	adc	r26, r1
 ea4:	6a 0f       	add	r22, r26
 ea6:	71 1d       	adc	r23, r1
 ea8:	81 1d       	adc	r24, r1
 eaa:	91 1d       	adc	r25, r1
 eac:	a1 1d       	adc	r26, r1
 eae:	20 d0       	rcall	.+64     	; 0xef0 <__ultoa_invert+0x84>
 eb0:	09 f4       	brne	.+2      	; 0xeb4 <__ultoa_invert+0x48>
 eb2:	68 94       	set
 eb4:	3f 91       	pop	r19
 eb6:	2a e0       	ldi	r18, 0x0A	; 10
 eb8:	26 9f       	mul	r18, r22
 eba:	11 24       	eor	r1, r1
 ebc:	30 19       	sub	r19, r0
 ebe:	30 5d       	subi	r19, 0xD0	; 208
 ec0:	31 93       	st	Z+, r19
 ec2:	de f6       	brtc	.-74     	; 0xe7a <__ultoa_invert+0xe>
 ec4:	cf 01       	movw	r24, r30
 ec6:	08 95       	ret
 ec8:	46 2f       	mov	r20, r22
 eca:	47 70       	andi	r20, 0x07	; 7
 ecc:	40 5d       	subi	r20, 0xD0	; 208
 ece:	41 93       	st	Z+, r20
 ed0:	b3 e0       	ldi	r27, 0x03	; 3
 ed2:	0f d0       	rcall	.+30     	; 0xef2 <__ultoa_invert+0x86>
 ed4:	c9 f7       	brne	.-14     	; 0xec8 <__ultoa_invert+0x5c>
 ed6:	f6 cf       	rjmp	.-20     	; 0xec4 <__ultoa_invert+0x58>
 ed8:	46 2f       	mov	r20, r22
 eda:	4f 70       	andi	r20, 0x0F	; 15
 edc:	40 5d       	subi	r20, 0xD0	; 208
 ede:	4a 33       	cpi	r20, 0x3A	; 58
 ee0:	18 f0       	brcs	.+6      	; 0xee8 <__ultoa_invert+0x7c>
 ee2:	49 5d       	subi	r20, 0xD9	; 217
 ee4:	31 fd       	sbrc	r19, 1
 ee6:	40 52       	subi	r20, 0x20	; 32
 ee8:	41 93       	st	Z+, r20
 eea:	02 d0       	rcall	.+4      	; 0xef0 <__ultoa_invert+0x84>
 eec:	a9 f7       	brne	.-22     	; 0xed8 <__ultoa_invert+0x6c>
 eee:	ea cf       	rjmp	.-44     	; 0xec4 <__ultoa_invert+0x58>
 ef0:	b4 e0       	ldi	r27, 0x04	; 4
 ef2:	a6 95       	lsr	r26
 ef4:	97 95       	ror	r25
 ef6:	87 95       	ror	r24
 ef8:	77 95       	ror	r23
 efa:	67 95       	ror	r22
 efc:	ba 95       	dec	r27
 efe:	c9 f7       	brne	.-14     	; 0xef2 <__ultoa_invert+0x86>
 f00:	00 97       	sbiw	r24, 0x00	; 0
 f02:	61 05       	cpc	r22, r1
 f04:	71 05       	cpc	r23, r1
 f06:	08 95       	ret
 f08:	9b 01       	movw	r18, r22
 f0a:	ac 01       	movw	r20, r24
 f0c:	0a 2e       	mov	r0, r26
 f0e:	06 94       	lsr	r0
 f10:	57 95       	ror	r21
 f12:	47 95       	ror	r20
 f14:	37 95       	ror	r19
 f16:	27 95       	ror	r18
 f18:	ba 95       	dec	r27
 f1a:	c9 f7       	brne	.-14     	; 0xf0e <__ultoa_invert+0xa2>
 f1c:	62 0f       	add	r22, r18
 f1e:	73 1f       	adc	r23, r19
 f20:	84 1f       	adc	r24, r20
 f22:	95 1f       	adc	r25, r21
 f24:	a0 1d       	adc	r26, r0
 f26:	08 95       	ret

00000f28 <__prologue_saves__>:
 f28:	2f 92       	push	r2
 f2a:	3f 92       	push	r3
 f2c:	4f 92       	push	r4
 f2e:	5f 92       	push	r5
 f30:	6f 92       	push	r6
 f32:	7f 92       	push	r7
 f34:	8f 92       	push	r8
 f36:	9f 92       	push	r9
 f38:	af 92       	push	r10
 f3a:	bf 92       	push	r11
 f3c:	cf 92       	push	r12
 f3e:	df 92       	push	r13
 f40:	ef 92       	push	r14
 f42:	ff 92       	push	r15
 f44:	0f 93       	push	r16
 f46:	1f 93       	push	r17
 f48:	cf 93       	push	r28
 f4a:	df 93       	push	r29
 f4c:	cd b7       	in	r28, 0x3d	; 61
 f4e:	de b7       	in	r29, 0x3e	; 62
 f50:	ca 1b       	sub	r28, r26
 f52:	db 0b       	sbc	r29, r27
 f54:	0f b6       	in	r0, 0x3f	; 63
 f56:	f8 94       	cli
 f58:	de bf       	out	0x3e, r29	; 62
 f5a:	0f be       	out	0x3f, r0	; 63
 f5c:	cd bf       	out	0x3d, r28	; 61
 f5e:	09 94       	ijmp

00000f60 <__epilogue_restores__>:
 f60:	2a 88       	ldd	r2, Y+18	; 0x12
 f62:	39 88       	ldd	r3, Y+17	; 0x11
 f64:	48 88       	ldd	r4, Y+16	; 0x10
 f66:	5f 84       	ldd	r5, Y+15	; 0x0f
 f68:	6e 84       	ldd	r6, Y+14	; 0x0e
 f6a:	7d 84       	ldd	r7, Y+13	; 0x0d
 f6c:	8c 84       	ldd	r8, Y+12	; 0x0c
 f6e:	9b 84       	ldd	r9, Y+11	; 0x0b
 f70:	aa 84       	ldd	r10, Y+10	; 0x0a
 f72:	b9 84       	ldd	r11, Y+9	; 0x09
 f74:	c8 84       	ldd	r12, Y+8	; 0x08
 f76:	df 80       	ldd	r13, Y+7	; 0x07
 f78:	ee 80       	ldd	r14, Y+6	; 0x06
 f7a:	fd 80       	ldd	r15, Y+5	; 0x05
 f7c:	0c 81       	ldd	r16, Y+4	; 0x04
 f7e:	1b 81       	ldd	r17, Y+3	; 0x03
 f80:	aa 81       	ldd	r26, Y+2	; 0x02
 f82:	b9 81       	ldd	r27, Y+1	; 0x01
 f84:	ce 0f       	add	r28, r30
 f86:	d1 1d       	adc	r29, r1
 f88:	0f b6       	in	r0, 0x3f	; 63
 f8a:	f8 94       	cli
 f8c:	de bf       	out	0x3e, r29	; 62
 f8e:	0f be       	out	0x3f, r0	; 63
 f90:	cd bf       	out	0x3d, r28	; 61
 f92:	ed 01       	movw	r28, r26
 f94:	08 95       	ret

00000f96 <_exit>:
 f96:	f8 94       	cli

00000f98 <__stop_program>:
 f98:	ff cf       	rjmp	.-2      	; 0xf98 <__stop_program>
