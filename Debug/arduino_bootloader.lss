
arduino_bootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002cc  00800100  000010fe  00001192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  008003cc  008003cc  0000145e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000145e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033fc  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c52  00000000  00000000  00004a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001289  00000000  00000000  0000568e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  00006918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065a  00000000  00000000  00006c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015c5  00000000  00000000  0000728e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00008853  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ef       	ldi	r30, 0xFE	; 254
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 3c       	cpi	r26, 0xCC	; 204
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	ac ec       	ldi	r26, 0xCC	; 204
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 3d       	cpi	r26, 0xDC	; 220
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <main>
      9e:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <fps_transmit_header>:
#include "fps.h"

void fps_transmit_header(){
	//starting code
	putByte(0xEF);
      a6:	8f ee       	ldi	r24, 0xEF	; 239
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0x01);
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//address
	putByte(0xFF);
      b6:	8f ef       	ldi	r24, 0xFF	; 255
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0xFF);
      be:	8f ef       	ldi	r24, 0xFF	; 255
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0xFF);
      c6:	8f ef       	ldi	r24, 0xFF	; 255
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0xFF);
      ce:	8f ef       	ldi	r24, 0xFF	; 255
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//package identifier
	putByte(0x01);
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
      de:	08 95       	ret

000000e0 <fps_confirmation>:
}

void fps_confirmation(uint8_t instruction_code){
      e0:	1f 93       	push	r17
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	18 2f       	mov	r17, r24
      e8:	c9 e0       	ldi	r28, 0x09	; 9
      ea:	d0 e0       	ldi	r29, 0x00	; 0

	for(int i = 0; i<9; ++i){
		getByte();
      ec:	0e 94 1e 08 	call	0x103c	; 0x103c <getByte>
      f0:	21 97       	sbiw	r28, 0x01	; 1
	putByte(0x01);
}

void fps_confirmation(uint8_t instruction_code){

	for(int i = 0; i<9; ++i){
      f2:	e1 f7       	brne	.-8      	; 0xec <fps_confirmation+0xc>
		getByte();
	}
	//confirmation code
	tmp[0] = getByte();
      f4:	0e 94 1e 08 	call	0x103c	; 0x103c <getByte>
      f8:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <tmp>
	if(instruction_code == 0x1D){
      fc:	1d 31       	cpi	r17, 0x1D	; 29
      fe:	49 f4       	brne	.+18     	; 0x112 <fps_confirmation+0x32>
		tmp[1] = getByte();
     100:	0e 94 1e 08 	call	0x103c	; 0x103c <getByte>
     104:	c2 ed       	ldi	r28, 0xD2	; 210
     106:	d3 e0       	ldi	r29, 0x03	; 3
     108:	89 83       	std	Y+1, r24	; 0x01
		tmp[2] = getByte();
     10a:	0e 94 1e 08 	call	0x103c	; 0x103c <getByte>
     10e:	8a 83       	std	Y+2, r24	; 0x02
     110:	10 c0       	rjmp	.+32     	; 0x132 <fps_confirmation+0x52>
	}
	if(instruction_code == 0x04){
     112:	14 30       	cpi	r17, 0x04	; 4
     114:	71 f4       	brne	.+28     	; 0x132 <fps_confirmation+0x52>
		//page_ID
		tmp[1] = getByte();
     116:	0e 94 1e 08 	call	0x103c	; 0x103c <getByte>
     11a:	c2 ed       	ldi	r28, 0xD2	; 210
     11c:	d3 e0       	ldi	r29, 0x03	; 3
     11e:	89 83       	std	Y+1, r24	; 0x01
		tmp[2] = getByte();
     120:	0e 94 1e 08 	call	0x103c	; 0x103c <getByte>
     124:	8a 83       	std	Y+2, r24	; 0x02
		//MatchScore
		tmp[3] = getByte();
     126:	0e 94 1e 08 	call	0x103c	; 0x103c <getByte>
     12a:	8b 83       	std	Y+3, r24	; 0x03
		tmp[4] = getByte();
     12c:	0e 94 1e 08 	call	0x103c	; 0x103c <getByte>
     130:	8c 83       	std	Y+4, r24	; 0x04
	}
	//checksum
	getByte();
     132:	0e 94 1e 08 	call	0x103c	; 0x103c <getByte>
	getByte();
     136:	0e 94 1e 08 	call	0x103c	; 0x103c <getByte>
}
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	1f 91       	pop	r17
     140:	08 95       	ret

00000142 <fps_read_finger>:



void fps_read_finger(){
	//header
	fps_transmit_header();
     142:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	putByte(0x00);
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0x03);
     14e:	83 e0       	ldi	r24, 0x03	; 3
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//instruction code
	putByte(0x01);
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//sum
	putByte(0x00);
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0x05);
     166:	85 e0       	ldi	r24, 0x05	; 5
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	
	fps_confirmation(0x01);
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
     174:	08 95       	ret

00000176 <fps_img2TZ>:
}

void fps_img2TZ(uint8_t buffer){
     176:	cf 93       	push	r28
     178:	c8 2f       	mov	r28, r24
	//header
	fps_transmit_header();
     17a:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	putByte(0x00);
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0x04);
     186:	84 e0       	ldi	r24, 0x04	; 4
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//instruction code
	putByte(0x02);
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//bufferID
	putByte(buffer);
     196:	8c 2f       	mov	r24, r28
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//sum
	buffer+=7;
	putByte(buffer & 0xFF00);
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(buffer & 0x00FF);
     1a6:	87 e0       	ldi	r24, 0x07	; 7
     1a8:	8c 0f       	add	r24, r28
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
		
	fps_confirmation(0x02);
     1b0:	82 e0       	ldi	r24, 0x02	; 2
     1b2:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
}
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <fps_search>:

void fps_search(){
	//header
	fps_transmit_header();
     1ba:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	putByte(0x00);
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0x08);
     1c6:	88 e0       	ldi	r24, 0x08	; 8
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//instruction
	putByte(0x04);
     1ce:	84 e0       	ldi	r24, 0x04	; 4
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//buffer_ID
	putByte(0x01);
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//start location
	putByte(0x00);
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0x01);
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//end location
	putByte(0x00);
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0xFF);
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//sum
	putByte(0x01);
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0x0E);
     206:	8e e0       	ldi	r24, 0x0E	; 14
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>

	fps_confirmation(0x04);
     20e:	84 e0       	ldi	r24, 0x04	; 4
     210:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
     214:	08 95       	ret

00000216 <fps_genModel>:
}

void fps_genModel(){
	//header
	fps_transmit_header();
     216:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	putByte(0x00);
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0x03);
     222:	83 e0       	ldi	r24, 0x03	; 3
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//instruction
	putByte(0x05);
     22a:	85 e0       	ldi	r24, 0x05	; 5
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//sum
	putByte(0x00);
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0x09);
     23a:	89 e0       	ldi	r24, 0x09	; 9
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	
	fps_confirmation(0x05);
     242:	85 e0       	ldi	r24, 0x05	; 5
     244:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
     248:	08 95       	ret

0000024a <fps_storeModel>:
}

void fps_storeModel(uint16_t storeID){
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	ec 01       	movw	r28, r24
	//header
	fps_transmit_header();
     250:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	putByte(0x00);
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0x06);
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//instruction
	putByte(0x06);
     264:	86 e0       	ldi	r24, 0x06	; 6
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//bufferID
	putByte(0x01);
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//location number
	putByte(storeID & 0xFF00);
     274:	ce 01       	movw	r24, r28
     276:	88 27       	eor	r24, r24
     278:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(storeID & 0x00FF);
     27c:	ce 01       	movw	r24, r28
     27e:	99 27       	eor	r25, r25
     280:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//sum
	storeID += 14;
     284:	2e 96       	adiw	r28, 0x0e	; 14
	putByte(storeID & 0xFF00);
     286:	ce 01       	movw	r24, r28
     288:	88 27       	eor	r24, r24
     28a:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(storeID & 0x00FF);
     28e:	ce 01       	movw	r24, r28
     290:	99 27       	eor	r25, r25
     292:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	
	fps_confirmation(0x06);
     296:	86 e0       	ldi	r24, 0x06	; 6
     298:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <fps_deleteModel>:

void fps_deleteModel(uint16_t deleteID){
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	ec 01       	movw	r28, r24
	//header
	fps_transmit_header();
     2a8:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	putByte(0x00);
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0x07);
     2b4:	87 e0       	ldi	r24, 0x07	; 7
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//instruction
	putByte(0x0c);
     2bc:	8c e0       	ldi	r24, 0x0C	; 12
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//pageID
	putByte(deleteID & 0xFF00);
     2c4:	ce 01       	movw	r24, r28
     2c6:	88 27       	eor	r24, r24
     2c8:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(deleteID & 0x00FF);
     2cc:	ce 01       	movw	r24, r28
     2ce:	99 27       	eor	r25, r25
     2d0:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//number of templates to be deleted
	putByte(0x00);
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0x01);
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//sum
	deleteID += 21;
     2e4:	65 96       	adiw	r28, 0x15	; 21
	putByte(deleteID & 0xFF00);
     2e6:	ce 01       	movw	r24, r28
     2e8:	88 27       	eor	r24, r24
     2ea:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(deleteID & 0x00FF);
     2ee:	ce 01       	movw	r24, r28
     2f0:	99 27       	eor	r25, r25
     2f2:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	
	fps_confirmation(0x0c);
     2f6:	8c e0       	ldi	r24, 0x0C	; 12
     2f8:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
}
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <fps_templateNum>:

void fps_templateNum(){
	//header
	fps_transmit_header();
     302:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	putByte(0x00);
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0x03);
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//instruction
	putByte(0x1D);	
     316:	8d e1       	ldi	r24, 0x1D	; 29
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	//sum
	putByte(0x00);
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	putByte(0x21);
     326:	81 e2       	ldi	r24, 0x21	; 33
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 26 08 	call	0x104c	; 0x104c <putByte>
	
	fps_confirmation(0x1D);
     32e:	8d e1       	ldi	r24, 0x1D	; 29
     330:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
     334:	08 95       	ret

00000336 <i2c_init>:
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    while ((TWCR & (1 << TWINT)) == 0);
}

void i2c_stop_condition(){
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     336:	8f ef       	ldi	r24, 0xFF	; 255
     338:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     33c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     340:	08 95       	ret

00000342 <i2c_start_condition>:
     342:	84 ea       	ldi	r24, 0xA4	; 164
     344:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     348:	ec eb       	ldi	r30, 0xBC	; 188
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	88 23       	and	r24, r24
     350:	ec f7       	brge	.-6      	; 0x34c <i2c_start_condition+0xa>
     352:	08 95       	ret

00000354 <i2c_send_byte>:
}

void i2c_send_byte(unsigned char byte){														
	TWDR = byte;
     354:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = (1 << TWINT) | (1 << TWEN);
     358:	84 e8       	ldi	r24, 0x84	; 132
     35a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & (1 << TWINT)) == 0);
     35e:	ec eb       	ldi	r30, 0xBC	; 188
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 81       	ld	r24, Z
     364:	88 23       	and	r24, r24
     366:	ec f7       	brge	.-6      	; 0x362 <i2c_send_byte+0xe>
}
     368:	08 95       	ret

0000036a <i2c_send_packet>:

void i2c_send_packet(unsigned char value, unsigned char address) {
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	c8 2f       	mov	r28, r24
     370:	d6 2f       	mov	r29, r22
	i2c_start_condition();
     372:	0e 94 a1 01 	call	0x342	; 0x342 <i2c_start_condition>
	i2c_send_byte(address);
     376:	8d 2f       	mov	r24, r29
     378:	0e 94 aa 01 	call	0x354	; 0x354 <i2c_send_byte>
	i2c_send_byte(value);
     37c:	8c 2f       	mov	r24, r28
     37e:	0e 94 aa 01 	call	0x354	; 0x354 <i2c_send_byte>
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    while ((TWCR & (1 << TWINT)) == 0);
}

void i2c_stop_condition(){
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     382:	84 e9       	ldi	r24, 0x94	; 148
     384:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
void i2c_send_packet(unsigned char value, unsigned char address) {
	i2c_start_condition();
	i2c_send_byte(address);
	i2c_send_byte(value);
	i2c_stop_condition();
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <lcd_transmit_header>:
#include "lcd.h"
#include <util/delay.h>

uint8_t value;

void lcd_transmit_header(char tmp){
     38e:	cf 93       	push	r28
     390:	c8 2f       	mov	r28, r24
	i2c_send_packet(value |= 0x04, SLA_WRITE_ADDR);
     392:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <value>
     396:	84 60       	ori	r24, 0x04	; 4
     398:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <value>
     39c:	6e e7       	ldi	r22, 0x7E	; 126
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 b5 01 	call	0x36a	; 0x36a <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3a6:	30 e1       	ldi	r19, 0x10	; 16
     3a8:	3a 95       	dec	r19
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <lcd_transmit_header+0x1a>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <lcd_transmit_header+0x20>
	_delay_us(50);
	i2c_send_packet(value | (tmp << 4), SLA_WRITE_ADDR);
     3ae:	20 91 d7 03 	lds	r18, 0x03D7	; 0x8003d7 <value>
     3b2:	30 e1       	ldi	r19, 0x10	; 16
     3b4:	c3 9f       	mul	r28, r19
     3b6:	c0 01       	movw	r24, r0
     3b8:	11 24       	eor	r1, r1
     3ba:	6e e7       	ldi	r22, 0x7E	; 126
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	82 2b       	or	r24, r18
     3c0:	0e 94 b5 01 	call	0x36a	; 0x36a <i2c_send_packet>
	i2c_send_packet(value &= ~0x04, SLA_WRITE_ADDR);
     3c4:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <value>
     3c8:	8b 7f       	andi	r24, 0xFB	; 251
     3ca:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <value>
     3ce:	6e e7       	ldi	r22, 0x7E	; 126
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 b5 01 	call	0x36a	; 0x36a <i2c_send_packet>
     3d8:	80 e1       	ldi	r24, 0x10	; 16
     3da:	8a 95       	dec	r24
     3dc:	f1 f7       	brne	.-4      	; 0x3da <lcd_transmit_header+0x4c>
     3de:	00 c0       	rjmp	.+0      	; 0x3e0 <lcd_transmit_header+0x52>
	_delay_us(50);
}
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <lcd_send_byte>:

void lcd_send_byte(char tmp){
     3e4:	cf 93       	push	r28
     3e6:	c8 2f       	mov	r28, r24
	i2c_send_packet(value &=~ 0x01, SLA_WRITE_ADDR); 
     3e8:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <value>
     3ec:	8e 7f       	andi	r24, 0xFE	; 254
     3ee:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <value>
     3f2:	6e e7       	ldi	r22, 0x7E	; 126
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 b5 01 	call	0x36a	; 0x36a <i2c_send_packet>
	lcd_transmit_header(tmp >> 4);
     3fc:	8c 2f       	mov	r24, r28
     3fe:	82 95       	swap	r24
     400:	8f 70       	andi	r24, 0x0F	; 15
     402:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_transmit_header>
	lcd_transmit_header(tmp);
     406:	8c 2f       	mov	r24, r28
     408:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_transmit_header>
}
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <lcd_send_char>:

void lcd_send_char(char tmp){
     410:	cf 93       	push	r28
     412:	c8 2f       	mov	r28, r24
	i2c_send_packet (value |= 0x01, SLA_WRITE_ADDR);
     414:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <value>
     418:	81 60       	ori	r24, 0x01	; 1
     41a:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <value>
     41e:	6e e7       	ldi	r22, 0x7E	; 126
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 b5 01 	call	0x36a	; 0x36a <i2c_send_packet>
	lcd_transmit_header(tmp >> 4);
     428:	8c 2f       	mov	r24, r28
     42a:	82 95       	swap	r24
     42c:	8f 70       	andi	r24, 0x0F	; 15
     42e:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_transmit_header>
	lcd_transmit_header(tmp);
     432:	8c 2f       	mov	r24, r28
     434:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_transmit_header>
}
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <lcd_init>:

void lcd_init(){
	value = 0;
     43c:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <value>
	i2c_init();
     440:	0e 94 9b 01 	call	0x336	; 0x336 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     444:	85 ea       	ldi	r24, 0xA5	; 165
     446:	9e e0       	ldi	r25, 0x0E	; 14
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <lcd_init+0xc>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <lcd_init+0x12>
     44e:	00 00       	nop
	_delay_ms(15);
	lcd_transmit_header(0b00000011);	//Enter 4bit mode
     450:	83 e0       	ldi	r24, 0x03	; 3
     452:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_transmit_header>
     456:	87 ee       	ldi	r24, 0xE7	; 231
     458:	93 e0       	ldi	r25, 0x03	; 3
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	f1 f7       	brne	.-4      	; 0x45a <lcd_init+0x1e>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <lcd_init+0x24>
     460:	00 00       	nop
	_delay_ms(4);
	lcd_transmit_header(0b00000011);					
     462:	83 e0       	ldi	r24, 0x03	; 3
     464:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_transmit_header>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     468:	91 e2       	ldi	r25, 0x21	; 33
     46a:	9a 95       	dec	r25
     46c:	f1 f7       	brne	.-4      	; 0x46a <lcd_init+0x2e>
     46e:	00 00       	nop
	_delay_us(100);							
	lcd_transmit_header(0b00000011);					
     470:	83 e0       	ldi	r24, 0x03	; 3
     472:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_transmit_header>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     476:	89 ef       	ldi	r24, 0xF9	; 249
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	01 97       	sbiw	r24, 0x01	; 1
     47c:	f1 f7       	brne	.-4      	; 0x47a <lcd_init+0x3e>
     47e:	00 c0       	rjmp	.+0      	; 0x480 <lcd_init+0x44>
     480:	00 00       	nop
	_delay_ms(1);
	lcd_transmit_header(0b00000010);
     482:	82 e0       	ldi	r24, 0x02	; 2
     484:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_transmit_header>
     488:	89 ef       	ldi	r24, 0xF9	; 249
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <lcd_init+0x50>
     490:	00 c0       	rjmp	.+0      	; 0x492 <lcd_init+0x56>
     492:	00 00       	nop
	_delay_ms(1);			
	lcd_send_byte(0x28);			//Select 16x2 LCD in 4Bit mode
     494:	88 e2       	ldi	r24, 0x28	; 40
     496:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_send_byte>
     49a:	89 ef       	ldi	r24, 0xF9	; 249
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	01 97       	sbiw	r24, 0x01	; 1
     4a0:	f1 f7       	brne	.-4      	; 0x49e <lcd_init+0x62>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <lcd_init+0x68>
     4a4:	00 00       	nop
	_delay_ms(1);	
	lcd_send_byte(0x0C);			//Display ON Cursor off
     4a6:	8c e0       	ldi	r24, 0x0C	; 12
     4a8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_send_byte>
     4ac:	89 ef       	ldi	r24, 0xF9	; 249
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	01 97       	sbiw	r24, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <lcd_init+0x74>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <lcd_init+0x7a>
     4b6:	00 00       	nop
	_delay_ms(1);
	lcd_send_byte(0x06);			//Cursor auto increment
     4b8:	86 e0       	ldi	r24, 0x06	; 6
     4ba:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_send_byte>
     4be:	89 ef       	ldi	r24, 0xF9	; 249
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <lcd_init+0x86>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <lcd_init+0x8c>
     4c8:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(value |= 0x08, SLA_WRITE_ADDR);	
     4ca:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <value>
     4ce:	88 60       	ori	r24, 0x08	; 8
     4d0:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <value>
     4d4:	6e e7       	ldi	r22, 0x7E	; 126
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 b5 01 	call	0x36a	; 0x36a <i2c_send_packet>
	i2c_send_packet(value &=~ 0x02, SLA_WRITE_ADDR);
     4de:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <value>
     4e2:	8d 7f       	andi	r24, 0xFD	; 253
     4e4:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <value>
     4e8:	6e e7       	ldi	r22, 0x7E	; 126
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 b5 01 	call	0x36a	; 0x36a <i2c_send_packet>
     4f2:	08 95       	ret

000004f4 <lcd_clear>:
}

void lcd_clear(){
	lcd_send_byte(0x01);
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fa:	86 e7       	ldi	r24, 0x76	; 118
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	f1 f7       	brne	.-4      	; 0x4fe <lcd_clear+0xa>
     502:	00 c0       	rjmp	.+0      	; 0x504 <lcd_clear+0x10>
     504:	00 00       	nop
     506:	08 95       	ret

00000508 <lcd_setCursor>:
	_delay_us(1500);
}

void lcd_setCursor(char col, char row){
	char adr;
	adr = 0x40 * row + col;
     508:	90 e4       	ldi	r25, 0x40	; 64
     50a:	69 9f       	mul	r22, r25
     50c:	80 0d       	add	r24, r0
     50e:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd_send_byte(adr);
     510:	80 68       	ori	r24, 0x80	; 128
     512:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_send_byte>
     516:	08 95       	ret

00000518 <lcd_send_string>:
}

void lcd_send_string(const char *str){
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
	while(*str != 0)
     51e:	88 81       	ld	r24, Y
     520:	88 23       	and	r24, r24
     522:	31 f0       	breq	.+12     	; 0x530 <lcd_send_string+0x18>
     524:	21 96       	adiw	r28, 0x01	; 1
	lcd_send_char(*str++);
     526:	0e 94 08 02 	call	0x410	; 0x410 <lcd_send_char>
	adr |= 0x80;
	lcd_send_byte(adr);
}

void lcd_send_string(const char *str){
	while(*str != 0)
     52a:	89 91       	ld	r24, Y+
     52c:	81 11       	cpse	r24, r1
     52e:	fb cf       	rjmp	.-10     	; 0x526 <lcd_send_string+0xe>
	lcd_send_char(*str++);
}
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <lcd_send_info>:

void lcd_send_info(const char *line1, const char *line2){
     536:	0f 93       	push	r16
     538:	1f 93       	push	r17
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	8c 01       	movw	r16, r24
     540:	eb 01       	movw	r28, r22
	lcd_clear();
     542:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <lcd_clear>

void lcd_setCursor(char col, char row){
	char adr;
	adr = 0x40 * row + col;
	adr |= 0x80;
	lcd_send_byte(adr);
     546:	80 e8       	ldi	r24, 0x80	; 128
     548:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_send_byte>
}

void lcd_send_info(const char *line1, const char *line2){
	lcd_clear();
	lcd_setCursor(0,0);
	lcd_send_string(line1);
     54c:	c8 01       	movw	r24, r16
     54e:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>

void lcd_setCursor(char col, char row){
	char adr;
	adr = 0x40 * row + col;
	adr |= 0x80;
	lcd_send_byte(adr);
     552:	80 ec       	ldi	r24, 0xC0	; 192
     554:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_send_byte>
void lcd_send_info(const char *line1, const char *line2){
	lcd_clear();
	lcd_setCursor(0,0);
	lcd_send_string(line1);
	lcd_setCursor(0,1);
	lcd_send_string(line2);
     558:	ce 01       	movw	r24, r28
     55a:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	08 95       	ret

00000568 <newFinger>:
		}
	}
	return 0;
}//Koniec main.c

void newFinger(uint8_t id){
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	d8 2f       	mov	r29, r24
	lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
     572:	63 e0       	ldi	r22, 0x03	; 3
     574:	71 e0       	ldi	r23, 0x01	; 1
     576:	84 e1       	ldi	r24, 0x14	; 20
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
	fps_read_finger();
     57e:	0e 94 a1 00 	call	0x142	; 0x142 <fps_read_finger>
	uint8_t timer = 0;
     582:	c0 e0       	ldi	r28, 0x00	; 0
	while(tmp[0] == 0x02){
     584:	02 ed       	ldi	r16, 0xD2	; 210
     586:	13 e0       	ldi	r17, 0x03	; 3
     588:	4a c0       	rjmp	.+148    	; 0x61e <newFinger+0xb6>
		fps_read_finger();
     58a:	0e 94 a1 00 	call	0x142	; 0x142 <fps_read_finger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     58e:	2f ef       	ldi	r18, 0xFF	; 255
     590:	81 ee       	ldi	r24, 0xE1	; 225
     592:	94 e0       	ldi	r25, 0x04	; 4
     594:	21 50       	subi	r18, 0x01	; 1
     596:	80 40       	sbci	r24, 0x00	; 0
     598:	90 40       	sbci	r25, 0x00	; 0
     59a:	e1 f7       	brne	.-8      	; 0x594 <newFinger+0x2c>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <newFinger+0x36>
     59e:	00 00       	nop
		_delay_ms(100);
		timer += 1;
     5a0:	cf 5f       	subi	r28, 0xFF	; 255
		if(timer == 10){
     5a2:	ca 30       	cpi	r28, 0x0A	; 10
     5a4:	39 f4       	brne	.+14     	; 0x5b4 <newFinger+0x4c>
			lcd_send_info("  Umiesc palec  ", "Skanowanie: ----");
     5a6:	65 e2       	ldi	r22, 0x25	; 37
     5a8:	71 e0       	ldi	r23, 0x01	; 1
     5aa:	84 e1       	ldi	r24, 0x14	; 20
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     5b2:	12 c0       	rjmp	.+36     	; 0x5d8 <newFinger+0x70>
		}
		if(timer == 20){
     5b4:	c4 31       	cpi	r28, 0x14	; 20
     5b6:	39 f4       	brne	.+14     	; 0x5c6 <newFinger+0x5e>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:  ---");
     5b8:	66 e3       	ldi	r22, 0x36	; 54
     5ba:	71 e0       	ldi	r23, 0x01	; 1
     5bc:	84 e1       	ldi	r24, 0x14	; 20
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     5c4:	12 c0       	rjmp	.+36     	; 0x5ea <newFinger+0x82>
		}
		if(timer == 30){
     5c6:	ce 31       	cpi	r28, 0x1E	; 30
     5c8:	39 f4       	brne	.+14     	; 0x5d8 <newFinger+0x70>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:   --");
     5ca:	67 e4       	ldi	r22, 0x47	; 71
     5cc:	71 e0       	ldi	r23, 0x01	; 1
     5ce:	84 e1       	ldi	r24, 0x14	; 20
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     5d6:	23 c0       	rjmp	.+70     	; 0x61e <newFinger+0xb6>
		}
		if(timer == 40){
     5d8:	c8 32       	cpi	r28, 0x28	; 40
     5da:	39 f4       	brne	.+14     	; 0x5ea <newFinger+0x82>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:    -");
     5dc:	68 e5       	ldi	r22, 0x58	; 88
     5de:	71 e0       	ldi	r23, 0x01	; 1
     5e0:	84 e1       	ldi	r24, 0x14	; 20
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     5e8:	1a c0       	rjmp	.+52     	; 0x61e <newFinger+0xb6>
		}
		if(timer == 49){
     5ea:	c1 33       	cpi	r28, 0x31	; 49
     5ec:	c1 f4       	brne	.+48     	; 0x61e <newFinger+0xb6>
			lcd_send_info("  Brak palca na ", " czytniku linii ");
     5ee:	69 e6       	ldi	r22, 0x69	; 105
     5f0:	71 e0       	ldi	r23, 0x01	; 1
     5f2:	8a e7       	ldi	r24, 0x7A	; 122
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     5fa:	ef ef       	ldi	r30, 0xFF	; 255
     5fc:	fd e3       	ldi	r31, 0x3D	; 61
     5fe:	29 e4       	ldi	r18, 0x49	; 73
     600:	e1 50       	subi	r30, 0x01	; 1
     602:	f0 40       	sbci	r31, 0x00	; 0
     604:	20 40       	sbci	r18, 0x00	; 0
     606:	e1 f7       	brne	.-8      	; 0x600 <newFinger+0x98>
     608:	00 c0       	rjmp	.+0      	; 0x60a <newFinger+0xa2>
     60a:	00 00       	nop
			_delay_ms(1500);
			enrollFinger = false;
     60c:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <enrollFinger>
			lcd_send_info("Drzwi zamkniete", "");
     610:	60 e1       	ldi	r22, 0x10	; 16
     612:	73 e0       	ldi	r23, 0x03	; 3
     614:	8b e8       	ldi	r24, 0x8B	; 139
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
			break;
     61c:	05 c0       	rjmp	.+10     	; 0x628 <newFinger+0xc0>

void newFinger(uint8_t id){
	lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
	fps_read_finger();
	uint8_t timer = 0;
	while(tmp[0] == 0x02){
     61e:	f8 01       	movw	r30, r16
     620:	80 81       	ld	r24, Z
     622:	82 30       	cpi	r24, 0x02	; 2
     624:	09 f4       	brne	.+2      	; 0x628 <newFinger+0xc0>
     626:	b1 cf       	rjmp	.-158    	; 0x58a <newFinger+0x22>
			enrollFinger = false;
			lcd_send_info("Drzwi zamkniete", "");
			break;
		}
	}
	if(tmp[0] == 0x00){
     628:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     62c:	81 11       	cpse	r24, r1
     62e:	fe c0       	rjmp	.+508    	; 0x82c <newFinger+0x2c4>
		fps_img2TZ(1);
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	0e 94 bb 00 	call	0x176	; 0x176 <fps_img2TZ>
     636:	ff ef       	ldi	r31, 0xFF	; 255
     638:	21 ee       	ldi	r18, 0xE1	; 225
     63a:	84 e0       	ldi	r24, 0x04	; 4
     63c:	f1 50       	subi	r31, 0x01	; 1
     63e:	20 40       	sbci	r18, 0x00	; 0
     640:	80 40       	sbci	r24, 0x00	; 0
     642:	e1 f7       	brne	.-8      	; 0x63c <newFinger+0xd4>
     644:	00 c0       	rjmp	.+0      	; 0x646 <newFinger+0xde>
     646:	00 00       	nop
		_delay_ms(100);
		if(tmp[0] == 0x00){
     648:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     64c:	81 11       	cpse	r24, r1
     64e:	de c0       	rjmp	.+444    	; 0x80c <newFinger+0x2a4>
			lcd_send_info("   Raz jeszcze  ", "  umiesc palec  ");
     650:	6b e9       	ldi	r22, 0x9B	; 155
     652:	71 e0       	ldi	r23, 0x01	; 1
     654:	8c ea       	ldi	r24, 0xAC	; 172
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     65c:	9f ef       	ldi	r25, 0xFF	; 255
     65e:	ed e3       	ldi	r30, 0x3D	; 61
     660:	f9 e4       	ldi	r31, 0x49	; 73
     662:	91 50       	subi	r25, 0x01	; 1
     664:	e0 40       	sbci	r30, 0x00	; 0
     666:	f0 40       	sbci	r31, 0x00	; 0
     668:	e1 f7       	brne	.-8      	; 0x662 <newFinger+0xfa>
     66a:	00 c0       	rjmp	.+0      	; 0x66c <newFinger+0x104>
     66c:	00 00       	nop
			_delay_ms(1500);
				lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
     66e:	63 e0       	ldi	r22, 0x03	; 3
     670:	71 e0       	ldi	r23, 0x01	; 1
     672:	84 e1       	ldi	r24, 0x14	; 20
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
				fps_read_finger();
     67a:	0e 94 a1 00 	call	0x142	; 0x142 <fps_read_finger>
				timer = 0;
     67e:	c0 e0       	ldi	r28, 0x00	; 0
				while(tmp[0] == 0x02){
     680:	02 ed       	ldi	r16, 0xD2	; 210
     682:	13 e0       	ldi	r17, 0x03	; 3
     684:	4a c0       	rjmp	.+148    	; 0x71a <newFinger+0x1b2>
					fps_read_finger();
     686:	0e 94 a1 00 	call	0x142	; 0x142 <fps_read_finger>
     68a:	2f ef       	ldi	r18, 0xFF	; 255
     68c:	81 ee       	ldi	r24, 0xE1	; 225
     68e:	94 e0       	ldi	r25, 0x04	; 4
     690:	21 50       	subi	r18, 0x01	; 1
     692:	80 40       	sbci	r24, 0x00	; 0
     694:	90 40       	sbci	r25, 0x00	; 0
     696:	e1 f7       	brne	.-8      	; 0x690 <newFinger+0x128>
     698:	00 c0       	rjmp	.+0      	; 0x69a <newFinger+0x132>
     69a:	00 00       	nop
					_delay_ms(100);
					timer += 1;
     69c:	cf 5f       	subi	r28, 0xFF	; 255
					if(timer == 10){
     69e:	ca 30       	cpi	r28, 0x0A	; 10
     6a0:	39 f4       	brne	.+14     	; 0x6b0 <newFinger+0x148>
						lcd_send_info("  Umiesc palec  ", "Skanowanie: ----");
     6a2:	65 e2       	ldi	r22, 0x25	; 37
     6a4:	71 e0       	ldi	r23, 0x01	; 1
     6a6:	84 e1       	ldi	r24, 0x14	; 20
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     6ae:	12 c0       	rjmp	.+36     	; 0x6d4 <newFinger+0x16c>
					}
					if(timer == 20){
     6b0:	c4 31       	cpi	r28, 0x14	; 20
     6b2:	39 f4       	brne	.+14     	; 0x6c2 <newFinger+0x15a>
						lcd_send_info("  Umiesc palec  ", "Skanowanie:  ---");
     6b4:	66 e3       	ldi	r22, 0x36	; 54
     6b6:	71 e0       	ldi	r23, 0x01	; 1
     6b8:	84 e1       	ldi	r24, 0x14	; 20
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     6c0:	12 c0       	rjmp	.+36     	; 0x6e6 <newFinger+0x17e>
					}
					if(timer == 30){
     6c2:	ce 31       	cpi	r28, 0x1E	; 30
     6c4:	39 f4       	brne	.+14     	; 0x6d4 <newFinger+0x16c>
						lcd_send_info("  Umiesc palec  ", "Skanowanie:   --");
     6c6:	67 e4       	ldi	r22, 0x47	; 71
     6c8:	71 e0       	ldi	r23, 0x01	; 1
     6ca:	84 e1       	ldi	r24, 0x14	; 20
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     6d2:	23 c0       	rjmp	.+70     	; 0x71a <newFinger+0x1b2>
					}
					if(timer == 40){
     6d4:	c8 32       	cpi	r28, 0x28	; 40
     6d6:	39 f4       	brne	.+14     	; 0x6e6 <newFinger+0x17e>
						lcd_send_info("  Umiesc palec  ", "Skanowanie:    -");
     6d8:	68 e5       	ldi	r22, 0x58	; 88
     6da:	71 e0       	ldi	r23, 0x01	; 1
     6dc:	84 e1       	ldi	r24, 0x14	; 20
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     6e4:	1a c0       	rjmp	.+52     	; 0x71a <newFinger+0x1b2>
					}
					if(timer == 49){
     6e6:	c1 33       	cpi	r28, 0x31	; 49
     6e8:	c1 f4       	brne	.+48     	; 0x71a <newFinger+0x1b2>
						lcd_send_info("  Brak palca na ", " czytniku linii ");
     6ea:	69 e6       	ldi	r22, 0x69	; 105
     6ec:	71 e0       	ldi	r23, 0x01	; 1
     6ee:	8a e7       	ldi	r24, 0x7A	; 122
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     6f6:	ef ef       	ldi	r30, 0xFF	; 255
     6f8:	fd e3       	ldi	r31, 0x3D	; 61
     6fa:	29 e4       	ldi	r18, 0x49	; 73
     6fc:	e1 50       	subi	r30, 0x01	; 1
     6fe:	f0 40       	sbci	r31, 0x00	; 0
     700:	20 40       	sbci	r18, 0x00	; 0
     702:	e1 f7       	brne	.-8      	; 0x6fc <newFinger+0x194>
     704:	00 c0       	rjmp	.+0      	; 0x706 <newFinger+0x19e>
     706:	00 00       	nop
						_delay_ms(1500);
						enrollFinger = false;
     708:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <enrollFinger>
						lcd_send_info("Drzwi zamkniete", "");
     70c:	60 e1       	ldi	r22, 0x10	; 16
     70e:	73 e0       	ldi	r23, 0x03	; 3
     710:	8b e8       	ldi	r24, 0x8B	; 139
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
						break;
     718:	05 c0       	rjmp	.+10     	; 0x724 <newFinger+0x1bc>
			lcd_send_info("   Raz jeszcze  ", "  umiesc palec  ");
			_delay_ms(1500);
				lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
				fps_read_finger();
				timer = 0;
				while(tmp[0] == 0x02){
     71a:	f8 01       	movw	r30, r16
     71c:	80 81       	ld	r24, Z
     71e:	82 30       	cpi	r24, 0x02	; 2
     720:	09 f4       	brne	.+2      	; 0x724 <newFinger+0x1bc>
     722:	b1 cf       	rjmp	.-158    	; 0x686 <newFinger+0x11e>
						enrollFinger = false;
						lcd_send_info("Drzwi zamkniete", "");
						break;
					}
				}
			if(tmp[0] == 0x00){
     724:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     728:	81 11       	cpse	r24, r1
     72a:	60 c0       	rjmp	.+192    	; 0x7ec <newFinger+0x284>
				fps_img2TZ(2);
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	0e 94 bb 00 	call	0x176	; 0x176 <fps_img2TZ>
     732:	ff ef       	ldi	r31, 0xFF	; 255
     734:	29 e6       	ldi	r18, 0x69	; 105
     736:	88 e1       	ldi	r24, 0x18	; 24
     738:	f1 50       	subi	r31, 0x01	; 1
     73a:	20 40       	sbci	r18, 0x00	; 0
     73c:	80 40       	sbci	r24, 0x00	; 0
     73e:	e1 f7       	brne	.-8      	; 0x738 <newFinger+0x1d0>
     740:	00 c0       	rjmp	.+0      	; 0x742 <newFinger+0x1da>
     742:	00 00       	nop
				_delay_ms(500);
				if(tmp[0] == 0x00){
     744:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     748:	81 11       	cpse	r24, r1
     74a:	40 c0       	rjmp	.+128    	; 0x7cc <newFinger+0x264>
					fps_genModel();
     74c:	0e 94 0b 01 	call	0x216	; 0x216 <fps_genModel>
					if(tmp[0] == 0x00){
     750:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     754:	81 11       	cpse	r24, r1
     756:	2a c0       	rjmp	.+84     	; 0x7ac <newFinger+0x244>
						fps_storeModel(id);
     758:	8d 2f       	mov	r24, r29
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 25 01 	call	0x24a	; 0x24a <fps_storeModel>
						if(tmp[0] == 0x00){
     760:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     764:	81 11       	cpse	r24, r1
     766:	12 c0       	rjmp	.+36     	; 0x78c <newFinger+0x224>
							lcd_send_info(" Pomyslny zapis ", " palca w bazie! ");
     768:	6d eb       	ldi	r22, 0xBD	; 189
     76a:	71 e0       	ldi	r23, 0x01	; 1
     76c:	8e ec       	ldi	r24, 0xCE	; 206
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
							firstUse = false;
     774:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <__data_end>
     778:	9f ef       	ldi	r25, 0xFF	; 255
     77a:	e7 ea       	ldi	r30, 0xA7	; 167
     77c:	f1 e6       	ldi	r31, 0x61	; 97
     77e:	91 50       	subi	r25, 0x01	; 1
     780:	e0 40       	sbci	r30, 0x00	; 0
     782:	f0 40       	sbci	r31, 0x00	; 0
     784:	e1 f7       	brne	.-8      	; 0x77e <newFinger+0x216>
     786:	00 c0       	rjmp	.+0      	; 0x788 <newFinger+0x220>
     788:	00 00       	nop
     78a:	5f c0       	rjmp	.+190    	; 0x84a <newFinger+0x2e2>
							_delay_ms(2000);
						}
						else{
							lcd_send_info("  Blad podczas  ", " zapisu do bazy ");
     78c:	6f ed       	ldi	r22, 0xDF	; 223
     78e:	71 e0       	ldi	r23, 0x01	; 1
     790:	80 ef       	ldi	r24, 0xF0	; 240
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     798:	2f ef       	ldi	r18, 0xFF	; 255
     79a:	87 ea       	ldi	r24, 0xA7	; 167
     79c:	91 e6       	ldi	r25, 0x61	; 97
     79e:	21 50       	subi	r18, 0x01	; 1
     7a0:	80 40       	sbci	r24, 0x00	; 0
     7a2:	90 40       	sbci	r25, 0x00	; 0
     7a4:	e1 f7       	brne	.-8      	; 0x79e <newFinger+0x236>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <newFinger+0x240>
     7a8:	00 00       	nop
     7aa:	4f c0       	rjmp	.+158    	; 0x84a <newFinger+0x2e2>
							_delay_ms(2000);
						}
					}
					else{
						lcd_send_info("  Blad podczas  ", "tworzenia modelu");
     7ac:	61 e0       	ldi	r22, 0x01	; 1
     7ae:	72 e0       	ldi	r23, 0x02	; 2
     7b0:	80 ef       	ldi	r24, 0xF0	; 240
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     7b8:	ef ef       	ldi	r30, 0xFF	; 255
     7ba:	f7 ea       	ldi	r31, 0xA7	; 167
     7bc:	21 e6       	ldi	r18, 0x61	; 97
     7be:	e1 50       	subi	r30, 0x01	; 1
     7c0:	f0 40       	sbci	r31, 0x00	; 0
     7c2:	20 40       	sbci	r18, 0x00	; 0
     7c4:	e1 f7       	brne	.-8      	; 0x7be <newFinger+0x256>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <newFinger+0x260>
     7c8:	00 00       	nop
     7ca:	3f c0       	rjmp	.+126    	; 0x84a <newFinger+0x2e2>
						_delay_ms(2000);
					}
				}
				else{
					lcd_send_info(" Blad tworzenia ", "  obrazu palca  ");
     7cc:	62 e1       	ldi	r22, 0x12	; 18
     7ce:	72 e0       	ldi	r23, 0x02	; 2
     7d0:	83 e2       	ldi	r24, 0x23	; 35
     7d2:	92 e0       	ldi	r25, 0x02	; 2
     7d4:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     7d8:	8f ef       	ldi	r24, 0xFF	; 255
     7da:	97 ea       	ldi	r25, 0xA7	; 167
     7dc:	e1 e6       	ldi	r30, 0x61	; 97
     7de:	81 50       	subi	r24, 0x01	; 1
     7e0:	90 40       	sbci	r25, 0x00	; 0
     7e2:	e0 40       	sbci	r30, 0x00	; 0
     7e4:	e1 f7       	brne	.-8      	; 0x7de <newFinger+0x276>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <newFinger+0x280>
     7e8:	00 00       	nop
     7ea:	2f c0       	rjmp	.+94     	; 0x84a <newFinger+0x2e2>
					_delay_ms(2000);
				}
			}
			else{
				lcd_send_info("   Brak palca!  ", "Sprobuj ponownie");
     7ec:	64 e3       	ldi	r22, 0x34	; 52
     7ee:	72 e0       	ldi	r23, 0x02	; 2
     7f0:	85 e4       	ldi	r24, 0x45	; 69
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     7f8:	ff ef       	ldi	r31, 0xFF	; 255
     7fa:	27 ea       	ldi	r18, 0xA7	; 167
     7fc:	81 e6       	ldi	r24, 0x61	; 97
     7fe:	f1 50       	subi	r31, 0x01	; 1
     800:	20 40       	sbci	r18, 0x00	; 0
     802:	80 40       	sbci	r24, 0x00	; 0
     804:	e1 f7       	brne	.-8      	; 0x7fe <newFinger+0x296>
     806:	00 c0       	rjmp	.+0      	; 0x808 <newFinger+0x2a0>
     808:	00 00       	nop
     80a:	1f c0       	rjmp	.+62     	; 0x84a <newFinger+0x2e2>
				_delay_ms(2000);
			}
		}
		else{
			lcd_send_info(" Blad tworzenia ", "  obrazu palca  ");
     80c:	62 e1       	ldi	r22, 0x12	; 18
     80e:	72 e0       	ldi	r23, 0x02	; 2
     810:	83 e2       	ldi	r24, 0x23	; 35
     812:	92 e0       	ldi	r25, 0x02	; 2
     814:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     818:	9f ef       	ldi	r25, 0xFF	; 255
     81a:	e7 ea       	ldi	r30, 0xA7	; 167
     81c:	f1 e6       	ldi	r31, 0x61	; 97
     81e:	91 50       	subi	r25, 0x01	; 1
     820:	e0 40       	sbci	r30, 0x00	; 0
     822:	f0 40       	sbci	r31, 0x00	; 0
     824:	e1 f7       	brne	.-8      	; 0x81e <newFinger+0x2b6>
     826:	00 c0       	rjmp	.+0      	; 0x828 <newFinger+0x2c0>
     828:	00 00       	nop
     82a:	0f c0       	rjmp	.+30     	; 0x84a <newFinger+0x2e2>
			_delay_ms(2000);
		}
	}
	else{
		lcd_send_info("   Brak palca!  ", "Sprobuj ponownie");
     82c:	64 e3       	ldi	r22, 0x34	; 52
     82e:	72 e0       	ldi	r23, 0x02	; 2
     830:	85 e4       	ldi	r24, 0x45	; 69
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     838:	2f ef       	ldi	r18, 0xFF	; 255
     83a:	87 ea       	ldi	r24, 0xA7	; 167
     83c:	91 e6       	ldi	r25, 0x61	; 97
     83e:	21 50       	subi	r18, 0x01	; 1
     840:	80 40       	sbci	r24, 0x00	; 0
     842:	90 40       	sbci	r25, 0x00	; 0
     844:	e1 f7       	brne	.-8      	; 0x83e <newFinger+0x2d6>
     846:	00 c0       	rjmp	.+0      	; 0x848 <newFinger+0x2e0>
     848:	00 00       	nop
		_delay_ms(2000);
	}
	enrollFinger = false;
     84a:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <enrollFinger>
	if(!firstUse){
     84e:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <__data_end>
     852:	81 11       	cpse	r24, r1
     854:	06 c0       	rjmp	.+12     	; 0x862 <newFinger+0x2fa>
		lcd_send_info("Drzwi zamkniete", "");
     856:	60 e1       	ldi	r22, 0x10	; 16
     858:	73 e0       	ldi	r23, 0x03	; 3
     85a:	8b e8       	ldi	r24, 0x8B	; 139
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
	}	
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	08 95       	ret

0000086c <deleteFinger>:

void deleteFinger(uint8_t id){
     86c:	cf 93       	push	r28
     86e:	c8 2f       	mov	r28, r24
	fps_deleteModel(id);
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 51 01 	call	0x2a2	; 0x2a2 <fps_deleteModel>
     876:	2f ef       	ldi	r18, 0xFF	; 255
     878:	81 ee       	ldi	r24, 0xE1	; 225
     87a:	94 e0       	ldi	r25, 0x04	; 4
     87c:	21 50       	subi	r18, 0x01	; 1
     87e:	80 40       	sbci	r24, 0x00	; 0
     880:	90 40       	sbci	r25, 0x00	; 0
     882:	e1 f7       	brne	.-8      	; 0x87c <deleteFinger+0x10>
     884:	00 c0       	rjmp	.+0      	; 0x886 <deleteFinger+0x1a>
     886:	00 00       	nop
	_delay_ms(100);
	if(tmp[0] == 0x00){
     888:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     88c:	81 11       	cpse	r24, r1
     88e:	30 c0       	rjmp	.+96     	; 0x8f0 <deleteFinger+0x84>
		lcd_clear();
     890:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <lcd_clear>
		lcd_setCursor(0,0);
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	0e 94 84 02 	call	0x508	; 0x508 <lcd_setCursor>
		lcd_send_string(" Usunieto palec ");
     89c:	86 e5       	ldi	r24, 0x56	; 86
     89e:	92 e0       	ldi	r25, 0x02	; 2
     8a0:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>
		lcd_setCursor(0,1);
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0e 94 84 02 	call	0x508	; 0x508 <lcd_setCursor>
		lcd_send_string("o ID: ");
     8ac:	87 e6       	ldi	r24, 0x67	; 103
     8ae:	92 e0       	ldi	r25, 0x02	; 2
     8b0:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>
		lcd_setCursor(6,1);
     8b4:	61 e0       	ldi	r22, 0x01	; 1
     8b6:	86 e0       	ldi	r24, 0x06	; 6
     8b8:	0e 94 84 02 	call	0x508	; 0x508 <lcd_setCursor>
		lcd_send_string(itoa(id, buffer, 10));
     8bc:	4a e0       	ldi	r20, 0x0A	; 10
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	69 ed       	ldi	r22, 0xD9	; 217
     8c2:	73 e0       	ldi	r23, 0x03	; 3
     8c4:	8c 2f       	mov	r24, r28
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 3d 08 	call	0x107a	; 0x107a <itoa>
     8cc:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>
     8d0:	2f ef       	ldi	r18, 0xFF	; 255
     8d2:	87 ea       	ldi	r24, 0xA7	; 167
     8d4:	91 e6       	ldi	r25, 0x61	; 97
     8d6:	21 50       	subi	r18, 0x01	; 1
     8d8:	80 40       	sbci	r24, 0x00	; 0
     8da:	90 40       	sbci	r25, 0x00	; 0
     8dc:	e1 f7       	brne	.-8      	; 0x8d6 <deleteFinger+0x6a>
     8de:	00 c0       	rjmp	.+0      	; 0x8e0 <deleteFinger+0x74>
     8e0:	00 00       	nop
		_delay_ms(2000);
		lcd_send_info("Drzwi zamkniete", "");
     8e2:	60 e1       	ldi	r22, 0x10	; 16
     8e4:	73 e0       	ldi	r23, 0x03	; 3
     8e6:	8b e8       	ldi	r24, 0x8B	; 139
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     8ee:	15 c0       	rjmp	.+42     	; 0x91a <__stack+0x1b>
	}
	else{
		lcd_send_info(" Nie udalo sie  ", "  usunac palca! ");
     8f0:	6e e6       	ldi	r22, 0x6E	; 110
     8f2:	72 e0       	ldi	r23, 0x02	; 2
     8f4:	8f e7       	ldi	r24, 0x7F	; 127
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     8fc:	2f ef       	ldi	r18, 0xFF	; 255
     8fe:	87 ea       	ldi	r24, 0xA7	; 167
     900:	91 e6       	ldi	r25, 0x61	; 97
     902:	21 50       	subi	r18, 0x01	; 1
     904:	80 40       	sbci	r24, 0x00	; 0
     906:	90 40       	sbci	r25, 0x00	; 0
     908:	e1 f7       	brne	.-8      	; 0x902 <__stack+0x3>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <__stack+0xd>
     90c:	00 00       	nop
		_delay_ms(2000);
		lcd_send_info("Drzwi zamkniete", "");
     90e:	60 e1       	ldi	r22, 0x10	; 16
     910:	73 e0       	ldi	r23, 0x03	; 3
     912:	8b e8       	ldi	r24, 0x8B	; 139
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
	}
	removeFinger = false;
     91a:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <removeFinger>
}
     91e:	cf 91       	pop	r28
     920:	08 95       	ret

00000922 <checkFinger>:

void checkFinger(){
     922:	ef 92       	push	r14
     924:	ff 92       	push	r15
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	00 d0       	rcall	.+0      	; 0x92e <checkFinger+0xc>
     92e:	1f 92       	push	r1
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
	lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
     934:	63 e0       	ldi	r22, 0x03	; 3
     936:	71 e0       	ldi	r23, 0x01	; 1
     938:	84 e1       	ldi	r24, 0x14	; 20
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
	fps_read_finger();
     940:	0e 94 a1 00 	call	0x142	; 0x142 <fps_read_finger>
	uint8_t timer = 0;
     944:	10 e0       	ldi	r17, 0x00	; 0
	while(tmp[0] == 0x02){
     946:	0f 2e       	mov	r0, r31
     948:	f2 ed       	ldi	r31, 0xD2	; 210
     94a:	ef 2e       	mov	r14, r31
     94c:	f3 e0       	ldi	r31, 0x03	; 3
     94e:	ff 2e       	mov	r15, r31
     950:	f0 2d       	mov	r31, r0
     952:	4e c0       	rjmp	.+156    	; 0x9f0 <checkFinger+0xce>
		fps_read_finger();
     954:	0e 94 a1 00 	call	0x142	; 0x142 <fps_read_finger>
     958:	2f ef       	ldi	r18, 0xFF	; 255
     95a:	81 ee       	ldi	r24, 0xE1	; 225
     95c:	94 e0       	ldi	r25, 0x04	; 4
     95e:	21 50       	subi	r18, 0x01	; 1
     960:	80 40       	sbci	r24, 0x00	; 0
     962:	90 40       	sbci	r25, 0x00	; 0
     964:	e1 f7       	brne	.-8      	; 0x95e <checkFinger+0x3c>
     966:	00 c0       	rjmp	.+0      	; 0x968 <checkFinger+0x46>
     968:	00 00       	nop
		_delay_ms(100);
		timer += 1;
     96a:	1f 5f       	subi	r17, 0xFF	; 255
		if(timer == 10){
     96c:	1a 30       	cpi	r17, 0x0A	; 10
     96e:	39 f4       	brne	.+14     	; 0x97e <checkFinger+0x5c>
			lcd_send_info("  Umiesc palec  ", "Skanowanie: ----");
     970:	65 e2       	ldi	r22, 0x25	; 37
     972:	71 e0       	ldi	r23, 0x01	; 1
     974:	84 e1       	ldi	r24, 0x14	; 20
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     97c:	12 c0       	rjmp	.+36     	; 0x9a2 <checkFinger+0x80>
		}
		if(timer == 20){
     97e:	14 31       	cpi	r17, 0x14	; 20
     980:	39 f4       	brne	.+14     	; 0x990 <checkFinger+0x6e>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:  ---");
     982:	66 e3       	ldi	r22, 0x36	; 54
     984:	71 e0       	ldi	r23, 0x01	; 1
     986:	84 e1       	ldi	r24, 0x14	; 20
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     98e:	12 c0       	rjmp	.+36     	; 0x9b4 <checkFinger+0x92>
		}
		if(timer == 30){
     990:	1e 31       	cpi	r17, 0x1E	; 30
     992:	39 f4       	brne	.+14     	; 0x9a2 <checkFinger+0x80>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:   --");
     994:	67 e4       	ldi	r22, 0x47	; 71
     996:	71 e0       	ldi	r23, 0x01	; 1
     998:	84 e1       	ldi	r24, 0x14	; 20
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     9a0:	27 c0       	rjmp	.+78     	; 0x9f0 <checkFinger+0xce>
		}
		if(timer == 40){
     9a2:	18 32       	cpi	r17, 0x28	; 40
     9a4:	39 f4       	brne	.+14     	; 0x9b4 <checkFinger+0x92>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:    -");
     9a6:	68 e5       	ldi	r22, 0x58	; 88
     9a8:	71 e0       	ldi	r23, 0x01	; 1
     9aa:	84 e1       	ldi	r24, 0x14	; 20
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     9b2:	1e c0       	rjmp	.+60     	; 0x9f0 <checkFinger+0xce>
		}
		if(timer == 50){
     9b4:	12 33       	cpi	r17, 0x32	; 50
     9b6:	e1 f4       	brne	.+56     	; 0x9f0 <checkFinger+0xce>
			lcd_send_info("  Brak palca na ", " czytniku linii ");
     9b8:	69 e6       	ldi	r22, 0x69	; 105
     9ba:	71 e0       	ldi	r23, 0x01	; 1
     9bc:	8a e7       	ldi	r24, 0x7A	; 122
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     9c4:	ef ef       	ldi	r30, 0xFF	; 255
     9c6:	fd e3       	ldi	r31, 0x3D	; 61
     9c8:	29 e4       	ldi	r18, 0x49	; 73
     9ca:	e1 50       	subi	r30, 0x01	; 1
     9cc:	f0 40       	sbci	r31, 0x00	; 0
     9ce:	20 40       	sbci	r18, 0x00	; 0
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <checkFinger+0xa8>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <checkFinger+0xb2>
     9d4:	00 00       	nop
			_delay_ms(1500);
			scanFinger = false;
     9d6:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <scanFinger>
			enrollFinger = false;
     9da:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <enrollFinger>
			removeFinger = false;
     9de:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <removeFinger>
			lcd_send_info("Drzwi zamkniete", "");
     9e2:	60 e1       	ldi	r22, 0x10	; 16
     9e4:	73 e0       	ldi	r23, 0x03	; 3
     9e6:	8b e8       	ldi	r24, 0x8B	; 139
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
			return;
     9ee:	e8 c0       	rjmp	.+464    	; 0xbc0 <checkFinger+0x29e>

void checkFinger(){
	lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
	fps_read_finger();
	uint8_t timer = 0;
	while(tmp[0] == 0x02){
     9f0:	f7 01       	movw	r30, r14
     9f2:	80 81       	ld	r24, Z
     9f4:	82 30       	cpi	r24, 0x02	; 2
     9f6:	09 f4       	brne	.+2      	; 0x9fa <checkFinger+0xd8>
     9f8:	ad cf       	rjmp	.-166    	; 0x954 <checkFinger+0x32>
			removeFinger = false;
			lcd_send_info("Drzwi zamkniete", "");
			return;
		}
	}
	if(tmp[0] == 0x00){
     9fa:	81 11       	cpse	r24, r1
     9fc:	c2 c0       	rjmp	.+388    	; 0xb82 <checkFinger+0x260>
		fps_img2TZ(1);
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	0e 94 bb 00 	call	0x176	; 0x176 <fps_img2TZ>
     a04:	ff ef       	ldi	r31, 0xFF	; 255
     a06:	21 ee       	ldi	r18, 0xE1	; 225
     a08:	84 e0       	ldi	r24, 0x04	; 4
     a0a:	f1 50       	subi	r31, 0x01	; 1
     a0c:	20 40       	sbci	r18, 0x00	; 0
     a0e:	80 40       	sbci	r24, 0x00	; 0
     a10:	e1 f7       	brne	.-8      	; 0xa0a <checkFinger+0xe8>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <checkFinger+0xf2>
     a14:	00 00       	nop
		_delay_ms(100);
		if(tmp[0] == 0x00){
     a16:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     a1a:	81 11       	cpse	r24, r1
     a1c:	a2 c0       	rjmp	.+324    	; 0xb62 <checkFinger+0x240>
			fps_search();
     a1e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <fps_search>
     a22:	9f ef       	ldi	r25, 0xFF	; 255
     a24:	e1 ee       	ldi	r30, 0xE1	; 225
     a26:	f4 e0       	ldi	r31, 0x04	; 4
     a28:	91 50       	subi	r25, 0x01	; 1
     a2a:	e0 40       	sbci	r30, 0x00	; 0
     a2c:	f0 40       	sbci	r31, 0x00	; 0
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <checkFinger+0x106>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <checkFinger+0x110>
     a32:	00 00       	nop
			_delay_ms(100);
			if(tmp[0] == 0x00){
     a34:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     a38:	81 11       	cpse	r24, r1
     a3a:	83 c0       	rjmp	.+262    	; 0xb42 <checkFinger+0x220>
				if(enrollFinger == true || removeFinger == true){
     a3c:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <enrollFinger>
     a40:	81 11       	cpse	r24, r1
     a42:	04 c0       	rjmp	.+8      	; 0xa4c <checkFinger+0x12a>
     a44:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <removeFinger>
     a48:	88 23       	and	r24, r24
     a4a:	f9 f0       	breq	.+62     	; 0xa8a <checkFinger+0x168>
					uint16_t mainID = tmp[1] << 8;
     a4c:	e2 ed       	ldi	r30, 0xD2	; 210
     a4e:	f3 e0       	ldi	r31, 0x03	; 3
     a50:	81 81       	ldd	r24, Z+1	; 0x01
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	98 2f       	mov	r25, r24
     a56:	88 27       	eor	r24, r24
					mainID += tmp[2];
					if(mainID == mainUserID){
     a58:	22 81       	ldd	r18, Z+2	; 0x02
     a5a:	82 0f       	add	r24, r18
     a5c:	91 1d       	adc	r25, r1
     a5e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     a62:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     a66:	82 17       	cp	r24, r18
     a68:	93 07       	cpc	r25, r19
     a6a:	41 f4       	brne	.+16     	; 0xa7c <checkFinger+0x15a>
						mainUser = true;
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <mainUser>
						scanFinger = false;
     a72:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <scanFinger>
						removeFinger = false;
     a76:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <removeFinger>
     a7a:	92 c0       	rjmp	.+292    	; 0xba0 <checkFinger+0x27e>
					}
					else{
						mainUser = false;
     a7c:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <mainUser>
						scanFinger = false;
     a80:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <scanFinger>
						removeFinger = false;
     a84:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <removeFinger>
     a88:	8b c0       	rjmp	.+278    	; 0xba0 <checkFinger+0x27e>
					}
				}
				else if(firstUse == true){
     a8a:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <__data_end>
     a8e:	81 11       	cpse	r24, r1
     a90:	87 c0       	rjmp	.+270    	; 0xba0 <checkFinger+0x27e>
					
				}
				else{
					uint16_t score;
					score = tmp[3] << 8;
     a92:	e2 ed       	ldi	r30, 0xD2	; 210
     a94:	f3 e0       	ldi	r31, 0x03	; 3
     a96:	e3 80       	ldd	r14, Z+3	; 0x03
     a98:	f1 2c       	mov	r15, r1
     a9a:	fe 2c       	mov	r15, r14
     a9c:	ee 24       	eor	r14, r14
					score += tmp[4];
     a9e:	84 81       	ldd	r24, Z+4	; 0x04
     aa0:	e8 0e       	add	r14, r24
     aa2:	f1 1c       	adc	r15, r1
					uint8_t percentage;
					char buffor[3];
					lcd_clear();
     aa4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <lcd_clear>
					lcd_setCursor(0,0);
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	0e 94 84 02 	call	0x508	; 0x508 <lcd_setCursor>
					lcd_send_string("Znaleziono palec");
     ab0:	80 e9       	ldi	r24, 0x90	; 144
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>
					lcd_setCursor(0,1);
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	0e 94 84 02 	call	0x508	; 0x508 <lcd_setCursor>
					lcd_send_string(" Zgodnosc: ");
     ac0:	81 ea       	ldi	r24, 0xA1	; 161
     ac2:	92 e0       	ldi	r25, 0x02	; 2
     ac4:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>
					lcd_setCursor(11,1);
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	8b e0       	ldi	r24, 0x0B	; 11
     acc:	0e 94 84 02 	call	0x508	; 0x508 <lcd_setCursor>
					percentage = ((score <<8)/(uint8_t)255) *100;
					lcd_send_string(itoa(percentage, buffor, 10));
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	3e 2d       	mov	r19, r14
     ad4:	a1 e8       	ldi	r26, 0x81	; 129
     ad6:	b0 e8       	ldi	r27, 0x80	; 128
     ad8:	0e 94 2e 08 	call	0x105c	; 0x105c <__umulhisi3>
     adc:	88 0f       	add	r24, r24
     ade:	89 2f       	mov	r24, r25
     ae0:	88 1f       	adc	r24, r24
     ae2:	99 0b       	sbc	r25, r25
     ae4:	91 95       	neg	r25
     ae6:	94 e6       	ldi	r25, 0x64	; 100
     ae8:	89 9f       	mul	r24, r25
     aea:	80 2d       	mov	r24, r0
     aec:	11 24       	eor	r1, r1
     aee:	4a e0       	ldi	r20, 0x0A	; 10
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	be 01       	movw	r22, r28
     af4:	6f 5f       	subi	r22, 0xFF	; 255
     af6:	7f 4f       	sbci	r23, 0xFF	; 255
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 3d 08 	call	0x107a	; 0x107a <itoa>
     afe:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>
					lcd_setCursor(15,1);
     b02:	61 e0       	ldi	r22, 0x01	; 1
     b04:	8f e0       	ldi	r24, 0x0F	; 15
     b06:	0e 94 84 02 	call	0x508	; 0x508 <lcd_setCursor>
					lcd_send_string("%");
     b0a:	8d ea       	ldi	r24, 0xAD	; 173
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>
					PORTB ^= 1 << PINB3;
     b12:	95 b1       	in	r25, 0x05	; 5
     b14:	88 e0       	ldi	r24, 0x08	; 8
     b16:	89 27       	eor	r24, r25
     b18:	85 b9       	out	0x05, r24	; 5
     b1a:	2f ef       	ldi	r18, 0xFF	; 255
     b1c:	8b e7       	ldi	r24, 0x7B	; 123
     b1e:	92 e9       	ldi	r25, 0x92	; 146
     b20:	21 50       	subi	r18, 0x01	; 1
     b22:	80 40       	sbci	r24, 0x00	; 0
     b24:	90 40       	sbci	r25, 0x00	; 0
     b26:	e1 f7       	brne	.-8      	; 0xb20 <checkFinger+0x1fe>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <checkFinger+0x208>
     b2a:	00 00       	nop
					_delay_ms(3000);
					lcd_send_info("--Drzwi otwarte--", "");
     b2c:	60 e1       	ldi	r22, 0x10	; 16
     b2e:	73 e0       	ldi	r23, 0x03	; 3
     b30:	8f ea       	ldi	r24, 0xAF	; 175
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
					scanFinger = false;
     b38:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <scanFinger>
					doorLocked = false;
     b3c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <doorLocked>
     b40:	2f c0       	rjmp	.+94     	; 0xba0 <checkFinger+0x27e>
				}
			}
			else{
				lcd_send_info(" Nie znaleziono ", "palca w systemie");
     b42:	61 ec       	ldi	r22, 0xC1	; 193
     b44:	72 e0       	ldi	r23, 0x02	; 2
     b46:	82 ed       	ldi	r24, 0xD2	; 210
     b48:	92 e0       	ldi	r25, 0x02	; 2
     b4a:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     b4e:	ef ef       	ldi	r30, 0xFF	; 255
     b50:	f7 ea       	ldi	r31, 0xA7	; 167
     b52:	21 e6       	ldi	r18, 0x61	; 97
     b54:	e1 50       	subi	r30, 0x01	; 1
     b56:	f0 40       	sbci	r31, 0x00	; 0
     b58:	20 40       	sbci	r18, 0x00	; 0
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <checkFinger+0x232>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <checkFinger+0x23c>
     b5e:	00 00       	nop
     b60:	1f c0       	rjmp	.+62     	; 0xba0 <checkFinger+0x27e>
				_delay_ms(2000);
			}
		}
		else{
			lcd_send_info(" Blad tworzenia ", "  obrazu palca  ");
     b62:	62 e1       	ldi	r22, 0x12	; 18
     b64:	72 e0       	ldi	r23, 0x02	; 2
     b66:	83 e2       	ldi	r24, 0x23	; 35
     b68:	92 e0       	ldi	r25, 0x02	; 2
     b6a:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	97 ea       	ldi	r25, 0xA7	; 167
     b72:	e1 e6       	ldi	r30, 0x61	; 97
     b74:	81 50       	subi	r24, 0x01	; 1
     b76:	90 40       	sbci	r25, 0x00	; 0
     b78:	e0 40       	sbci	r30, 0x00	; 0
     b7a:	e1 f7       	brne	.-8      	; 0xb74 <checkFinger+0x252>
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <checkFinger+0x25c>
     b7e:	00 00       	nop
     b80:	0f c0       	rjmp	.+30     	; 0xba0 <checkFinger+0x27e>
			_delay_ms(2000);
		}
	}
	else{
		lcd_send_info("   Brak palca!  ", "Sprobuj ponownie");
     b82:	64 e3       	ldi	r22, 0x34	; 52
     b84:	72 e0       	ldi	r23, 0x02	; 2
     b86:	85 e4       	ldi	r24, 0x45	; 69
     b88:	92 e0       	ldi	r25, 0x02	; 2
     b8a:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     b8e:	ff ef       	ldi	r31, 0xFF	; 255
     b90:	27 ea       	ldi	r18, 0xA7	; 167
     b92:	81 e6       	ldi	r24, 0x61	; 97
     b94:	f1 50       	subi	r31, 0x01	; 1
     b96:	20 40       	sbci	r18, 0x00	; 0
     b98:	80 40       	sbci	r24, 0x00	; 0
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <checkFinger+0x272>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <checkFinger+0x27c>
     b9e:	00 00       	nop
		_delay_ms(2000);
	}
	removeFinger = false;
     ba0:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <removeFinger>
	enrollFinger = false;
     ba4:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <enrollFinger>
	scanFinger = false;
     ba8:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <scanFinger>
	if(doorLocked){
     bac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <doorLocked>
     bb0:	88 23       	and	r24, r24
     bb2:	31 f0       	breq	.+12     	; 0xbc0 <checkFinger+0x29e>
	lcd_send_info("Drzwi zamkniete", "");
     bb4:	60 e1       	ldi	r22, 0x10	; 16
     bb6:	73 e0       	ldi	r23, 0x03	; 3
     bb8:	8b e8       	ldi	r24, 0x8B	; 139
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
	}
	
}
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	08 95       	ret

00000bd2 <getID>:
	
uint8_t getID(){
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	00 d0       	rcall	.+0      	; 0xbda <getID+0x8>
     bda:	1f 92       	push	r1
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
	uint8_t id = 1;
	char buffor[3];
	lcd_clear();
     be0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <lcd_clear>
	lcd_setCursor(0,0);
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	0e 94 84 02 	call	0x508	; 0x508 <lcd_setCursor>
	lcd_send_string("Wybierz ID:");
     bec:	83 ee       	ldi	r24, 0xE3	; 227
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>
	lcd_setCursor(0,11);
     bf4:	6b e0       	ldi	r22, 0x0B	; 11
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	0e 94 84 02 	call	0x508	; 0x508 <lcd_setCursor>
	lcd_send_string(itoa(id,buffor,10));
     bfc:	4a e0       	ldi	r20, 0x0A	; 10
     bfe:	50 e0       	ldi	r21, 0x00	; 0
     c00:	be 01       	movw	r22, r28
     c02:	6f 5f       	subi	r22, 0xFF	; 255
     c04:	7f 4f       	sbci	r23, 0xFF	; 255
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 3d 08 	call	0x107a	; 0x107a <itoa>
     c0e:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>
	getID_bool = true;
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <getID_bool>
	}
	
}
	
uint8_t getID(){
	uint8_t id = 1;
     c18:	11 e0       	ldi	r17, 0x01	; 1
	lcd_setCursor(0,0);
	lcd_send_string("Wybierz ID:");
	lcd_setCursor(0,11);
	lcd_send_string(itoa(id,buffor,10));
	getID_bool = true;
	while(getID_bool){
     c1a:	88 c0       	rjmp	.+272    	; 0xd2c <getID+0x15a>
		if(bit_is_clear(PINB, 1)){
     c1c:	19 99       	sbic	0x03, 1	; 3
     c1e:	2c c0       	rjmp	.+88     	; 0xc78 <getID+0xa6>
			if(id == 255){
     c20:	1f 3f       	cpi	r17, 0xFF	; 255
     c22:	81 f4       	brne	.+32     	; 0xc44 <getID+0x72>
				lcd_setCursor(0,11);
     c24:	6b e0       	ldi	r22, 0x0B	; 11
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	0e 94 84 02 	call	0x508	; 0x508 <lcd_setCursor>
				lcd_send_string(itoa(255,buffor,10));
     c2c:	4a e0       	ldi	r20, 0x0A	; 10
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	be 01       	movw	r22, r28
     c32:	6f 5f       	subi	r22, 0xFF	; 255
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	8f ef       	ldi	r24, 0xFF	; 255
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 3d 08 	call	0x107a	; 0x107a <itoa>
     c3e:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>
     c42:	74 c0       	rjmp	.+232    	; 0xd2c <getID+0x15a>
			}
			else{	
				id++;
     c44:	1f 5f       	subi	r17, 0xFF	; 255
				lcd_setCursor(0,11);
     c46:	6b e0       	ldi	r22, 0x0B	; 11
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	0e 94 84 02 	call	0x508	; 0x508 <lcd_setCursor>
				lcd_send_string(itoa(id,buffor,10));
     c4e:	4a e0       	ldi	r20, 0x0A	; 10
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	be 01       	movw	r22, r28
     c54:	6f 5f       	subi	r22, 0xFF	; 255
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	81 2f       	mov	r24, r17
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 3d 08 	call	0x107a	; 0x107a <itoa>
     c60:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>
     c64:	2f ef       	ldi	r18, 0xFF	; 255
     c66:	83 ec       	ldi	r24, 0xC3	; 195
     c68:	99 e0       	ldi	r25, 0x09	; 9
     c6a:	21 50       	subi	r18, 0x01	; 1
     c6c:	80 40       	sbci	r24, 0x00	; 0
     c6e:	90 40       	sbci	r25, 0x00	; 0
     c70:	e1 f7       	brne	.-8      	; 0xc6a <getID+0x98>
     c72:	00 c0       	rjmp	.+0      	; 0xc74 <getID+0xa2>
     c74:	00 00       	nop
     c76:	5a c0       	rjmp	.+180    	; 0xd2c <getID+0x15a>
				_delay_ms(200);	
			}
		}
		else if(bit_is_clear(PINB, 2)){
     c78:	1a 99       	sbic	0x03, 2	; 3
     c7a:	52 c0       	rjmp	.+164    	; 0xd20 <getID+0x14e>
			if(id == 10){
     c7c:	1a 30       	cpi	r17, 0x0A	; 10
     c7e:	21 f5       	brne	.+72     	; 0xcc8 <getID+0xf6>
				id--;
				lcd_clear();
     c80:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <lcd_clear>
				lcd_setCursor(0,0);
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	0e 94 84 02 	call	0x508	; 0x508 <lcd_setCursor>
				lcd_send_string("Wybierz ID:");
     c8c:	83 ee       	ldi	r24, 0xE3	; 227
     c8e:	92 e0       	ldi	r25, 0x02	; 2
     c90:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>
				lcd_setCursor(0,11);
     c94:	6b e0       	ldi	r22, 0x0B	; 11
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	0e 94 84 02 	call	0x508	; 0x508 <lcd_setCursor>
				lcd_send_string(itoa(id,buffor,10));
     c9c:	4a e0       	ldi	r20, 0x0A	; 10
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	be 01       	movw	r22, r28
     ca2:	6f 5f       	subi	r22, 0xFF	; 255
     ca4:	7f 4f       	sbci	r23, 0xFF	; 255
     ca6:	89 e0       	ldi	r24, 0x09	; 9
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 3d 08 	call	0x107a	; 0x107a <itoa>
     cae:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>
     cb2:	2f ef       	ldi	r18, 0xFF	; 255
     cb4:	83 ec       	ldi	r24, 0xC3	; 195
     cb6:	99 e0       	ldi	r25, 0x09	; 9
     cb8:	21 50       	subi	r18, 0x01	; 1
     cba:	80 40       	sbci	r24, 0x00	; 0
     cbc:	90 40       	sbci	r25, 0x00	; 0
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <getID+0xe6>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <getID+0xf0>
     cc2:	00 00       	nop
				_delay_ms(200);	
			}
		}
		else if(bit_is_clear(PINB, 2)){
			if(id == 10){
				id--;
     cc4:	19 e0       	ldi	r17, 0x09	; 9
     cc6:	32 c0       	rjmp	.+100    	; 0xd2c <getID+0x15a>
				lcd_send_string("Wybierz ID:");
				lcd_setCursor(0,11);
				lcd_send_string(itoa(id,buffor,10));
				_delay_ms(200);
			}
			else if(id == 1){
     cc8:	11 30       	cpi	r17, 0x01	; 1
     cca:	81 f4       	brne	.+32     	; 0xcec <getID+0x11a>
				lcd_setCursor(0,11);
     ccc:	6b e0       	ldi	r22, 0x0B	; 11
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	0e 94 84 02 	call	0x508	; 0x508 <lcd_setCursor>
				lcd_send_string(itoa(1,buffor,10));
     cd4:	4a e0       	ldi	r20, 0x0A	; 10
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	be 01       	movw	r22, r28
     cda:	6f 5f       	subi	r22, 0xFF	; 255
     cdc:	7f 4f       	sbci	r23, 0xFF	; 255
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 3d 08 	call	0x107a	; 0x107a <itoa>
     ce6:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>
     cea:	20 c0       	rjmp	.+64     	; 0xd2c <getID+0x15a>
			}
			else{
				id--;
     cec:	11 50       	subi	r17, 0x01	; 1
				lcd_setCursor(0,11);
     cee:	6b e0       	ldi	r22, 0x0B	; 11
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	0e 94 84 02 	call	0x508	; 0x508 <lcd_setCursor>
				lcd_send_string(itoa(id,buffor,10));
     cf6:	4a e0       	ldi	r20, 0x0A	; 10
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	be 01       	movw	r22, r28
     cfc:	6f 5f       	subi	r22, 0xFF	; 255
     cfe:	7f 4f       	sbci	r23, 0xFF	; 255
     d00:	81 2f       	mov	r24, r17
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 3d 08 	call	0x107a	; 0x107a <itoa>
     d08:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_send_string>
     d0c:	2f ef       	ldi	r18, 0xFF	; 255
     d0e:	83 ec       	ldi	r24, 0xC3	; 195
     d10:	99 e0       	ldi	r25, 0x09	; 9
     d12:	21 50       	subi	r18, 0x01	; 1
     d14:	80 40       	sbci	r24, 0x00	; 0
     d16:	90 40       	sbci	r25, 0x00	; 0
     d18:	e1 f7       	brne	.-8      	; 0xd12 <getID+0x140>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <getID+0x14a>
     d1c:	00 00       	nop
     d1e:	06 c0       	rjmp	.+12     	; 0xd2c <getID+0x15a>
				_delay_ms(200);
			}
		}
		else if(bit_is_clear(PINB, 0)){
     d20:	18 99       	sbic	0x03, 0	; 3
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <getID+0x15a>
			getID_bool = false;
     d24:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <getID_bool>
			return id;
     d28:	81 2f       	mov	r24, r17
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <getID+0x162>
	lcd_setCursor(0,0);
	lcd_send_string("Wybierz ID:");
	lcd_setCursor(0,11);
	lcd_send_string(itoa(id,buffor,10));
	getID_bool = true;
	while(getID_bool){
     d2c:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <getID_bool>
     d30:	81 11       	cpse	r24, r1
     d32:	74 cf       	rjmp	.-280    	; 0xc1c <getID+0x4a>
			getID_bool = false;
			return id;
			_delay_ms(200);
		}
	}
}
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	08 95       	ret

00000d42 <getTemplateCount>:

uint16_t getTemplateCount(){
	uint16_t template;
	fps_templateNum();
     d42:	0e 94 81 01 	call	0x302	; 0x302 <fps_templateNum>
     d46:	2f ef       	ldi	r18, 0xFF	; 255
     d48:	80 e7       	ldi	r24, 0x70	; 112
     d4a:	92 e0       	ldi	r25, 0x02	; 2
     d4c:	21 50       	subi	r18, 0x01	; 1
     d4e:	80 40       	sbci	r24, 0x00	; 0
     d50:	90 40       	sbci	r25, 0x00	; 0
     d52:	e1 f7       	brne	.-8      	; 0xd4c <getTemplateCount+0xa>
     d54:	00 c0       	rjmp	.+0      	; 0xd56 <getTemplateCount+0x14>
     d56:	00 00       	nop
	_delay_ms(50);
	template = tmp[1] << 8;
     d58:	e2 ed       	ldi	r30, 0xD2	; 210
     d5a:	f3 e0       	ldi	r31, 0x03	; 3
     d5c:	81 81       	ldd	r24, Z+1	; 0x01
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	98 2f       	mov	r25, r24
     d62:	88 27       	eor	r24, r24
	template += tmp[2];
	return template;
     d64:	22 81       	ldd	r18, Z+2	; 0x02
     d66:	82 0f       	add	r24, r18
     d68:	91 1d       	adc	r25, r1
     d6a:	08 95       	ret

00000d6c <main>:
uint8_t id;
uint16_t mainUserID = 1;
uint8_t buffer[3];
int main(void){
	//Wstepne parametry programu
	lcd_init();
     d6c:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_init>
     d70:	2f ef       	ldi	r18, 0xFF	; 255
     d72:	80 e7       	ldi	r24, 0x70	; 112
     d74:	92 e0       	ldi	r25, 0x02	; 2
     d76:	21 50       	subi	r18, 0x01	; 1
     d78:	80 40       	sbci	r24, 0x00	; 0
     d7a:	90 40       	sbci	r25, 0x00	; 0
     d7c:	e1 f7       	brne	.-8      	; 0xd76 <main+0xa>
     d7e:	00 c0       	rjmp	.+0      	; 0xd80 <main+0x14>
     d80:	00 00       	nop
	_delay_ms(50);
	initUART();
     d82:	0e 94 0b 08 	call	0x1016	; 0x1016 <initUART>
	
	DDRB = 0b00001000; //B0,B1,B2 - 3 przyciski; B3 - wyjscie elektrozamka
     d86:	88 e0       	ldi	r24, 0x08	; 8
     d88:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000111;
     d8a:	87 e0       	ldi	r24, 0x07	; 7
     d8c:	85 b9       	out	0x05, r24	; 5
	lcd_send_info("    Witaj w:    ", "Zamku szyfrowym ");
     d8e:	6f ee       	ldi	r22, 0xEF	; 239
     d90:	72 e0       	ldi	r23, 0x02	; 2
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	93 e0       	ldi	r25, 0x03	; 3
     d96:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     d9a:	ef ef       	ldi	r30, 0xFF	; 255
     d9c:	f7 ea       	ldi	r31, 0xA7	; 167
     d9e:	21 e6       	ldi	r18, 0x61	; 97
     da0:	e1 50       	subi	r30, 0x01	; 1
     da2:	f0 40       	sbci	r31, 0x00	; 0
     da4:	20 40       	sbci	r18, 0x00	; 0
     da6:	e1 f7       	brne	.-8      	; 0xda0 <main+0x34>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <main+0x3e>
     daa:	00 00       	nop
	_delay_ms(2000);
	
	if(getTemplateCount() == 0){
     dac:	0e 94 a1 06 	call	0xd42	; 0xd42 <getTemplateCount>
     db0:	89 2b       	or	r24, r25
     db2:	f9 f4       	brne	.+62     	; 0xdf2 <main+0x86>
		firstUse = true;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <__data_end>
		while(firstUse){
     dba:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <__data_end>
     dbe:	88 23       	and	r24, r24
     dc0:	c1 f0       	breq	.+48     	; 0xdf2 <main+0x86>
			lcd_send_info("Pierwsze uzycie ", "Admin potrzebny!");
			_delay_ms(1500);
			newFinger(mainUserID);
     dc2:	c0 e0       	ldi	r28, 0x00	; 0
     dc4:	d1 e0       	ldi	r29, 0x01	; 1
	_delay_ms(2000);
	
	if(getTemplateCount() == 0){
		firstUse = true;
		while(firstUse){
			lcd_send_info("Pierwsze uzycie ", "Admin potrzebny!");
     dc6:	61 e1       	ldi	r22, 0x11	; 17
     dc8:	73 e0       	ldi	r23, 0x03	; 3
     dca:	82 e2       	ldi	r24, 0x22	; 34
     dcc:	93 e0       	ldi	r25, 0x03	; 3
     dce:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     dd2:	8f ef       	ldi	r24, 0xFF	; 255
     dd4:	9d e3       	ldi	r25, 0x3D	; 61
     dd6:	e9 e4       	ldi	r30, 0x49	; 73
     dd8:	81 50       	subi	r24, 0x01	; 1
     dda:	90 40       	sbci	r25, 0x00	; 0
     ddc:	e0 40       	sbci	r30, 0x00	; 0
     dde:	e1 f7       	brne	.-8      	; 0xdd8 <main+0x6c>
     de0:	00 c0       	rjmp	.+0      	; 0xde2 <main+0x76>
     de2:	00 00       	nop
			_delay_ms(1500);
			newFinger(mainUserID);
     de4:	88 81       	ld	r24, Y
     de6:	0e 94 b4 02 	call	0x568	; 0x568 <newFinger>
	lcd_send_info("    Witaj w:    ", "Zamku szyfrowym ");
	_delay_ms(2000);
	
	if(getTemplateCount() == 0){
		firstUse = true;
		while(firstUse){
     dea:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <__data_end>
     dee:	81 11       	cpse	r24, r1
     df0:	ea cf       	rjmp	.-44     	; 0xdc6 <main+0x5a>
			lcd_send_info("Pierwsze uzycie ", "Admin potrzebny!");
			_delay_ms(1500);
			newFinger(mainUserID);
		}
	}
	lcd_send_info("Drzwi zamkniete", "");
     df2:	60 e1       	ldi	r22, 0x10	; 16
     df4:	73 e0       	ldi	r23, 0x03	; 3
     df6:	8b e8       	ldi	r24, 0x8B	; 139
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
			}
		}
		//gdy drzwi sa otwarte
		else if(!doorLocked){
			if(bit_is_clear(PINB, 0)){
				doorLocked = true;
     dfe:	c1 e0       	ldi	r28, 0x01	; 1
				PORTB ^= 1 << PINB3;
     e00:	d8 e0       	ldi	r29, 0x08	; 8
								mainUser = false;
								_delay_ms(200);
								break;
							}
							else if(bit_is_clear(PINB, 2)){
								newFinger(mainUserID);
     e02:	00 e0       	ldi	r16, 0x00	; 0
     e04:	11 e0       	ldi	r17, 0x01	; 1
	}
	lcd_send_info("Drzwi zamkniete", "");
	
	//Glowna petla programu		
	while(1){
		if(doorLocked){
     e06:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <doorLocked>
     e0a:	88 23       	and	r24, r24
     e0c:	09 f4       	brne	.+2      	; 0xe10 <main+0xa4>
     e0e:	e8 c0       	rjmp	.+464    	; 0xfe0 <main+0x274>
			if(bit_is_clear(PINB, 0) && !(scanFinger)){
     e10:	18 99       	sbic	0x03, 0	; 3
     e12:	08 c0       	rjmp	.+16     	; 0xe24 <main+0xb8>
     e14:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <scanFinger>
     e18:	81 11       	cpse	r24, r1
     e1a:	04 c0       	rjmp	.+8      	; 0xe24 <main+0xb8>
				scanFinger = true;
     e1c:	c0 93 d1 03 	sts	0x03D1, r28	; 0x8003d1 <scanFinger>
					checkFinger();
     e20:	0e 94 91 04 	call	0x922	; 0x922 <checkFinger>

			}
			if(bit_is_clear(PINB, 1) && !(enrollFinger)){
     e24:	19 99       	sbic	0x03, 1	; 3
     e26:	5a c0       	rjmp	.+180    	; 0xedc <main+0x170>
     e28:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <enrollFinger>
     e2c:	81 11       	cpse	r24, r1
     e2e:	56 c0       	rjmp	.+172    	; 0xedc <main+0x170>
				enrollFinger = true;
     e30:	c0 93 d0 03 	sts	0x03D0, r28	; 0x8003d0 <enrollFinger>
				lcd_send_info("Wprowadz odcisk","    dla: ADMIN   ");
     e34:	63 e3       	ldi	r22, 0x33	; 51
     e36:	73 e0       	ldi	r23, 0x03	; 3
     e38:	85 e4       	ldi	r24, 0x45	; 69
     e3a:	93 e0       	ldi	r25, 0x03	; 3
     e3c:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     e40:	ff ef       	ldi	r31, 0xFF	; 255
     e42:	23 ed       	ldi	r18, 0xD3	; 211
     e44:	80 e3       	ldi	r24, 0x30	; 48
     e46:	f1 50       	subi	r31, 0x01	; 1
     e48:	20 40       	sbci	r18, 0x00	; 0
     e4a:	80 40       	sbci	r24, 0x00	; 0
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <main+0xda>
     e4e:	00 c0       	rjmp	.+0      	; 0xe50 <main+0xe4>
     e50:	00 00       	nop
				_delay_ms(1000);
				checkFinger();
     e52:	0e 94 91 04 	call	0x922	; 0x922 <checkFinger>
				if(mainUser){
     e56:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <mainUser>
     e5a:	88 23       	and	r24, r24
     e5c:	41 f1       	breq	.+80     	; 0xeae <main+0x142>
					id = getID();
     e5e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <getID>
     e62:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <id>
					if(id == mainUserID){
     e66:	48 2f       	mov	r20, r24
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     e6e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     e72:	42 17       	cp	r20, r18
     e74:	53 07       	cpc	r21, r19
     e76:	c1 f4       	brne	.+48     	; 0xea8 <main+0x13c>
						lcd_send_info("  Niedozwolona  ", "operacja!(ADMIN)");
     e78:	65 e5       	ldi	r22, 0x55	; 85
     e7a:	73 e0       	ldi	r23, 0x03	; 3
     e7c:	86 e6       	ldi	r24, 0x66	; 102
     e7e:	93 e0       	ldi	r25, 0x03	; 3
     e80:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     e84:	9f ef       	ldi	r25, 0xFF	; 255
     e86:	e7 ea       	ldi	r30, 0xA7	; 167
     e88:	f1 e6       	ldi	r31, 0x61	; 97
     e8a:	91 50       	subi	r25, 0x01	; 1
     e8c:	e0 40       	sbci	r30, 0x00	; 0
     e8e:	f0 40       	sbci	r31, 0x00	; 0
     e90:	e1 f7       	brne	.-8      	; 0xe8a <main+0x11e>
     e92:	00 c0       	rjmp	.+0      	; 0xe94 <main+0x128>
     e94:	00 00       	nop
						_delay_ms(2000);
						enrollFinger = false;
     e96:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <enrollFinger>
						lcd_send_info("Drzwi zamkniete", "");
     e9a:	60 e1       	ldi	r22, 0x10	; 16
     e9c:	73 e0       	ldi	r23, 0x03	; 3
     e9e:	8b e8       	ldi	r24, 0x8B	; 139
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     ea6:	1a c0       	rjmp	.+52     	; 0xedc <main+0x170>
					}
					else{
						newFinger(id);
     ea8:	0e 94 b4 02 	call	0x568	; 0x568 <newFinger>
     eac:	17 c0       	rjmp	.+46     	; 0xedc <main+0x170>
					}
				}
				else{
					lcd_send_info("Palec nie nalezy", "    do: ADMIN   ");
     eae:	67 e7       	ldi	r22, 0x77	; 119
     eb0:	73 e0       	ldi	r23, 0x03	; 3
     eb2:	88 e8       	ldi	r24, 0x88	; 136
     eb4:	93 e0       	ldi	r25, 0x03	; 3
     eb6:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
					enrollFinger = false;
     eba:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <enrollFinger>
     ebe:	2f ef       	ldi	r18, 0xFF	; 255
     ec0:	87 ea       	ldi	r24, 0xA7	; 167
     ec2:	91 e6       	ldi	r25, 0x61	; 97
     ec4:	21 50       	subi	r18, 0x01	; 1
     ec6:	80 40       	sbci	r24, 0x00	; 0
     ec8:	90 40       	sbci	r25, 0x00	; 0
     eca:	e1 f7       	brne	.-8      	; 0xec4 <main+0x158>
     ecc:	00 c0       	rjmp	.+0      	; 0xece <main+0x162>
     ece:	00 00       	nop
					_delay_ms(2000);
					lcd_send_info("Drzwi zamkniete", "");
     ed0:	60 e1       	ldi	r22, 0x10	; 16
     ed2:	73 e0       	ldi	r23, 0x03	; 3
     ed4:	8b e8       	ldi	r24, 0x8B	; 139
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
				}
			}
			if(bit_is_clear(PINB, 2) && !(removeFinger)){
     edc:	1a 99       	sbic	0x03, 2	; 3
     ede:	93 cf       	rjmp	.-218    	; 0xe06 <main+0x9a>
     ee0:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <removeFinger>
     ee4:	81 11       	cpse	r24, r1
     ee6:	8f cf       	rjmp	.-226    	; 0xe06 <main+0x9a>
				removeFinger = true;
     ee8:	c0 93 cf 03 	sts	0x03CF, r28	; 0x8003cf <removeFinger>
				lcd_send_info("Wprowadz odcisk","    dla: ADMIN   ");
     eec:	63 e3       	ldi	r22, 0x33	; 51
     eee:	73 e0       	ldi	r23, 0x03	; 3
     ef0:	85 e4       	ldi	r24, 0x45	; 69
     ef2:	93 e0       	ldi	r25, 0x03	; 3
     ef4:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     ef8:	ef ef       	ldi	r30, 0xFF	; 255
     efa:	f3 ed       	ldi	r31, 0xD3	; 211
     efc:	20 e3       	ldi	r18, 0x30	; 48
     efe:	e1 50       	subi	r30, 0x01	; 1
     f00:	f0 40       	sbci	r31, 0x00	; 0
     f02:	20 40       	sbci	r18, 0x00	; 0
     f04:	e1 f7       	brne	.-8      	; 0xefe <main+0x192>
     f06:	00 c0       	rjmp	.+0      	; 0xf08 <main+0x19c>
     f08:	00 00       	nop
				_delay_ms(1000);
				checkFinger();
     f0a:	0e 94 91 04 	call	0x922	; 0x922 <checkFinger>
				if(mainUser){
     f0e:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <mainUser>
     f12:	88 23       	and	r24, r24
     f14:	09 f4       	brne	.+2      	; 0xf18 <main+0x1ac>
     f16:	4c c0       	rjmp	.+152    	; 0xfb0 <main+0x244>
					id = getID();
     f18:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <getID>
     f1c:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <id>
					if(id == mainUserID){
     f20:	48 2f       	mov	r20, r24
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     f28:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     f2c:	42 17       	cp	r20, r18
     f2e:	53 07       	cpc	r21, r19
     f30:	d1 f5       	brne	.+116    	; 0xfa6 <main+0x23a>
						lcd_send_info("  Czy nadpisac  ", "palec dla ADMIN?");
     f32:	69 e9       	ldi	r22, 0x99	; 153
     f34:	73 e0       	ldi	r23, 0x03	; 3
     f36:	8a ea       	ldi	r24, 0xAA	; 170
     f38:	93 e0       	ldi	r25, 0x03	; 3
     f3a:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	97 ea       	ldi	r25, 0xA7	; 167
     f42:	e1 e6       	ldi	r30, 0x61	; 97
     f44:	81 50       	subi	r24, 0x01	; 1
     f46:	90 40       	sbci	r25, 0x00	; 0
     f48:	e0 40       	sbci	r30, 0x00	; 0
     f4a:	e1 f7       	brne	.-8      	; 0xf44 <main+0x1d8>
     f4c:	00 c0       	rjmp	.+0      	; 0xf4e <main+0x1e2>
     f4e:	00 00       	nop
						_delay_ms(2000);
						lcd_send_info("B1- NIE  B2- TAK", "");
     f50:	60 e1       	ldi	r22, 0x10	; 16
     f52:	73 e0       	ldi	r23, 0x03	; 3
     f54:	8b eb       	ldi	r24, 0xBB	; 187
     f56:	93 e0       	ldi	r25, 0x03	; 3
     f58:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
						while(true){
							if(bit_is_clear(PINB, 0)){
     f5c:	18 99       	sbic	0x03, 0	; 3
     f5e:	14 c0       	rjmp	.+40     	; 0xf88 <main+0x21c>
								lcd_send_info("Drzwi zamkniete", "");
     f60:	60 e1       	ldi	r22, 0x10	; 16
     f62:	73 e0       	ldi	r23, 0x03	; 3
     f64:	8b e8       	ldi	r24, 0x8B	; 139
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
								removeFinger = false;
     f6c:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <removeFinger>
								mainUser = false;
     f70:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <mainUser>
     f74:	ff ef       	ldi	r31, 0xFF	; 255
     f76:	23 ec       	ldi	r18, 0xC3	; 195
     f78:	89 e0       	ldi	r24, 0x09	; 9
     f7a:	f1 50       	subi	r31, 0x01	; 1
     f7c:	20 40       	sbci	r18, 0x00	; 0
     f7e:	80 40       	sbci	r24, 0x00	; 0
     f80:	e1 f7       	brne	.-8      	; 0xf7a <main+0x20e>
     f82:	00 c0       	rjmp	.+0      	; 0xf84 <main+0x218>
     f84:	00 00       	nop
     f86:	3f cf       	rjmp	.-386    	; 0xe06 <main+0x9a>
								_delay_ms(200);
								break;
							}
							else if(bit_is_clear(PINB, 2)){
     f88:	1a 99       	sbic	0x03, 2	; 3
     f8a:	e8 cf       	rjmp	.-48     	; 0xf5c <main+0x1f0>
								newFinger(mainUserID);
     f8c:	f8 01       	movw	r30, r16
     f8e:	80 81       	ld	r24, Z
     f90:	0e 94 b4 02 	call	0x568	; 0x568 <newFinger>
								mainUser = false;
     f94:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <mainUser>
								lcd_send_info("Drzwi zamkniete", "");
     f98:	60 e1       	ldi	r22, 0x10	; 16
     f9a:	73 e0       	ldi	r23, 0x03	; 3
     f9c:	8b e8       	ldi	r24, 0x8B	; 139
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
								break;
     fa4:	30 cf       	rjmp	.-416    	; 0xe06 <main+0x9a>
							}
						}
					}
					else{
						deleteFinger(id);
     fa6:	0e 94 36 04 	call	0x86c	; 0x86c <deleteFinger>
						mainUser = false;
     faa:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <mainUser>
     fae:	2b cf       	rjmp	.-426    	; 0xe06 <main+0x9a>
					}
				}
				else{
					lcd_send_info("Palec nie nalezy", "    do: ADMIN   ");
     fb0:	67 e7       	ldi	r22, 0x77	; 119
     fb2:	73 e0       	ldi	r23, 0x03	; 3
     fb4:	88 e8       	ldi	r24, 0x88	; 136
     fb6:	93 e0       	ldi	r25, 0x03	; 3
     fb8:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
					removeFinger = false;
     fbc:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <removeFinger>
     fc0:	ff ef       	ldi	r31, 0xFF	; 255
     fc2:	27 ea       	ldi	r18, 0xA7	; 167
     fc4:	81 e6       	ldi	r24, 0x61	; 97
     fc6:	f1 50       	subi	r31, 0x01	; 1
     fc8:	20 40       	sbci	r18, 0x00	; 0
     fca:	80 40       	sbci	r24, 0x00	; 0
     fcc:	e1 f7       	brne	.-8      	; 0xfc6 <main+0x25a>
     fce:	00 c0       	rjmp	.+0      	; 0xfd0 <main+0x264>
     fd0:	00 00       	nop
					_delay_ms(2000);
					lcd_send_info("Drzwi zamkniete", "");
     fd2:	60 e1       	ldi	r22, 0x10	; 16
     fd4:	73 e0       	ldi	r23, 0x03	; 3
     fd6:	8b e8       	ldi	r24, 0x8B	; 139
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
     fde:	13 cf       	rjmp	.-474    	; 0xe06 <main+0x9a>
				}
			}
		}
		//gdy drzwi sa otwarte
		else if(!doorLocked){
     fe0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <doorLocked>
     fe4:	81 11       	cpse	r24, r1
     fe6:	0f cf       	rjmp	.-482    	; 0xe06 <main+0x9a>
			if(bit_is_clear(PINB, 0)){
     fe8:	18 99       	sbic	0x03, 0	; 3
     fea:	0d cf       	rjmp	.-486    	; 0xe06 <main+0x9a>
				doorLocked = true;
     fec:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <doorLocked>
				PORTB ^= 1 << PINB3;
     ff0:	85 b1       	in	r24, 0x05	; 5
     ff2:	8d 27       	eor	r24, r29
     ff4:	85 b9       	out	0x05, r24	; 5
				lcd_send_info("Drzwi zamkniete", "");
     ff6:	60 e1       	ldi	r22, 0x10	; 16
     ff8:	73 e0       	ldi	r23, 0x03	; 3
     ffa:	8b e8       	ldi	r24, 0x8B	; 139
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	0e 94 9b 02 	call	0x536	; 0x536 <lcd_send_info>
    1002:	9f ef       	ldi	r25, 0xFF	; 255
    1004:	e3 ed       	ldi	r30, 0xD3	; 211
    1006:	f0 e3       	ldi	r31, 0x30	; 48
    1008:	91 50       	subi	r25, 0x01	; 1
    100a:	e0 40       	sbci	r30, 0x00	; 0
    100c:	f0 40       	sbci	r31, 0x00	; 0
    100e:	e1 f7       	brne	.-8      	; 0x1008 <main+0x29c>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <main+0x2a6>
    1012:	00 00       	nop
    1014:	f8 ce       	rjmp	.-528    	; 0xe06 <main+0x9a>

00001016 <initUART>:
#include "uart.h"
#include <avr/io.h>


void initUART(){
	DDRD |= (1 << PIND0);
    1016:	50 9a       	sbi	0x0a, 0	; 10
	DDRD &= ~ (1 << PIND1);
    1018:	51 98       	cbi	0x0a, 1	; 10

	UBRR0H = ((_UBRR) & 0xF00);
    101a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t) ((_UBRR) & 0xFF);
    101e:	80 e1       	ldi	r24, 0x10	; 16
    1020:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	TX_START();
    1024:	e1 ec       	ldi	r30, 0xC1	; 193
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	88 60       	ori	r24, 0x08	; 8
    102c:	80 83       	st	Z, r24
	RX_START();
    102e:	80 81       	ld	r24, Z
    1030:	80 61       	ori	r24, 0x10	; 16
    1032:	80 83       	st	Z, r24

	UCSR0C = (0x03 << UCSZ00);
    1034:	86 e0       	ldi	r24, 0x06	; 6
    1036:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    103a:	08 95       	ret

0000103c <getByte>:

}

uint8_t getByte(){
	//sprawdz czy zostalo cos otrzymane
	while (!(UCSR0A & (1 << RXC0)));
    103c:	e0 ec       	ldi	r30, 0xC0	; 192
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	88 23       	and	r24, r24
    1044:	ec f7       	brge	.-6      	; 0x1040 <getByte+0x4>
	return (uint8_t) UDR0;
    1046:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
    104a:	08 95       	ret

0000104c <putByte>:

void putByte(uint8_t data){
	//zostan az rejestr nie bedzie pusty
	while (!(UCSR0A & (1 << UDRE0)));
    104c:	e0 ec       	ldi	r30, 0xC0	; 192
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	90 81       	ld	r25, Z
    1052:	95 ff       	sbrs	r25, 5
    1054:	fd cf       	rjmp	.-6      	; 0x1050 <putByte+0x4>
	UDR0 = data;
    1056:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    105a:	08 95       	ret

0000105c <__umulhisi3>:
    105c:	a2 9f       	mul	r26, r18
    105e:	b0 01       	movw	r22, r0
    1060:	b3 9f       	mul	r27, r19
    1062:	c0 01       	movw	r24, r0
    1064:	a3 9f       	mul	r26, r19
    1066:	70 0d       	add	r23, r0
    1068:	81 1d       	adc	r24, r1
    106a:	11 24       	eor	r1, r1
    106c:	91 1d       	adc	r25, r1
    106e:	b2 9f       	mul	r27, r18
    1070:	70 0d       	add	r23, r0
    1072:	81 1d       	adc	r24, r1
    1074:	11 24       	eor	r1, r1
    1076:	91 1d       	adc	r25, r1
    1078:	08 95       	ret

0000107a <itoa>:
    107a:	45 32       	cpi	r20, 0x25	; 37
    107c:	51 05       	cpc	r21, r1
    107e:	20 f4       	brcc	.+8      	; 0x1088 <itoa+0xe>
    1080:	42 30       	cpi	r20, 0x02	; 2
    1082:	10 f0       	brcs	.+4      	; 0x1088 <itoa+0xe>
    1084:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__itoa_ncheck>
    1088:	fb 01       	movw	r30, r22
    108a:	10 82       	st	Z, r1
    108c:	cb 01       	movw	r24, r22
    108e:	08 95       	ret

00001090 <__itoa_ncheck>:
    1090:	bb 27       	eor	r27, r27
    1092:	4a 30       	cpi	r20, 0x0A	; 10
    1094:	31 f4       	brne	.+12     	; 0x10a2 <__itoa_ncheck+0x12>
    1096:	99 23       	and	r25, r25
    1098:	22 f4       	brpl	.+8      	; 0x10a2 <__itoa_ncheck+0x12>
    109a:	bd e2       	ldi	r27, 0x2D	; 45
    109c:	90 95       	com	r25
    109e:	81 95       	neg	r24
    10a0:	9f 4f       	sbci	r25, 0xFF	; 255
    10a2:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__utoa_common>

000010a6 <__utoa_ncheck>:
    10a6:	bb 27       	eor	r27, r27

000010a8 <__utoa_common>:
    10a8:	fb 01       	movw	r30, r22
    10aa:	55 27       	eor	r21, r21
    10ac:	aa 27       	eor	r26, r26
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	aa 1f       	adc	r26, r26
    10b4:	a4 17       	cp	r26, r20
    10b6:	10 f0       	brcs	.+4      	; 0x10bc <__utoa_common+0x14>
    10b8:	a4 1b       	sub	r26, r20
    10ba:	83 95       	inc	r24
    10bc:	50 51       	subi	r21, 0x10	; 16
    10be:	b9 f7       	brne	.-18     	; 0x10ae <__utoa_common+0x6>
    10c0:	a0 5d       	subi	r26, 0xD0	; 208
    10c2:	aa 33       	cpi	r26, 0x3A	; 58
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <__utoa_common+0x20>
    10c6:	a9 5d       	subi	r26, 0xD9	; 217
    10c8:	a1 93       	st	Z+, r26
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	79 f7       	brne	.-34     	; 0x10ac <__utoa_common+0x4>
    10ce:	b1 11       	cpse	r27, r1
    10d0:	b1 93       	st	Z+, r27
    10d2:	11 92       	st	Z+, r1
    10d4:	cb 01       	movw	r24, r22
    10d6:	0c 94 6d 08 	jmp	0x10da	; 0x10da <strrev>

000010da <strrev>:
    10da:	dc 01       	movw	r26, r24
    10dc:	fc 01       	movw	r30, r24
    10de:	67 2f       	mov	r22, r23
    10e0:	71 91       	ld	r23, Z+
    10e2:	77 23       	and	r23, r23
    10e4:	e1 f7       	brne	.-8      	; 0x10de <strrev+0x4>
    10e6:	32 97       	sbiw	r30, 0x02	; 2
    10e8:	04 c0       	rjmp	.+8      	; 0x10f2 <strrev+0x18>
    10ea:	7c 91       	ld	r23, X
    10ec:	6d 93       	st	X+, r22
    10ee:	70 83       	st	Z, r23
    10f0:	62 91       	ld	r22, -Z
    10f2:	ae 17       	cp	r26, r30
    10f4:	bf 07       	cpc	r27, r31
    10f6:	c8 f3       	brcs	.-14     	; 0x10ea <strrev+0x10>
    10f8:	08 95       	ret

000010fa <_exit>:
    10fa:	f8 94       	cli

000010fc <__stop_program>:
    10fc:	ff cf       	rjmp	.-2      	; 0x10fc <__stop_program>
