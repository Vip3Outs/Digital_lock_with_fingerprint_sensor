
arduino_bootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002cc  00800100  000010c2  00001156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  008003cc  008003cc  00001422  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001422  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032de  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c50  00000000  00000000  000048e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000124c  00000000  00000000  00005532  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  00006780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065a  00000000  00000000  00006a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000144f  00000000  00000000  000070f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00008545  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ec       	ldi	r30, 0xC2	; 194
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 3c       	cpi	r26, 0xCC	; 204
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	ac ec       	ldi	r26, 0xCC	; 204
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 3d       	cpi	r26, 0xDC	; 220
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 98 06 	call	0xd30	; 0xd30 <main>
      9e:	0c 94 5f 08 	jmp	0x10be	; 0x10be <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <fps_transmit_header>:
#include "fps.h"

void fps_transmit_header(){
	//starting code
	putByte(0xEF);
      a6:	8f ee       	ldi	r24, 0xEF	; 239
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0x01);
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//address
	putByte(0xFF);
      b6:	8f ef       	ldi	r24, 0xFF	; 255
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0xFF);
      be:	8f ef       	ldi	r24, 0xFF	; 255
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0xFF);
      c6:	8f ef       	ldi	r24, 0xFF	; 255
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0xFF);
      ce:	8f ef       	ldi	r24, 0xFF	; 255
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//package identifier
	putByte(0x01);
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
      de:	08 95       	ret

000000e0 <fps_confirmation>:
}

void fps_confirmation(uint8_t instruction_code){
      e0:	1f 93       	push	r17
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	18 2f       	mov	r17, r24
      e8:	c9 e0       	ldi	r28, 0x09	; 9
      ea:	d0 e0       	ldi	r29, 0x00	; 0

	for(int i = 0; i<9; ++i){
		getByte();
      ec:	0e 94 00 08 	call	0x1000	; 0x1000 <getByte>
      f0:	21 97       	sbiw	r28, 0x01	; 1
	putByte(0x01);
}

void fps_confirmation(uint8_t instruction_code){

	for(int i = 0; i<9; ++i){
      f2:	e1 f7       	brne	.-8      	; 0xec <fps_confirmation+0xc>
		getByte();
	}
	//confirmation code
	tmp[0] = getByte();
      f4:	0e 94 00 08 	call	0x1000	; 0x1000 <getByte>
      f8:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <tmp>
	if(instruction_code == 0x1D){
      fc:	1d 31       	cpi	r17, 0x1D	; 29
      fe:	49 f4       	brne	.+18     	; 0x112 <fps_confirmation+0x32>
		tmp[1] = getByte();
     100:	0e 94 00 08 	call	0x1000	; 0x1000 <getByte>
     104:	c2 ed       	ldi	r28, 0xD2	; 210
     106:	d3 e0       	ldi	r29, 0x03	; 3
     108:	89 83       	std	Y+1, r24	; 0x01
		tmp[2] = getByte();
     10a:	0e 94 00 08 	call	0x1000	; 0x1000 <getByte>
     10e:	8a 83       	std	Y+2, r24	; 0x02
     110:	10 c0       	rjmp	.+32     	; 0x132 <fps_confirmation+0x52>
	}
	if(instruction_code == 0x04){
     112:	14 30       	cpi	r17, 0x04	; 4
     114:	71 f4       	brne	.+28     	; 0x132 <fps_confirmation+0x52>
		//page_ID
		tmp[1] = getByte();
     116:	0e 94 00 08 	call	0x1000	; 0x1000 <getByte>
     11a:	c2 ed       	ldi	r28, 0xD2	; 210
     11c:	d3 e0       	ldi	r29, 0x03	; 3
     11e:	89 83       	std	Y+1, r24	; 0x01
		tmp[2] = getByte();
     120:	0e 94 00 08 	call	0x1000	; 0x1000 <getByte>
     124:	8a 83       	std	Y+2, r24	; 0x02
		//MatchScore
		tmp[3] = getByte();
     126:	0e 94 00 08 	call	0x1000	; 0x1000 <getByte>
     12a:	8b 83       	std	Y+3, r24	; 0x03
		tmp[4] = getByte();
     12c:	0e 94 00 08 	call	0x1000	; 0x1000 <getByte>
     130:	8c 83       	std	Y+4, r24	; 0x04
	}
	//checksum
	getByte();
     132:	0e 94 00 08 	call	0x1000	; 0x1000 <getByte>
	getByte();
     136:	0e 94 00 08 	call	0x1000	; 0x1000 <getByte>
}
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	1f 91       	pop	r17
     140:	08 95       	ret

00000142 <fps_read_finger>:



void fps_read_finger(){
	//header
	fps_transmit_header();
     142:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	putByte(0x00);
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0x03);
     14e:	83 e0       	ldi	r24, 0x03	; 3
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//instruction code
	putByte(0x01);
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//sum
	putByte(0x00);
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0x05);
     166:	85 e0       	ldi	r24, 0x05	; 5
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	
	fps_confirmation(0x01);
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
     174:	08 95       	ret

00000176 <fps_img2TZ>:
}

void fps_img2TZ(uint8_t buffer){
     176:	cf 93       	push	r28
     178:	c8 2f       	mov	r28, r24
	//header
	fps_transmit_header();
     17a:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	putByte(0x00);
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0x04);
     186:	84 e0       	ldi	r24, 0x04	; 4
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//instruction code
	putByte(0x02);
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//bufferID
	putByte(buffer);
     196:	8c 2f       	mov	r24, r28
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//sum
	buffer+=7;
	putByte(buffer & 0xFF00);
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(buffer & 0x00FF);
     1a6:	87 e0       	ldi	r24, 0x07	; 7
     1a8:	8c 0f       	add	r24, r28
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
		
	fps_confirmation(0x02);
     1b0:	82 e0       	ldi	r24, 0x02	; 2
     1b2:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
}
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <fps_search>:

void fps_search(){
	//header
	fps_transmit_header();
     1ba:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	putByte(0x00);
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0x08);
     1c6:	88 e0       	ldi	r24, 0x08	; 8
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//instruction
	putByte(0x04);
     1ce:	84 e0       	ldi	r24, 0x04	; 4
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//buffer_ID
	putByte(0x01);
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//start location
	putByte(0x00);
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0x01);
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//end location
	putByte(0x00);
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0xFF);
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//sum
	putByte(0x01);
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0x0E);
     206:	8e e0       	ldi	r24, 0x0E	; 14
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>

	fps_confirmation(0x04);
     20e:	84 e0       	ldi	r24, 0x04	; 4
     210:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
     214:	08 95       	ret

00000216 <fps_genModel>:
}

void fps_genModel(){
	//header
	fps_transmit_header();
     216:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	putByte(0x00);
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0x03);
     222:	83 e0       	ldi	r24, 0x03	; 3
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//instruction
	putByte(0x05);
     22a:	85 e0       	ldi	r24, 0x05	; 5
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//sum
	putByte(0x00);
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0x09);
     23a:	89 e0       	ldi	r24, 0x09	; 9
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	
	fps_confirmation(0x05);
     242:	85 e0       	ldi	r24, 0x05	; 5
     244:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
     248:	08 95       	ret

0000024a <fps_storeModel>:
}

void fps_storeModel(uint16_t storeID){
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	ec 01       	movw	r28, r24
	//header
	fps_transmit_header();
     250:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	putByte(0x00);
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0x06);
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//instruction
	putByte(0x06);
     264:	86 e0       	ldi	r24, 0x06	; 6
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//bufferID
	putByte(0x01);
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//location number
	putByte(storeID & 0xFF00);
     274:	ce 01       	movw	r24, r28
     276:	88 27       	eor	r24, r24
     278:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(storeID & 0x00FF);
     27c:	ce 01       	movw	r24, r28
     27e:	99 27       	eor	r25, r25
     280:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//sum
	storeID += 14;
     284:	2e 96       	adiw	r28, 0x0e	; 14
	putByte(storeID & 0xFF00);
     286:	ce 01       	movw	r24, r28
     288:	88 27       	eor	r24, r24
     28a:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(storeID & 0x00FF);
     28e:	ce 01       	movw	r24, r28
     290:	99 27       	eor	r25, r25
     292:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	
	fps_confirmation(0x06);
     296:	86 e0       	ldi	r24, 0x06	; 6
     298:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <fps_deleteModel>:

void fps_deleteModel(uint16_t deleteID){
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	ec 01       	movw	r28, r24
	//header
	fps_transmit_header();
     2a8:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	putByte(0x00);
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0x07);
     2b4:	87 e0       	ldi	r24, 0x07	; 7
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//instruction
	putByte(0x0c);
     2bc:	8c e0       	ldi	r24, 0x0C	; 12
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//pageID
	putByte(deleteID & 0xFF00);
     2c4:	ce 01       	movw	r24, r28
     2c6:	88 27       	eor	r24, r24
     2c8:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(deleteID & 0x00FF);
     2cc:	ce 01       	movw	r24, r28
     2ce:	99 27       	eor	r25, r25
     2d0:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//number of templates to be deleted
	putByte(0x00);
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0x01);
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//sum
	deleteID += 21;
     2e4:	65 96       	adiw	r28, 0x15	; 21
	putByte(deleteID & 0xFF00);
     2e6:	ce 01       	movw	r24, r28
     2e8:	88 27       	eor	r24, r24
     2ea:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(deleteID & 0x00FF);
     2ee:	ce 01       	movw	r24, r28
     2f0:	99 27       	eor	r25, r25
     2f2:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	
	fps_confirmation(0x0c);
     2f6:	8c e0       	ldi	r24, 0x0C	; 12
     2f8:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
}
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <fps_templateNum>:

void fps_templateNum(){
	//header
	fps_transmit_header();
     302:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	putByte(0x00);
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0x03);
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//instruction
	putByte(0x1D);	
     316:	8d e1       	ldi	r24, 0x1D	; 29
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	//sum
	putByte(0x00);
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	putByte(0x21);
     326:	81 e2       	ldi	r24, 0x21	; 33
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 08 08 	call	0x1010	; 0x1010 <putByte>
	
	fps_confirmation(0x1D);
     32e:	8d e1       	ldi	r24, 0x1D	; 29
     330:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
     334:	08 95       	ret

00000336 <i2c_init>:
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    while ((TWCR & (1 << TWINT)) == 0);
}

void i2c_stop_condition(){
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     336:	8f ef       	ldi	r24, 0xFF	; 255
     338:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     33c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     340:	08 95       	ret

00000342 <i2c_start_condition>:
     342:	84 ea       	ldi	r24, 0xA4	; 164
     344:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     348:	ec eb       	ldi	r30, 0xBC	; 188
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	88 23       	and	r24, r24
     350:	ec f7       	brge	.-6      	; 0x34c <i2c_start_condition+0xa>
     352:	08 95       	ret

00000354 <i2c_send_byte>:
}

void i2c_send_byte(unsigned char byte){														
	TWDR = byte;
     354:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = (1 << TWINT) | (1 << TWEN);
     358:	84 e8       	ldi	r24, 0x84	; 132
     35a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & (1 << TWINT)) == 0);
     35e:	ec eb       	ldi	r30, 0xBC	; 188
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 81       	ld	r24, Z
     364:	88 23       	and	r24, r24
     366:	ec f7       	brge	.-6      	; 0x362 <i2c_send_byte+0xe>
}
     368:	08 95       	ret

0000036a <i2c_send_packet>:

void i2c_send_packet(unsigned char value, unsigned char address) {
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	c8 2f       	mov	r28, r24
     370:	d6 2f       	mov	r29, r22
	i2c_start_condition();
     372:	0e 94 a1 01 	call	0x342	; 0x342 <i2c_start_condition>
	i2c_send_byte(address);
     376:	8d 2f       	mov	r24, r29
     378:	0e 94 aa 01 	call	0x354	; 0x354 <i2c_send_byte>
	i2c_send_byte(value);
     37c:	8c 2f       	mov	r24, r28
     37e:	0e 94 aa 01 	call	0x354	; 0x354 <i2c_send_byte>
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    while ((TWCR & (1 << TWINT)) == 0);
}

void i2c_stop_condition(){
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     382:	84 e9       	ldi	r24, 0x94	; 148
     384:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
void i2c_send_packet(unsigned char value, unsigned char address) {
	i2c_start_condition();
	i2c_send_byte(address);
	i2c_send_byte(value);
	i2c_stop_condition();
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <lcd_transmit_header>:
#include "lcd.h"
#include <util/delay.h>

uint8_t value;

void lcd_transmit_header(char tmp){
     38e:	cf 93       	push	r28
     390:	c8 2f       	mov	r28, r24
	i2c_send_packet(value |= 0x04, SLAVE_WRITE_ADDRESS);
     392:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <value>
     396:	84 60       	ori	r24, 0x04	; 4
     398:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <value>
     39c:	6e e7       	ldi	r22, 0x7E	; 126
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 b5 01 	call	0x36a	; 0x36a <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3a6:	30 e1       	ldi	r19, 0x10	; 16
     3a8:	3a 95       	dec	r19
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <lcd_transmit_header+0x1a>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <lcd_transmit_header+0x20>
	_delay_us(50);
	i2c_send_packet(value | (tmp << 4), SLAVE_WRITE_ADDRESS);
     3ae:	20 91 d7 03 	lds	r18, 0x03D7	; 0x8003d7 <value>
     3b2:	30 e1       	ldi	r19, 0x10	; 16
     3b4:	c3 9f       	mul	r28, r19
     3b6:	c0 01       	movw	r24, r0
     3b8:	11 24       	eor	r1, r1
     3ba:	6e e7       	ldi	r22, 0x7E	; 126
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	82 2b       	or	r24, r18
     3c0:	0e 94 b5 01 	call	0x36a	; 0x36a <i2c_send_packet>
	i2c_send_packet(value &= ~0x04, SLAVE_WRITE_ADDRESS);
     3c4:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <value>
     3c8:	8b 7f       	andi	r24, 0xFB	; 251
     3ca:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <value>
     3ce:	6e e7       	ldi	r22, 0x7E	; 126
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 b5 01 	call	0x36a	; 0x36a <i2c_send_packet>
     3d8:	80 e1       	ldi	r24, 0x10	; 16
     3da:	8a 95       	dec	r24
     3dc:	f1 f7       	brne	.-4      	; 0x3da <lcd_transmit_header+0x4c>
     3de:	00 c0       	rjmp	.+0      	; 0x3e0 <lcd_transmit_header+0x52>
	_delay_us(50);
}
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <lcd_send_byte>:

void lcd_send_byte(char tmp){
     3e4:	cf 93       	push	r28
     3e6:	c8 2f       	mov	r28, r24
	i2c_send_packet(value &= ~0x01, SLAVE_WRITE_ADDRESS); 
     3e8:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <value>
     3ec:	8e 7f       	andi	r24, 0xFE	; 254
     3ee:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <value>
     3f2:	6e e7       	ldi	r22, 0x7E	; 126
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 b5 01 	call	0x36a	; 0x36a <i2c_send_packet>
	lcd_transmit_header(tmp >> 4);
     3fc:	8c 2f       	mov	r24, r28
     3fe:	82 95       	swap	r24
     400:	8f 70       	andi	r24, 0x0F	; 15
     402:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_transmit_header>
	lcd_transmit_header(tmp);
     406:	8c 2f       	mov	r24, r28
     408:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_transmit_header>
}
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <lcd_send_char>:

void lcd_send_char(char tmp){
     410:	cf 93       	push	r28
     412:	c8 2f       	mov	r28, r24
	i2c_send_packet (value |= 0x01, SLAVE_WRITE_ADDRESS);
     414:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <value>
     418:	81 60       	ori	r24, 0x01	; 1
     41a:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <value>
     41e:	6e e7       	ldi	r22, 0x7E	; 126
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 b5 01 	call	0x36a	; 0x36a <i2c_send_packet>
	lcd_transmit_header(tmp >> 4);
     428:	8c 2f       	mov	r24, r28
     42a:	82 95       	swap	r24
     42c:	8f 70       	andi	r24, 0x0F	; 15
     42e:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_transmit_header>
	lcd_transmit_header(tmp);
     432:	8c 2f       	mov	r24, r28
     434:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_transmit_header>
}
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <lcd_init>:

void lcd_init(){
	value = 0;
     43c:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <value>
	i2c_init();
     440:	0e 94 9b 01 	call	0x336	; 0x336 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     444:	85 ea       	ldi	r24, 0xA5	; 165
     446:	9e e0       	ldi	r25, 0x0E	; 14
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <lcd_init+0xc>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <lcd_init+0x12>
     44e:	00 00       	nop
	_delay_ms(15);
	lcd_transmit_header(0b00000011);	//interfejs 4bitowy
     450:	83 e0       	ldi	r24, 0x03	; 3
     452:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_transmit_header>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     456:	84 e6       	ldi	r24, 0x64	; 100
     458:	94 e0       	ldi	r25, 0x04	; 4
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	f1 f7       	brne	.-4      	; 0x45a <lcd_init+0x1e>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <lcd_init+0x24>
     460:	00 00       	nop
	_delay_us(4500);
	lcd_transmit_header(0b00000011);					
     462:	83 e0       	ldi	r24, 0x03	; 3
     464:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_transmit_header>
     468:	91 e2       	ldi	r25, 0x21	; 33
     46a:	9a 95       	dec	r25
     46c:	f1 f7       	brne	.-4      	; 0x46a <lcd_init+0x2e>
     46e:	00 00       	nop
	_delay_us(100);							
	lcd_transmit_header(0b00000011);					
     470:	83 e0       	ldi	r24, 0x03	; 3
     472:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_transmit_header>
	lcd_transmit_header(0b00000010);			
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_transmit_header>
	lcd_send_byte(0b00101000);			//rozmiar 16x2 i 5x8dot (0x28)	
     47c:	88 e2       	ldi	r24, 0x28	; 40
     47e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_send_byte>
	lcd_send_byte(0b00001100);			//wylaczenie kursora i miganie kursora (0x0C)
     482:	8c e0       	ldi	r24, 0x0C	; 12
     484:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_send_byte>
	lcd_send_byte(0b00000110);			//autoinkrementacja kursora (0x06)
     488:	86 e0       	ldi	r24, 0x06	; 6
     48a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_send_byte>
	i2c_send_packet(value |= 0x08, SLAVE_WRITE_ADDRESS);	
     48e:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <value>
     492:	88 60       	ori	r24, 0x08	; 8
     494:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <value>
     498:	6e e7       	ldi	r22, 0x7E	; 126
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 b5 01 	call	0x36a	; 0x36a <i2c_send_packet>
	i2c_send_packet(value &=~ 0x02, SLAVE_WRITE_ADDRESS);
     4a2:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <value>
     4a6:	8d 7f       	andi	r24, 0xFD	; 253
     4a8:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <value>
     4ac:	6e e7       	ldi	r22, 0x7E	; 126
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 b5 01 	call	0x36a	; 0x36a <i2c_send_packet>
     4b6:	08 95       	ret

000004b8 <lcd_clear>:
}

void lcd_clear(){
	lcd_send_byte(0x01);
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_send_byte>
     4be:	86 e7       	ldi	r24, 0x76	; 118
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <lcd_clear+0xa>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <lcd_clear+0x10>
     4c8:	00 00       	nop
     4ca:	08 95       	ret

000004cc <lcd_setCursor>:
	_delay_us(1500);
}

void lcd_setCursor(char col, char row){
	char tmp;
	tmp = 0x40 * row + col;
     4cc:	90 e4       	ldi	r25, 0x40	; 64
     4ce:	69 9f       	mul	r22, r25
     4d0:	80 0d       	add	r24, r0
     4d2:	11 24       	eor	r1, r1
	tmp |= 0x80;
	lcd_send_byte(tmp);
     4d4:	80 68       	ori	r24, 0x80	; 128
     4d6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_send_byte>
     4da:	08 95       	ret

000004dc <lcd_send_string>:
}

void lcd_send_string(const char *str){
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	ec 01       	movw	r28, r24
	while(*str != 0)
     4e2:	88 81       	ld	r24, Y
     4e4:	88 23       	and	r24, r24
     4e6:	31 f0       	breq	.+12     	; 0x4f4 <lcd_send_string+0x18>
     4e8:	21 96       	adiw	r28, 0x01	; 1
	lcd_send_char(*str++);
     4ea:	0e 94 08 02 	call	0x410	; 0x410 <lcd_send_char>
	tmp |= 0x80;
	lcd_send_byte(tmp);
}

void lcd_send_string(const char *str){
	while(*str != 0)
     4ee:	89 91       	ld	r24, Y+
     4f0:	81 11       	cpse	r24, r1
     4f2:	fb cf       	rjmp	.-10     	; 0x4ea <lcd_send_string+0xe>
	lcd_send_char(*str++);
}
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <lcd_send_info>:

void lcd_send_info(const char *line1, const char *line2){
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	8c 01       	movw	r16, r24
     504:	eb 01       	movw	r28, r22
	lcd_clear();
     506:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <lcd_clear>

void lcd_setCursor(char col, char row){
	char tmp;
	tmp = 0x40 * row + col;
	tmp |= 0x80;
	lcd_send_byte(tmp);
     50a:	80 e8       	ldi	r24, 0x80	; 128
     50c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_send_byte>
}

void lcd_send_info(const char *line1, const char *line2){
	lcd_clear();
	lcd_setCursor(0,0);
	lcd_send_string(line1);
     510:	c8 01       	movw	r24, r16
     512:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>

void lcd_setCursor(char col, char row){
	char tmp;
	tmp = 0x40 * row + col;
	tmp |= 0x80;
	lcd_send_byte(tmp);
     516:	80 ec       	ldi	r24, 0xC0	; 192
     518:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_send_byte>
void lcd_send_info(const char *line1, const char *line2){
	lcd_clear();
	lcd_setCursor(0,0);
	lcd_send_string(line1);
	lcd_setCursor(0,1);
	lcd_send_string(line2);
     51c:	ce 01       	movw	r24, r28
     51e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	08 95       	ret

0000052c <newFinger>:
		}
	}
	return 0;
}//Koniec main.c

void newFinger(uint8_t id){
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	d8 2f       	mov	r29, r24
	lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
     536:	63 e0       	ldi	r22, 0x03	; 3
     538:	71 e0       	ldi	r23, 0x01	; 1
     53a:	84 e1       	ldi	r24, 0x14	; 20
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
	fps_read_finger();
     542:	0e 94 a1 00 	call	0x142	; 0x142 <fps_read_finger>
	uint8_t timer = 0;
     546:	c0 e0       	ldi	r28, 0x00	; 0
	while(tmp[0] == 0x02){
     548:	02 ed       	ldi	r16, 0xD2	; 210
     54a:	13 e0       	ldi	r17, 0x03	; 3
     54c:	4a c0       	rjmp	.+148    	; 0x5e2 <newFinger+0xb6>
		fps_read_finger();
     54e:	0e 94 a1 00 	call	0x142	; 0x142 <fps_read_finger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     552:	2f ef       	ldi	r18, 0xFF	; 255
     554:	81 ee       	ldi	r24, 0xE1	; 225
     556:	94 e0       	ldi	r25, 0x04	; 4
     558:	21 50       	subi	r18, 0x01	; 1
     55a:	80 40       	sbci	r24, 0x00	; 0
     55c:	90 40       	sbci	r25, 0x00	; 0
     55e:	e1 f7       	brne	.-8      	; 0x558 <newFinger+0x2c>
     560:	00 c0       	rjmp	.+0      	; 0x562 <newFinger+0x36>
     562:	00 00       	nop
		_delay_ms(100);
		timer += 1;
     564:	cf 5f       	subi	r28, 0xFF	; 255
		if(timer == 10){
     566:	ca 30       	cpi	r28, 0x0A	; 10
     568:	39 f4       	brne	.+14     	; 0x578 <newFinger+0x4c>
			lcd_send_info("  Umiesc palec  ", "Skanowanie: ----");
     56a:	65 e2       	ldi	r22, 0x25	; 37
     56c:	71 e0       	ldi	r23, 0x01	; 1
     56e:	84 e1       	ldi	r24, 0x14	; 20
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     576:	12 c0       	rjmp	.+36     	; 0x59c <newFinger+0x70>
		}
		if(timer == 20){
     578:	c4 31       	cpi	r28, 0x14	; 20
     57a:	39 f4       	brne	.+14     	; 0x58a <newFinger+0x5e>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:  ---");
     57c:	66 e3       	ldi	r22, 0x36	; 54
     57e:	71 e0       	ldi	r23, 0x01	; 1
     580:	84 e1       	ldi	r24, 0x14	; 20
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     588:	12 c0       	rjmp	.+36     	; 0x5ae <newFinger+0x82>
		}
		if(timer == 30){
     58a:	ce 31       	cpi	r28, 0x1E	; 30
     58c:	39 f4       	brne	.+14     	; 0x59c <newFinger+0x70>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:   --");
     58e:	67 e4       	ldi	r22, 0x47	; 71
     590:	71 e0       	ldi	r23, 0x01	; 1
     592:	84 e1       	ldi	r24, 0x14	; 20
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     59a:	23 c0       	rjmp	.+70     	; 0x5e2 <newFinger+0xb6>
		}
		if(timer == 40){
     59c:	c8 32       	cpi	r28, 0x28	; 40
     59e:	39 f4       	brne	.+14     	; 0x5ae <newFinger+0x82>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:    -");
     5a0:	68 e5       	ldi	r22, 0x58	; 88
     5a2:	71 e0       	ldi	r23, 0x01	; 1
     5a4:	84 e1       	ldi	r24, 0x14	; 20
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     5ac:	1a c0       	rjmp	.+52     	; 0x5e2 <newFinger+0xb6>
		}
		if(timer == 49){
     5ae:	c1 33       	cpi	r28, 0x31	; 49
     5b0:	c1 f4       	brne	.+48     	; 0x5e2 <newFinger+0xb6>
			lcd_send_info("  Brak palca na ", " czytniku linii ");
     5b2:	69 e6       	ldi	r22, 0x69	; 105
     5b4:	71 e0       	ldi	r23, 0x01	; 1
     5b6:	8a e7       	ldi	r24, 0x7A	; 122
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     5be:	ef ef       	ldi	r30, 0xFF	; 255
     5c0:	fd e3       	ldi	r31, 0x3D	; 61
     5c2:	29 e4       	ldi	r18, 0x49	; 73
     5c4:	e1 50       	subi	r30, 0x01	; 1
     5c6:	f0 40       	sbci	r31, 0x00	; 0
     5c8:	20 40       	sbci	r18, 0x00	; 0
     5ca:	e1 f7       	brne	.-8      	; 0x5c4 <newFinger+0x98>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <newFinger+0xa2>
     5ce:	00 00       	nop
			_delay_ms(1500);
			enrollFinger = false;
     5d0:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <enrollFinger>
			lcd_send_info("Drzwi zamkniete", "");
     5d4:	60 e1       	ldi	r22, 0x10	; 16
     5d6:	73 e0       	ldi	r23, 0x03	; 3
     5d8:	8b e8       	ldi	r24, 0x8B	; 139
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
			break;
     5e0:	05 c0       	rjmp	.+10     	; 0x5ec <newFinger+0xc0>

void newFinger(uint8_t id){
	lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
	fps_read_finger();
	uint8_t timer = 0;
	while(tmp[0] == 0x02){
     5e2:	f8 01       	movw	r30, r16
     5e4:	80 81       	ld	r24, Z
     5e6:	82 30       	cpi	r24, 0x02	; 2
     5e8:	09 f4       	brne	.+2      	; 0x5ec <newFinger+0xc0>
     5ea:	b1 cf       	rjmp	.-158    	; 0x54e <newFinger+0x22>
			enrollFinger = false;
			lcd_send_info("Drzwi zamkniete", "");
			break;
		}
	}
	if(tmp[0] == 0x00){
     5ec:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     5f0:	81 11       	cpse	r24, r1
     5f2:	fe c0       	rjmp	.+508    	; 0x7f0 <newFinger+0x2c4>
		fps_img2TZ(1);
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	0e 94 bb 00 	call	0x176	; 0x176 <fps_img2TZ>
     5fa:	ff ef       	ldi	r31, 0xFF	; 255
     5fc:	21 ee       	ldi	r18, 0xE1	; 225
     5fe:	84 e0       	ldi	r24, 0x04	; 4
     600:	f1 50       	subi	r31, 0x01	; 1
     602:	20 40       	sbci	r18, 0x00	; 0
     604:	80 40       	sbci	r24, 0x00	; 0
     606:	e1 f7       	brne	.-8      	; 0x600 <newFinger+0xd4>
     608:	00 c0       	rjmp	.+0      	; 0x60a <newFinger+0xde>
     60a:	00 00       	nop
		_delay_ms(100);
		if(tmp[0] == 0x00){
     60c:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     610:	81 11       	cpse	r24, r1
     612:	de c0       	rjmp	.+444    	; 0x7d0 <newFinger+0x2a4>
			lcd_send_info("   Raz jeszcze  ", "  umiesc palec  ");
     614:	6b e9       	ldi	r22, 0x9B	; 155
     616:	71 e0       	ldi	r23, 0x01	; 1
     618:	8c ea       	ldi	r24, 0xAC	; 172
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     620:	9f ef       	ldi	r25, 0xFF	; 255
     622:	ed e3       	ldi	r30, 0x3D	; 61
     624:	f9 e4       	ldi	r31, 0x49	; 73
     626:	91 50       	subi	r25, 0x01	; 1
     628:	e0 40       	sbci	r30, 0x00	; 0
     62a:	f0 40       	sbci	r31, 0x00	; 0
     62c:	e1 f7       	brne	.-8      	; 0x626 <newFinger+0xfa>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <newFinger+0x104>
     630:	00 00       	nop
			_delay_ms(1500);
				lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
     632:	63 e0       	ldi	r22, 0x03	; 3
     634:	71 e0       	ldi	r23, 0x01	; 1
     636:	84 e1       	ldi	r24, 0x14	; 20
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
				fps_read_finger();
     63e:	0e 94 a1 00 	call	0x142	; 0x142 <fps_read_finger>
				timer = 0;
     642:	c0 e0       	ldi	r28, 0x00	; 0
				while(tmp[0] == 0x02){
     644:	02 ed       	ldi	r16, 0xD2	; 210
     646:	13 e0       	ldi	r17, 0x03	; 3
     648:	4a c0       	rjmp	.+148    	; 0x6de <newFinger+0x1b2>
					fps_read_finger();
     64a:	0e 94 a1 00 	call	0x142	; 0x142 <fps_read_finger>
     64e:	2f ef       	ldi	r18, 0xFF	; 255
     650:	81 ee       	ldi	r24, 0xE1	; 225
     652:	94 e0       	ldi	r25, 0x04	; 4
     654:	21 50       	subi	r18, 0x01	; 1
     656:	80 40       	sbci	r24, 0x00	; 0
     658:	90 40       	sbci	r25, 0x00	; 0
     65a:	e1 f7       	brne	.-8      	; 0x654 <newFinger+0x128>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <newFinger+0x132>
     65e:	00 00       	nop
					_delay_ms(100);
					timer += 1;
     660:	cf 5f       	subi	r28, 0xFF	; 255
					if(timer == 10){
     662:	ca 30       	cpi	r28, 0x0A	; 10
     664:	39 f4       	brne	.+14     	; 0x674 <newFinger+0x148>
						lcd_send_info("  Umiesc palec  ", "Skanowanie: ----");
     666:	65 e2       	ldi	r22, 0x25	; 37
     668:	71 e0       	ldi	r23, 0x01	; 1
     66a:	84 e1       	ldi	r24, 0x14	; 20
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     672:	12 c0       	rjmp	.+36     	; 0x698 <newFinger+0x16c>
					}
					if(timer == 20){
     674:	c4 31       	cpi	r28, 0x14	; 20
     676:	39 f4       	brne	.+14     	; 0x686 <newFinger+0x15a>
						lcd_send_info("  Umiesc palec  ", "Skanowanie:  ---");
     678:	66 e3       	ldi	r22, 0x36	; 54
     67a:	71 e0       	ldi	r23, 0x01	; 1
     67c:	84 e1       	ldi	r24, 0x14	; 20
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     684:	12 c0       	rjmp	.+36     	; 0x6aa <newFinger+0x17e>
					}
					if(timer == 30){
     686:	ce 31       	cpi	r28, 0x1E	; 30
     688:	39 f4       	brne	.+14     	; 0x698 <newFinger+0x16c>
						lcd_send_info("  Umiesc palec  ", "Skanowanie:   --");
     68a:	67 e4       	ldi	r22, 0x47	; 71
     68c:	71 e0       	ldi	r23, 0x01	; 1
     68e:	84 e1       	ldi	r24, 0x14	; 20
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     696:	23 c0       	rjmp	.+70     	; 0x6de <newFinger+0x1b2>
					}
					if(timer == 40){
     698:	c8 32       	cpi	r28, 0x28	; 40
     69a:	39 f4       	brne	.+14     	; 0x6aa <newFinger+0x17e>
						lcd_send_info("  Umiesc palec  ", "Skanowanie:    -");
     69c:	68 e5       	ldi	r22, 0x58	; 88
     69e:	71 e0       	ldi	r23, 0x01	; 1
     6a0:	84 e1       	ldi	r24, 0x14	; 20
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     6a8:	1a c0       	rjmp	.+52     	; 0x6de <newFinger+0x1b2>
					}
					if(timer == 49){
     6aa:	c1 33       	cpi	r28, 0x31	; 49
     6ac:	c1 f4       	brne	.+48     	; 0x6de <newFinger+0x1b2>
						lcd_send_info("  Brak palca na ", " czytniku linii ");
     6ae:	69 e6       	ldi	r22, 0x69	; 105
     6b0:	71 e0       	ldi	r23, 0x01	; 1
     6b2:	8a e7       	ldi	r24, 0x7A	; 122
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     6ba:	ef ef       	ldi	r30, 0xFF	; 255
     6bc:	fd e3       	ldi	r31, 0x3D	; 61
     6be:	29 e4       	ldi	r18, 0x49	; 73
     6c0:	e1 50       	subi	r30, 0x01	; 1
     6c2:	f0 40       	sbci	r31, 0x00	; 0
     6c4:	20 40       	sbci	r18, 0x00	; 0
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <newFinger+0x194>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <newFinger+0x19e>
     6ca:	00 00       	nop
						_delay_ms(1500);
						enrollFinger = false;
     6cc:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <enrollFinger>
						lcd_send_info("Drzwi zamkniete", "");
     6d0:	60 e1       	ldi	r22, 0x10	; 16
     6d2:	73 e0       	ldi	r23, 0x03	; 3
     6d4:	8b e8       	ldi	r24, 0x8B	; 139
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
						break;
     6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <newFinger+0x1bc>
			lcd_send_info("   Raz jeszcze  ", "  umiesc palec  ");
			_delay_ms(1500);
				lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
				fps_read_finger();
				timer = 0;
				while(tmp[0] == 0x02){
     6de:	f8 01       	movw	r30, r16
     6e0:	80 81       	ld	r24, Z
     6e2:	82 30       	cpi	r24, 0x02	; 2
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <newFinger+0x1bc>
     6e6:	b1 cf       	rjmp	.-158    	; 0x64a <newFinger+0x11e>
						enrollFinger = false;
						lcd_send_info("Drzwi zamkniete", "");
						break;
					}
				}
			if(tmp[0] == 0x00){
     6e8:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     6ec:	81 11       	cpse	r24, r1
     6ee:	60 c0       	rjmp	.+192    	; 0x7b0 <newFinger+0x284>
				fps_img2TZ(2);
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	0e 94 bb 00 	call	0x176	; 0x176 <fps_img2TZ>
     6f6:	ff ef       	ldi	r31, 0xFF	; 255
     6f8:	29 e6       	ldi	r18, 0x69	; 105
     6fa:	88 e1       	ldi	r24, 0x18	; 24
     6fc:	f1 50       	subi	r31, 0x01	; 1
     6fe:	20 40       	sbci	r18, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	e1 f7       	brne	.-8      	; 0x6fc <newFinger+0x1d0>
     704:	00 c0       	rjmp	.+0      	; 0x706 <newFinger+0x1da>
     706:	00 00       	nop
				_delay_ms(500);
				if(tmp[0] == 0x00){
     708:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     70c:	81 11       	cpse	r24, r1
     70e:	40 c0       	rjmp	.+128    	; 0x790 <newFinger+0x264>
					fps_genModel();
     710:	0e 94 0b 01 	call	0x216	; 0x216 <fps_genModel>
					if(tmp[0] == 0x00){
     714:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     718:	81 11       	cpse	r24, r1
     71a:	2a c0       	rjmp	.+84     	; 0x770 <newFinger+0x244>
						fps_storeModel(id);
     71c:	8d 2f       	mov	r24, r29
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 25 01 	call	0x24a	; 0x24a <fps_storeModel>
						if(tmp[0] == 0x00){
     724:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     728:	81 11       	cpse	r24, r1
     72a:	12 c0       	rjmp	.+36     	; 0x750 <newFinger+0x224>
							lcd_send_info(" Pomyslny zapis ", " palca w bazie! ");
     72c:	6d eb       	ldi	r22, 0xBD	; 189
     72e:	71 e0       	ldi	r23, 0x01	; 1
     730:	8e ec       	ldi	r24, 0xCE	; 206
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
							firstUse = false;
     738:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <__data_end>
     73c:	9f ef       	ldi	r25, 0xFF	; 255
     73e:	e7 ea       	ldi	r30, 0xA7	; 167
     740:	f1 e6       	ldi	r31, 0x61	; 97
     742:	91 50       	subi	r25, 0x01	; 1
     744:	e0 40       	sbci	r30, 0x00	; 0
     746:	f0 40       	sbci	r31, 0x00	; 0
     748:	e1 f7       	brne	.-8      	; 0x742 <newFinger+0x216>
     74a:	00 c0       	rjmp	.+0      	; 0x74c <newFinger+0x220>
     74c:	00 00       	nop
     74e:	5f c0       	rjmp	.+190    	; 0x80e <newFinger+0x2e2>
							_delay_ms(2000);
						}
						else{
							lcd_send_info("  Blad podczas  ", " zapisu do bazy ");
     750:	6f ed       	ldi	r22, 0xDF	; 223
     752:	71 e0       	ldi	r23, 0x01	; 1
     754:	80 ef       	ldi	r24, 0xF0	; 240
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     75c:	2f ef       	ldi	r18, 0xFF	; 255
     75e:	87 ea       	ldi	r24, 0xA7	; 167
     760:	91 e6       	ldi	r25, 0x61	; 97
     762:	21 50       	subi	r18, 0x01	; 1
     764:	80 40       	sbci	r24, 0x00	; 0
     766:	90 40       	sbci	r25, 0x00	; 0
     768:	e1 f7       	brne	.-8      	; 0x762 <newFinger+0x236>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <newFinger+0x240>
     76c:	00 00       	nop
     76e:	4f c0       	rjmp	.+158    	; 0x80e <newFinger+0x2e2>
							_delay_ms(2000);
						}
					}
					else{
						lcd_send_info("  Blad podczas  ", "tworzenia modelu");
     770:	61 e0       	ldi	r22, 0x01	; 1
     772:	72 e0       	ldi	r23, 0x02	; 2
     774:	80 ef       	ldi	r24, 0xF0	; 240
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     77c:	ef ef       	ldi	r30, 0xFF	; 255
     77e:	f7 ea       	ldi	r31, 0xA7	; 167
     780:	21 e6       	ldi	r18, 0x61	; 97
     782:	e1 50       	subi	r30, 0x01	; 1
     784:	f0 40       	sbci	r31, 0x00	; 0
     786:	20 40       	sbci	r18, 0x00	; 0
     788:	e1 f7       	brne	.-8      	; 0x782 <newFinger+0x256>
     78a:	00 c0       	rjmp	.+0      	; 0x78c <newFinger+0x260>
     78c:	00 00       	nop
     78e:	3f c0       	rjmp	.+126    	; 0x80e <newFinger+0x2e2>
						_delay_ms(2000);
					}
				}
				else{
					lcd_send_info(" Blad tworzenia ", "  obrazu palca  ");
     790:	62 e1       	ldi	r22, 0x12	; 18
     792:	72 e0       	ldi	r23, 0x02	; 2
     794:	83 e2       	ldi	r24, 0x23	; 35
     796:	92 e0       	ldi	r25, 0x02	; 2
     798:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     79c:	8f ef       	ldi	r24, 0xFF	; 255
     79e:	97 ea       	ldi	r25, 0xA7	; 167
     7a0:	e1 e6       	ldi	r30, 0x61	; 97
     7a2:	81 50       	subi	r24, 0x01	; 1
     7a4:	90 40       	sbci	r25, 0x00	; 0
     7a6:	e0 40       	sbci	r30, 0x00	; 0
     7a8:	e1 f7       	brne	.-8      	; 0x7a2 <newFinger+0x276>
     7aa:	00 c0       	rjmp	.+0      	; 0x7ac <newFinger+0x280>
     7ac:	00 00       	nop
     7ae:	2f c0       	rjmp	.+94     	; 0x80e <newFinger+0x2e2>
					_delay_ms(2000);
				}
			}
			else{
				lcd_send_info("   Brak palca!  ", "Sprobuj ponownie");
     7b0:	64 e3       	ldi	r22, 0x34	; 52
     7b2:	72 e0       	ldi	r23, 0x02	; 2
     7b4:	85 e4       	ldi	r24, 0x45	; 69
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     7bc:	ff ef       	ldi	r31, 0xFF	; 255
     7be:	27 ea       	ldi	r18, 0xA7	; 167
     7c0:	81 e6       	ldi	r24, 0x61	; 97
     7c2:	f1 50       	subi	r31, 0x01	; 1
     7c4:	20 40       	sbci	r18, 0x00	; 0
     7c6:	80 40       	sbci	r24, 0x00	; 0
     7c8:	e1 f7       	brne	.-8      	; 0x7c2 <newFinger+0x296>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <newFinger+0x2a0>
     7cc:	00 00       	nop
     7ce:	1f c0       	rjmp	.+62     	; 0x80e <newFinger+0x2e2>
				_delay_ms(2000);
			}
		}
		else{
			lcd_send_info(" Blad tworzenia ", "  obrazu palca  ");
     7d0:	62 e1       	ldi	r22, 0x12	; 18
     7d2:	72 e0       	ldi	r23, 0x02	; 2
     7d4:	83 e2       	ldi	r24, 0x23	; 35
     7d6:	92 e0       	ldi	r25, 0x02	; 2
     7d8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     7dc:	9f ef       	ldi	r25, 0xFF	; 255
     7de:	e7 ea       	ldi	r30, 0xA7	; 167
     7e0:	f1 e6       	ldi	r31, 0x61	; 97
     7e2:	91 50       	subi	r25, 0x01	; 1
     7e4:	e0 40       	sbci	r30, 0x00	; 0
     7e6:	f0 40       	sbci	r31, 0x00	; 0
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <newFinger+0x2b6>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <newFinger+0x2c0>
     7ec:	00 00       	nop
     7ee:	0f c0       	rjmp	.+30     	; 0x80e <newFinger+0x2e2>
			_delay_ms(2000);
		}
	}
	else{
		lcd_send_info("   Brak palca!  ", "Sprobuj ponownie");
     7f0:	64 e3       	ldi	r22, 0x34	; 52
     7f2:	72 e0       	ldi	r23, 0x02	; 2
     7f4:	85 e4       	ldi	r24, 0x45	; 69
     7f6:	92 e0       	ldi	r25, 0x02	; 2
     7f8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     7fc:	2f ef       	ldi	r18, 0xFF	; 255
     7fe:	87 ea       	ldi	r24, 0xA7	; 167
     800:	91 e6       	ldi	r25, 0x61	; 97
     802:	21 50       	subi	r18, 0x01	; 1
     804:	80 40       	sbci	r24, 0x00	; 0
     806:	90 40       	sbci	r25, 0x00	; 0
     808:	e1 f7       	brne	.-8      	; 0x802 <newFinger+0x2d6>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <newFinger+0x2e0>
     80c:	00 00       	nop
		_delay_ms(2000);
	}
	enrollFinger = false;
     80e:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <enrollFinger>
	if(!firstUse){
     812:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <__data_end>
     816:	81 11       	cpse	r24, r1
     818:	06 c0       	rjmp	.+12     	; 0x826 <newFinger+0x2fa>
		lcd_send_info("Drzwi zamkniete", "");
     81a:	60 e1       	ldi	r22, 0x10	; 16
     81c:	73 e0       	ldi	r23, 0x03	; 3
     81e:	8b e8       	ldi	r24, 0x8B	; 139
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
	}	
}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	08 95       	ret

00000830 <deleteFinger>:

void deleteFinger(uint8_t id){
     830:	cf 93       	push	r28
     832:	c8 2f       	mov	r28, r24
	fps_deleteModel(id);
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 51 01 	call	0x2a2	; 0x2a2 <fps_deleteModel>
     83a:	2f ef       	ldi	r18, 0xFF	; 255
     83c:	81 ee       	ldi	r24, 0xE1	; 225
     83e:	94 e0       	ldi	r25, 0x04	; 4
     840:	21 50       	subi	r18, 0x01	; 1
     842:	80 40       	sbci	r24, 0x00	; 0
     844:	90 40       	sbci	r25, 0x00	; 0
     846:	e1 f7       	brne	.-8      	; 0x840 <deleteFinger+0x10>
     848:	00 c0       	rjmp	.+0      	; 0x84a <deleteFinger+0x1a>
     84a:	00 00       	nop
	_delay_ms(100);
	if(tmp[0] == 0x00){
     84c:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     850:	81 11       	cpse	r24, r1
     852:	30 c0       	rjmp	.+96     	; 0x8b4 <deleteFinger+0x84>
		lcd_clear();
     854:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <lcd_clear>
		lcd_setCursor(0,0);
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_setCursor>
		lcd_send_string(" Usunieto palec ");
     860:	86 e5       	ldi	r24, 0x56	; 86
     862:	92 e0       	ldi	r25, 0x02	; 2
     864:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>
		lcd_setCursor(0,1);
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_setCursor>
		lcd_send_string("o ID: ");
     870:	87 e6       	ldi	r24, 0x67	; 103
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>
		lcd_setCursor(6,1);
     878:	61 e0       	ldi	r22, 0x01	; 1
     87a:	86 e0       	ldi	r24, 0x06	; 6
     87c:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_setCursor>
		lcd_send_string(itoa(id, buffer, 10));
     880:	4a e0       	ldi	r20, 0x0A	; 10
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	69 ed       	ldi	r22, 0xD9	; 217
     886:	73 e0       	ldi	r23, 0x03	; 3
     888:	8c 2f       	mov	r24, r28
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 1f 08 	call	0x103e	; 0x103e <itoa>
     890:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>
     894:	2f ef       	ldi	r18, 0xFF	; 255
     896:	87 ea       	ldi	r24, 0xA7	; 167
     898:	91 e6       	ldi	r25, 0x61	; 97
     89a:	21 50       	subi	r18, 0x01	; 1
     89c:	80 40       	sbci	r24, 0x00	; 0
     89e:	90 40       	sbci	r25, 0x00	; 0
     8a0:	e1 f7       	brne	.-8      	; 0x89a <deleteFinger+0x6a>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <deleteFinger+0x74>
     8a4:	00 00       	nop
		_delay_ms(2000);
		lcd_send_info("Drzwi zamkniete", "");
     8a6:	60 e1       	ldi	r22, 0x10	; 16
     8a8:	73 e0       	ldi	r23, 0x03	; 3
     8aa:	8b e8       	ldi	r24, 0x8B	; 139
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     8b2:	15 c0       	rjmp	.+42     	; 0x8de <deleteFinger+0xae>
	}
	else{
		lcd_send_info(" Nie udalo sie  ", "  usunac palca! ");
     8b4:	6e e6       	ldi	r22, 0x6E	; 110
     8b6:	72 e0       	ldi	r23, 0x02	; 2
     8b8:	8f e7       	ldi	r24, 0x7F	; 127
     8ba:	92 e0       	ldi	r25, 0x02	; 2
     8bc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     8c0:	2f ef       	ldi	r18, 0xFF	; 255
     8c2:	87 ea       	ldi	r24, 0xA7	; 167
     8c4:	91 e6       	ldi	r25, 0x61	; 97
     8c6:	21 50       	subi	r18, 0x01	; 1
     8c8:	80 40       	sbci	r24, 0x00	; 0
     8ca:	90 40       	sbci	r25, 0x00	; 0
     8cc:	e1 f7       	brne	.-8      	; 0x8c6 <deleteFinger+0x96>
     8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <deleteFinger+0xa0>
     8d0:	00 00       	nop
		_delay_ms(2000);
		lcd_send_info("Drzwi zamkniete", "");
     8d2:	60 e1       	ldi	r22, 0x10	; 16
     8d4:	73 e0       	ldi	r23, 0x03	; 3
     8d6:	8b e8       	ldi	r24, 0x8B	; 139
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
	}
	removeFinger = false;
     8de:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <removeFinger>
}
     8e2:	cf 91       	pop	r28
     8e4:	08 95       	ret

000008e6 <checkFinger>:

void checkFinger(){
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <checkFinger+0xc>
     8f2:	1f 92       	push	r1
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
	lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
     8f8:	63 e0       	ldi	r22, 0x03	; 3
     8fa:	71 e0       	ldi	r23, 0x01	; 1
     8fc:	84 e1       	ldi	r24, 0x14	; 20
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
	fps_read_finger();
     904:	0e 94 a1 00 	call	0x142	; 0x142 <fps_read_finger>
	uint8_t timer = 0;
     908:	10 e0       	ldi	r17, 0x00	; 0
	while(tmp[0] == 0x02){
     90a:	0f 2e       	mov	r0, r31
     90c:	f2 ed       	ldi	r31, 0xD2	; 210
     90e:	ef 2e       	mov	r14, r31
     910:	f3 e0       	ldi	r31, 0x03	; 3
     912:	ff 2e       	mov	r15, r31
     914:	f0 2d       	mov	r31, r0
     916:	4e c0       	rjmp	.+156    	; 0x9b4 <__stack+0xb5>
		fps_read_finger();
     918:	0e 94 a1 00 	call	0x142	; 0x142 <fps_read_finger>
     91c:	2f ef       	ldi	r18, 0xFF	; 255
     91e:	81 ee       	ldi	r24, 0xE1	; 225
     920:	94 e0       	ldi	r25, 0x04	; 4
     922:	21 50       	subi	r18, 0x01	; 1
     924:	80 40       	sbci	r24, 0x00	; 0
     926:	90 40       	sbci	r25, 0x00	; 0
     928:	e1 f7       	brne	.-8      	; 0x922 <__stack+0x23>
     92a:	00 c0       	rjmp	.+0      	; 0x92c <__stack+0x2d>
     92c:	00 00       	nop
		_delay_ms(100);
		timer += 1;
     92e:	1f 5f       	subi	r17, 0xFF	; 255
		if(timer == 10){
     930:	1a 30       	cpi	r17, 0x0A	; 10
     932:	39 f4       	brne	.+14     	; 0x942 <__stack+0x43>
			lcd_send_info("  Umiesc palec  ", "Skanowanie: ----");
     934:	65 e2       	ldi	r22, 0x25	; 37
     936:	71 e0       	ldi	r23, 0x01	; 1
     938:	84 e1       	ldi	r24, 0x14	; 20
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     940:	12 c0       	rjmp	.+36     	; 0x966 <__stack+0x67>
		}
		if(timer == 20){
     942:	14 31       	cpi	r17, 0x14	; 20
     944:	39 f4       	brne	.+14     	; 0x954 <__stack+0x55>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:  ---");
     946:	66 e3       	ldi	r22, 0x36	; 54
     948:	71 e0       	ldi	r23, 0x01	; 1
     94a:	84 e1       	ldi	r24, 0x14	; 20
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     952:	12 c0       	rjmp	.+36     	; 0x978 <__stack+0x79>
		}
		if(timer == 30){
     954:	1e 31       	cpi	r17, 0x1E	; 30
     956:	39 f4       	brne	.+14     	; 0x966 <__stack+0x67>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:   --");
     958:	67 e4       	ldi	r22, 0x47	; 71
     95a:	71 e0       	ldi	r23, 0x01	; 1
     95c:	84 e1       	ldi	r24, 0x14	; 20
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     964:	27 c0       	rjmp	.+78     	; 0x9b4 <__stack+0xb5>
		}
		if(timer == 40){
     966:	18 32       	cpi	r17, 0x28	; 40
     968:	39 f4       	brne	.+14     	; 0x978 <__stack+0x79>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:    -");
     96a:	68 e5       	ldi	r22, 0x58	; 88
     96c:	71 e0       	ldi	r23, 0x01	; 1
     96e:	84 e1       	ldi	r24, 0x14	; 20
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     976:	1e c0       	rjmp	.+60     	; 0x9b4 <__stack+0xb5>
		}
		if(timer == 50){
     978:	12 33       	cpi	r17, 0x32	; 50
     97a:	e1 f4       	brne	.+56     	; 0x9b4 <__stack+0xb5>
			lcd_send_info("  Brak palca na ", " czytniku linii ");
     97c:	69 e6       	ldi	r22, 0x69	; 105
     97e:	71 e0       	ldi	r23, 0x01	; 1
     980:	8a e7       	ldi	r24, 0x7A	; 122
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     988:	ef ef       	ldi	r30, 0xFF	; 255
     98a:	fd e3       	ldi	r31, 0x3D	; 61
     98c:	29 e4       	ldi	r18, 0x49	; 73
     98e:	e1 50       	subi	r30, 0x01	; 1
     990:	f0 40       	sbci	r31, 0x00	; 0
     992:	20 40       	sbci	r18, 0x00	; 0
     994:	e1 f7       	brne	.-8      	; 0x98e <__stack+0x8f>
     996:	00 c0       	rjmp	.+0      	; 0x998 <__stack+0x99>
     998:	00 00       	nop
			_delay_ms(1500);
			scanFinger = false;
     99a:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <scanFinger>
			enrollFinger = false;
     99e:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <enrollFinger>
			removeFinger = false;
     9a2:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <removeFinger>
			lcd_send_info("Drzwi zamkniete", "");
     9a6:	60 e1       	ldi	r22, 0x10	; 16
     9a8:	73 e0       	ldi	r23, 0x03	; 3
     9aa:	8b e8       	ldi	r24, 0x8B	; 139
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
			return;
     9b2:	e8 c0       	rjmp	.+464    	; 0xb84 <__stack+0x285>

void checkFinger(){
	lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
	fps_read_finger();
	uint8_t timer = 0;
	while(tmp[0] == 0x02){
     9b4:	f7 01       	movw	r30, r14
     9b6:	80 81       	ld	r24, Z
     9b8:	82 30       	cpi	r24, 0x02	; 2
     9ba:	09 f4       	brne	.+2      	; 0x9be <__stack+0xbf>
     9bc:	ad cf       	rjmp	.-166    	; 0x918 <__stack+0x19>
			removeFinger = false;
			lcd_send_info("Drzwi zamkniete", "");
			return;
		}
	}
	if(tmp[0] == 0x00){
     9be:	81 11       	cpse	r24, r1
     9c0:	c2 c0       	rjmp	.+388    	; 0xb46 <__stack+0x247>
		fps_img2TZ(1);
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	0e 94 bb 00 	call	0x176	; 0x176 <fps_img2TZ>
     9c8:	ff ef       	ldi	r31, 0xFF	; 255
     9ca:	21 ee       	ldi	r18, 0xE1	; 225
     9cc:	84 e0       	ldi	r24, 0x04	; 4
     9ce:	f1 50       	subi	r31, 0x01	; 1
     9d0:	20 40       	sbci	r18, 0x00	; 0
     9d2:	80 40       	sbci	r24, 0x00	; 0
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <__stack+0xcf>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <__stack+0xd9>
     9d8:	00 00       	nop
		_delay_ms(100);
		if(tmp[0] == 0x00){
     9da:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     9de:	81 11       	cpse	r24, r1
     9e0:	a2 c0       	rjmp	.+324    	; 0xb26 <__stack+0x227>
			fps_search();
     9e2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <fps_search>
     9e6:	9f ef       	ldi	r25, 0xFF	; 255
     9e8:	e1 ee       	ldi	r30, 0xE1	; 225
     9ea:	f4 e0       	ldi	r31, 0x04	; 4
     9ec:	91 50       	subi	r25, 0x01	; 1
     9ee:	e0 40       	sbci	r30, 0x00	; 0
     9f0:	f0 40       	sbci	r31, 0x00	; 0
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <__stack+0xed>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <__stack+0xf7>
     9f6:	00 00       	nop
			_delay_ms(100);
			if(tmp[0] == 0x00){
     9f8:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <tmp>
     9fc:	81 11       	cpse	r24, r1
     9fe:	83 c0       	rjmp	.+262    	; 0xb06 <__stack+0x207>
				if(enrollFinger == true || removeFinger == true){
     a00:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <enrollFinger>
     a04:	81 11       	cpse	r24, r1
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__stack+0x111>
     a08:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <removeFinger>
     a0c:	88 23       	and	r24, r24
     a0e:	f9 f0       	breq	.+62     	; 0xa4e <__stack+0x14f>
					uint16_t mainID = tmp[1] << 8;
     a10:	e2 ed       	ldi	r30, 0xD2	; 210
     a12:	f3 e0       	ldi	r31, 0x03	; 3
     a14:	81 81       	ldd	r24, Z+1	; 0x01
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	98 2f       	mov	r25, r24
     a1a:	88 27       	eor	r24, r24
					mainID += tmp[2];
					if(mainID == mainUserID){
     a1c:	22 81       	ldd	r18, Z+2	; 0x02
     a1e:	82 0f       	add	r24, r18
     a20:	91 1d       	adc	r25, r1
     a22:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     a26:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     a2a:	82 17       	cp	r24, r18
     a2c:	93 07       	cpc	r25, r19
     a2e:	41 f4       	brne	.+16     	; 0xa40 <__stack+0x141>
						mainUser = true;
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <mainUser>
						scanFinger = false;
     a36:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <scanFinger>
						removeFinger = false;
     a3a:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <removeFinger>
     a3e:	92 c0       	rjmp	.+292    	; 0xb64 <__stack+0x265>
					}
					else{
						mainUser = false;
     a40:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <mainUser>
						scanFinger = false;
     a44:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <scanFinger>
						removeFinger = false;
     a48:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <removeFinger>
     a4c:	8b c0       	rjmp	.+278    	; 0xb64 <__stack+0x265>
					}
				}
				else if(firstUse == true){
     a4e:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <__data_end>
     a52:	81 11       	cpse	r24, r1
     a54:	87 c0       	rjmp	.+270    	; 0xb64 <__stack+0x265>
					
				}
				else{
					uint16_t score;
					score = tmp[3] << 8;
     a56:	e2 ed       	ldi	r30, 0xD2	; 210
     a58:	f3 e0       	ldi	r31, 0x03	; 3
     a5a:	e3 80       	ldd	r14, Z+3	; 0x03
     a5c:	f1 2c       	mov	r15, r1
     a5e:	fe 2c       	mov	r15, r14
     a60:	ee 24       	eor	r14, r14
					score += tmp[4];
     a62:	84 81       	ldd	r24, Z+4	; 0x04
     a64:	e8 0e       	add	r14, r24
     a66:	f1 1c       	adc	r15, r1
					uint8_t percentage;
					char buffor[3];
					lcd_clear();
     a68:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <lcd_clear>
					lcd_setCursor(0,0);
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_setCursor>
					lcd_send_string("Znaleziono palec");
     a74:	80 e9       	ldi	r24, 0x90	; 144
     a76:	92 e0       	ldi	r25, 0x02	; 2
     a78:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>
					lcd_setCursor(0,1);
     a7c:	61 e0       	ldi	r22, 0x01	; 1
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_setCursor>
					lcd_send_string(" Zgodnosc: ");
     a84:	81 ea       	ldi	r24, 0xA1	; 161
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>
					lcd_setCursor(11,1);
     a8c:	61 e0       	ldi	r22, 0x01	; 1
     a8e:	8b e0       	ldi	r24, 0x0B	; 11
     a90:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_setCursor>
					percentage = ((score <<8)/(uint8_t)255) *100;
					lcd_send_string(itoa(percentage, buffor, 10));
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	3e 2d       	mov	r19, r14
     a98:	a1 e8       	ldi	r26, 0x81	; 129
     a9a:	b0 e8       	ldi	r27, 0x80	; 128
     a9c:	0e 94 10 08 	call	0x1020	; 0x1020 <__umulhisi3>
     aa0:	88 0f       	add	r24, r24
     aa2:	89 2f       	mov	r24, r25
     aa4:	88 1f       	adc	r24, r24
     aa6:	99 0b       	sbc	r25, r25
     aa8:	91 95       	neg	r25
     aaa:	94 e6       	ldi	r25, 0x64	; 100
     aac:	89 9f       	mul	r24, r25
     aae:	80 2d       	mov	r24, r0
     ab0:	11 24       	eor	r1, r1
     ab2:	4a e0       	ldi	r20, 0x0A	; 10
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	be 01       	movw	r22, r28
     ab8:	6f 5f       	subi	r22, 0xFF	; 255
     aba:	7f 4f       	sbci	r23, 0xFF	; 255
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 1f 08 	call	0x103e	; 0x103e <itoa>
     ac2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>
					lcd_setCursor(15,1);
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	8f e0       	ldi	r24, 0x0F	; 15
     aca:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_setCursor>
					lcd_send_string("%");
     ace:	8d ea       	ldi	r24, 0xAD	; 173
     ad0:	92 e0       	ldi	r25, 0x02	; 2
     ad2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>
					PORTB ^= 1 << PINB3;
     ad6:	95 b1       	in	r25, 0x05	; 5
     ad8:	88 e0       	ldi	r24, 0x08	; 8
     ada:	89 27       	eor	r24, r25
     adc:	85 b9       	out	0x05, r24	; 5
     ade:	2f ef       	ldi	r18, 0xFF	; 255
     ae0:	8b e7       	ldi	r24, 0x7B	; 123
     ae2:	92 e9       	ldi	r25, 0x92	; 146
     ae4:	21 50       	subi	r18, 0x01	; 1
     ae6:	80 40       	sbci	r24, 0x00	; 0
     ae8:	90 40       	sbci	r25, 0x00	; 0
     aea:	e1 f7       	brne	.-8      	; 0xae4 <__stack+0x1e5>
     aec:	00 c0       	rjmp	.+0      	; 0xaee <__stack+0x1ef>
     aee:	00 00       	nop
					_delay_ms(3000);
					lcd_send_info("--Drzwi otwarte--", "");
     af0:	60 e1       	ldi	r22, 0x10	; 16
     af2:	73 e0       	ldi	r23, 0x03	; 3
     af4:	8f ea       	ldi	r24, 0xAF	; 175
     af6:	92 e0       	ldi	r25, 0x02	; 2
     af8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
					scanFinger = false;
     afc:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <scanFinger>
					doorLocked = false;
     b00:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <doorLocked>
     b04:	2f c0       	rjmp	.+94     	; 0xb64 <__stack+0x265>
				}
			}
			else{
				lcd_send_info(" Nie znaleziono ", "palca w systemie");
     b06:	61 ec       	ldi	r22, 0xC1	; 193
     b08:	72 e0       	ldi	r23, 0x02	; 2
     b0a:	82 ed       	ldi	r24, 0xD2	; 210
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     b12:	ef ef       	ldi	r30, 0xFF	; 255
     b14:	f7 ea       	ldi	r31, 0xA7	; 167
     b16:	21 e6       	ldi	r18, 0x61	; 97
     b18:	e1 50       	subi	r30, 0x01	; 1
     b1a:	f0 40       	sbci	r31, 0x00	; 0
     b1c:	20 40       	sbci	r18, 0x00	; 0
     b1e:	e1 f7       	brne	.-8      	; 0xb18 <__stack+0x219>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <__stack+0x223>
     b22:	00 00       	nop
     b24:	1f c0       	rjmp	.+62     	; 0xb64 <__stack+0x265>
				_delay_ms(2000);
			}
		}
		else{
			lcd_send_info(" Blad tworzenia ", "  obrazu palca  ");
     b26:	62 e1       	ldi	r22, 0x12	; 18
     b28:	72 e0       	ldi	r23, 0x02	; 2
     b2a:	83 e2       	ldi	r24, 0x23	; 35
     b2c:	92 e0       	ldi	r25, 0x02	; 2
     b2e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     b32:	8f ef       	ldi	r24, 0xFF	; 255
     b34:	97 ea       	ldi	r25, 0xA7	; 167
     b36:	e1 e6       	ldi	r30, 0x61	; 97
     b38:	81 50       	subi	r24, 0x01	; 1
     b3a:	90 40       	sbci	r25, 0x00	; 0
     b3c:	e0 40       	sbci	r30, 0x00	; 0
     b3e:	e1 f7       	brne	.-8      	; 0xb38 <__stack+0x239>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <__stack+0x243>
     b42:	00 00       	nop
     b44:	0f c0       	rjmp	.+30     	; 0xb64 <__stack+0x265>
			_delay_ms(2000);
		}
	}
	else{
		lcd_send_info("   Brak palca!  ", "Sprobuj ponownie");
     b46:	64 e3       	ldi	r22, 0x34	; 52
     b48:	72 e0       	ldi	r23, 0x02	; 2
     b4a:	85 e4       	ldi	r24, 0x45	; 69
     b4c:	92 e0       	ldi	r25, 0x02	; 2
     b4e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     b52:	ff ef       	ldi	r31, 0xFF	; 255
     b54:	27 ea       	ldi	r18, 0xA7	; 167
     b56:	81 e6       	ldi	r24, 0x61	; 97
     b58:	f1 50       	subi	r31, 0x01	; 1
     b5a:	20 40       	sbci	r18, 0x00	; 0
     b5c:	80 40       	sbci	r24, 0x00	; 0
     b5e:	e1 f7       	brne	.-8      	; 0xb58 <__stack+0x259>
     b60:	00 c0       	rjmp	.+0      	; 0xb62 <__stack+0x263>
     b62:	00 00       	nop
		_delay_ms(2000);
	}
	removeFinger = false;
     b64:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <removeFinger>
	enrollFinger = false;
     b68:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <enrollFinger>
	scanFinger = false;
     b6c:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <scanFinger>
	if(doorLocked){
     b70:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <doorLocked>
     b74:	88 23       	and	r24, r24
     b76:	31 f0       	breq	.+12     	; 0xb84 <__stack+0x285>
	lcd_send_info("Drzwi zamkniete", "");
     b78:	60 e1       	ldi	r22, 0x10	; 16
     b7a:	73 e0       	ldi	r23, 0x03	; 3
     b7c:	8b e8       	ldi	r24, 0x8B	; 139
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
	}
	
}
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	08 95       	ret

00000b96 <getID>:
	
uint8_t getID(){
     b96:	1f 93       	push	r17
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <getID+0x8>
     b9e:	1f 92       	push	r1
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
	uint8_t id = 1;
	char buffor[3];
	lcd_clear();
     ba4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <lcd_clear>
	lcd_setCursor(0,0);
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_setCursor>
	lcd_send_string("Wybierz ID:");
     bb0:	83 ee       	ldi	r24, 0xE3	; 227
     bb2:	92 e0       	ldi	r25, 0x02	; 2
     bb4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>
	lcd_setCursor(0,11);
     bb8:	6b e0       	ldi	r22, 0x0B	; 11
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_setCursor>
	lcd_send_string(itoa(id,buffor,10));
     bc0:	4a e0       	ldi	r20, 0x0A	; 10
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	be 01       	movw	r22, r28
     bc6:	6f 5f       	subi	r22, 0xFF	; 255
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 1f 08 	call	0x103e	; 0x103e <itoa>
     bd2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>
	getID_bool = true;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <getID_bool>
	}
	
}
	
uint8_t getID(){
	uint8_t id = 1;
     bdc:	11 e0       	ldi	r17, 0x01	; 1
	lcd_setCursor(0,0);
	lcd_send_string("Wybierz ID:");
	lcd_setCursor(0,11);
	lcd_send_string(itoa(id,buffor,10));
	getID_bool = true;
	while(getID_bool){
     bde:	88 c0       	rjmp	.+272    	; 0xcf0 <getID+0x15a>
		if(bit_is_clear(PINB, 1)){
     be0:	19 99       	sbic	0x03, 1	; 3
     be2:	2c c0       	rjmp	.+88     	; 0xc3c <getID+0xa6>
			if(id == 255){
     be4:	1f 3f       	cpi	r17, 0xFF	; 255
     be6:	81 f4       	brne	.+32     	; 0xc08 <getID+0x72>
				lcd_setCursor(0,11);
     be8:	6b e0       	ldi	r22, 0x0B	; 11
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_setCursor>
				lcd_send_string(itoa(255,buffor,10));
     bf0:	4a e0       	ldi	r20, 0x0A	; 10
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	be 01       	movw	r22, r28
     bf6:	6f 5f       	subi	r22, 0xFF	; 255
     bf8:	7f 4f       	sbci	r23, 0xFF	; 255
     bfa:	8f ef       	ldi	r24, 0xFF	; 255
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 1f 08 	call	0x103e	; 0x103e <itoa>
     c02:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>
     c06:	74 c0       	rjmp	.+232    	; 0xcf0 <getID+0x15a>
			}
			else{	
				id++;
     c08:	1f 5f       	subi	r17, 0xFF	; 255
				lcd_setCursor(0,11);
     c0a:	6b e0       	ldi	r22, 0x0B	; 11
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_setCursor>
				lcd_send_string(itoa(id,buffor,10));
     c12:	4a e0       	ldi	r20, 0x0A	; 10
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	be 01       	movw	r22, r28
     c18:	6f 5f       	subi	r22, 0xFF	; 255
     c1a:	7f 4f       	sbci	r23, 0xFF	; 255
     c1c:	81 2f       	mov	r24, r17
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 1f 08 	call	0x103e	; 0x103e <itoa>
     c24:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	83 ec       	ldi	r24, 0xC3	; 195
     c2c:	99 e0       	ldi	r25, 0x09	; 9
     c2e:	21 50       	subi	r18, 0x01	; 1
     c30:	80 40       	sbci	r24, 0x00	; 0
     c32:	90 40       	sbci	r25, 0x00	; 0
     c34:	e1 f7       	brne	.-8      	; 0xc2e <getID+0x98>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <getID+0xa2>
     c38:	00 00       	nop
     c3a:	5a c0       	rjmp	.+180    	; 0xcf0 <getID+0x15a>
				_delay_ms(200);	
			}
		}
		else if(bit_is_clear(PINB, 2)){
     c3c:	1a 99       	sbic	0x03, 2	; 3
     c3e:	52 c0       	rjmp	.+164    	; 0xce4 <getID+0x14e>
			if(id == 10){
     c40:	1a 30       	cpi	r17, 0x0A	; 10
     c42:	21 f5       	brne	.+72     	; 0xc8c <getID+0xf6>
				id--;
				lcd_clear();
     c44:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <lcd_clear>
				lcd_setCursor(0,0);
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_setCursor>
				lcd_send_string("Wybierz ID:");
     c50:	83 ee       	ldi	r24, 0xE3	; 227
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>
				lcd_setCursor(0,11);
     c58:	6b e0       	ldi	r22, 0x0B	; 11
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_setCursor>
				lcd_send_string(itoa(id,buffor,10));
     c60:	4a e0       	ldi	r20, 0x0A	; 10
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	be 01       	movw	r22, r28
     c66:	6f 5f       	subi	r22, 0xFF	; 255
     c68:	7f 4f       	sbci	r23, 0xFF	; 255
     c6a:	89 e0       	ldi	r24, 0x09	; 9
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 1f 08 	call	0x103e	; 0x103e <itoa>
     c72:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>
     c76:	2f ef       	ldi	r18, 0xFF	; 255
     c78:	83 ec       	ldi	r24, 0xC3	; 195
     c7a:	99 e0       	ldi	r25, 0x09	; 9
     c7c:	21 50       	subi	r18, 0x01	; 1
     c7e:	80 40       	sbci	r24, 0x00	; 0
     c80:	90 40       	sbci	r25, 0x00	; 0
     c82:	e1 f7       	brne	.-8      	; 0xc7c <getID+0xe6>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <getID+0xf0>
     c86:	00 00       	nop
				_delay_ms(200);	
			}
		}
		else if(bit_is_clear(PINB, 2)){
			if(id == 10){
				id--;
     c88:	19 e0       	ldi	r17, 0x09	; 9
     c8a:	32 c0       	rjmp	.+100    	; 0xcf0 <getID+0x15a>
				lcd_send_string("Wybierz ID:");
				lcd_setCursor(0,11);
				lcd_send_string(itoa(id,buffor,10));
				_delay_ms(200);
			}
			else if(id == 1){
     c8c:	11 30       	cpi	r17, 0x01	; 1
     c8e:	81 f4       	brne	.+32     	; 0xcb0 <getID+0x11a>
				lcd_setCursor(0,11);
     c90:	6b e0       	ldi	r22, 0x0B	; 11
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_setCursor>
				lcd_send_string(itoa(1,buffor,10));
     c98:	4a e0       	ldi	r20, 0x0A	; 10
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	be 01       	movw	r22, r28
     c9e:	6f 5f       	subi	r22, 0xFF	; 255
     ca0:	7f 4f       	sbci	r23, 0xFF	; 255
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 1f 08 	call	0x103e	; 0x103e <itoa>
     caa:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>
     cae:	20 c0       	rjmp	.+64     	; 0xcf0 <getID+0x15a>
			}
			else{
				id--;
     cb0:	11 50       	subi	r17, 0x01	; 1
				lcd_setCursor(0,11);
     cb2:	6b e0       	ldi	r22, 0x0B	; 11
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_setCursor>
				lcd_send_string(itoa(id,buffor,10));
     cba:	4a e0       	ldi	r20, 0x0A	; 10
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	be 01       	movw	r22, r28
     cc0:	6f 5f       	subi	r22, 0xFF	; 255
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
     cc4:	81 2f       	mov	r24, r17
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 1f 08 	call	0x103e	; 0x103e <itoa>
     ccc:	0e 94 6e 02 	call	0x4dc	; 0x4dc <lcd_send_string>
     cd0:	2f ef       	ldi	r18, 0xFF	; 255
     cd2:	83 ec       	ldi	r24, 0xC3	; 195
     cd4:	99 e0       	ldi	r25, 0x09	; 9
     cd6:	21 50       	subi	r18, 0x01	; 1
     cd8:	80 40       	sbci	r24, 0x00	; 0
     cda:	90 40       	sbci	r25, 0x00	; 0
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <getID+0x140>
     cde:	00 c0       	rjmp	.+0      	; 0xce0 <getID+0x14a>
     ce0:	00 00       	nop
     ce2:	06 c0       	rjmp	.+12     	; 0xcf0 <getID+0x15a>
				_delay_ms(200);
			}
		}
		else if(bit_is_clear(PINB, 0)){
     ce4:	18 99       	sbic	0x03, 0	; 3
     ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <getID+0x15a>
			getID_bool = false;
     ce8:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <getID_bool>
			return id;
     cec:	81 2f       	mov	r24, r17
     cee:	04 c0       	rjmp	.+8      	; 0xcf8 <getID+0x162>
	lcd_setCursor(0,0);
	lcd_send_string("Wybierz ID:");
	lcd_setCursor(0,11);
	lcd_send_string(itoa(id,buffor,10));
	getID_bool = true;
	while(getID_bool){
     cf0:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <getID_bool>
     cf4:	81 11       	cpse	r24, r1
     cf6:	74 cf       	rjmp	.-280    	; 0xbe0 <getID+0x4a>
			getID_bool = false;
			return id;
			_delay_ms(200);
		}
	}
}
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	08 95       	ret

00000d06 <getTemplateCount>:

uint16_t getTemplateCount(){
	uint16_t template;
	fps_templateNum();
     d06:	0e 94 81 01 	call	0x302	; 0x302 <fps_templateNum>
     d0a:	2f ef       	ldi	r18, 0xFF	; 255
     d0c:	80 e7       	ldi	r24, 0x70	; 112
     d0e:	92 e0       	ldi	r25, 0x02	; 2
     d10:	21 50       	subi	r18, 0x01	; 1
     d12:	80 40       	sbci	r24, 0x00	; 0
     d14:	90 40       	sbci	r25, 0x00	; 0
     d16:	e1 f7       	brne	.-8      	; 0xd10 <getTemplateCount+0xa>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <getTemplateCount+0x14>
     d1a:	00 00       	nop
	_delay_ms(50);
	template = tmp[1] << 8;
     d1c:	e2 ed       	ldi	r30, 0xD2	; 210
     d1e:	f3 e0       	ldi	r31, 0x03	; 3
     d20:	81 81       	ldd	r24, Z+1	; 0x01
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	98 2f       	mov	r25, r24
     d26:	88 27       	eor	r24, r24
	template += tmp[2];
	return template;
     d28:	22 81       	ldd	r18, Z+2	; 0x02
     d2a:	82 0f       	add	r24, r18
     d2c:	91 1d       	adc	r25, r1
     d2e:	08 95       	ret

00000d30 <main>:
uint8_t id;
uint16_t mainUserID = 1;
uint8_t buffer[3];
int main(void){
	//Wstepne parametry programu
	lcd_init();
     d30:	0e 94 1e 02 	call	0x43c	; 0x43c <lcd_init>
     d34:	2f ef       	ldi	r18, 0xFF	; 255
     d36:	80 e7       	ldi	r24, 0x70	; 112
     d38:	92 e0       	ldi	r25, 0x02	; 2
     d3a:	21 50       	subi	r18, 0x01	; 1
     d3c:	80 40       	sbci	r24, 0x00	; 0
     d3e:	90 40       	sbci	r25, 0x00	; 0
     d40:	e1 f7       	brne	.-8      	; 0xd3a <main+0xa>
     d42:	00 c0       	rjmp	.+0      	; 0xd44 <main+0x14>
     d44:	00 00       	nop
	_delay_ms(50);
	initUART();
     d46:	0e 94 ed 07 	call	0xfda	; 0xfda <initUART>
	
	DDRB = 0b00001000; //B0,B1,B2 - 3 przyciski; B3 - wyjscie elektrozamka
     d4a:	88 e0       	ldi	r24, 0x08	; 8
     d4c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000111;
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	85 b9       	out	0x05, r24	; 5
	lcd_send_info("    Witaj w:    ", "Zamku szyfrowym ");
     d52:	6f ee       	ldi	r22, 0xEF	; 239
     d54:	72 e0       	ldi	r23, 0x02	; 2
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	93 e0       	ldi	r25, 0x03	; 3
     d5a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     d5e:	ef ef       	ldi	r30, 0xFF	; 255
     d60:	f7 ea       	ldi	r31, 0xA7	; 167
     d62:	21 e6       	ldi	r18, 0x61	; 97
     d64:	e1 50       	subi	r30, 0x01	; 1
     d66:	f0 40       	sbci	r31, 0x00	; 0
     d68:	20 40       	sbci	r18, 0x00	; 0
     d6a:	e1 f7       	brne	.-8      	; 0xd64 <main+0x34>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <main+0x3e>
     d6e:	00 00       	nop
	_delay_ms(2000);
	
	if(getTemplateCount() == 0){
     d70:	0e 94 83 06 	call	0xd06	; 0xd06 <getTemplateCount>
     d74:	89 2b       	or	r24, r25
     d76:	f9 f4       	brne	.+62     	; 0xdb6 <main+0x86>
		firstUse = true;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <__data_end>
		while(firstUse){
     d7e:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <__data_end>
     d82:	88 23       	and	r24, r24
     d84:	c1 f0       	breq	.+48     	; 0xdb6 <main+0x86>
			lcd_send_info("Pierwsze uzycie ", "Admin potrzebny!");
			_delay_ms(1500);
			newFinger(mainUserID);
     d86:	c0 e0       	ldi	r28, 0x00	; 0
     d88:	d1 e0       	ldi	r29, 0x01	; 1
	_delay_ms(2000);
	
	if(getTemplateCount() == 0){
		firstUse = true;
		while(firstUse){
			lcd_send_info("Pierwsze uzycie ", "Admin potrzebny!");
     d8a:	61 e1       	ldi	r22, 0x11	; 17
     d8c:	73 e0       	ldi	r23, 0x03	; 3
     d8e:	82 e2       	ldi	r24, 0x22	; 34
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	9d e3       	ldi	r25, 0x3D	; 61
     d9a:	e9 e4       	ldi	r30, 0x49	; 73
     d9c:	81 50       	subi	r24, 0x01	; 1
     d9e:	90 40       	sbci	r25, 0x00	; 0
     da0:	e0 40       	sbci	r30, 0x00	; 0
     da2:	e1 f7       	brne	.-8      	; 0xd9c <main+0x6c>
     da4:	00 c0       	rjmp	.+0      	; 0xda6 <main+0x76>
     da6:	00 00       	nop
			_delay_ms(1500);
			newFinger(mainUserID);
     da8:	88 81       	ld	r24, Y
     daa:	0e 94 96 02 	call	0x52c	; 0x52c <newFinger>
	lcd_send_info("    Witaj w:    ", "Zamku szyfrowym ");
	_delay_ms(2000);
	
	if(getTemplateCount() == 0){
		firstUse = true;
		while(firstUse){
     dae:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <__data_end>
     db2:	81 11       	cpse	r24, r1
     db4:	ea cf       	rjmp	.-44     	; 0xd8a <main+0x5a>
			lcd_send_info("Pierwsze uzycie ", "Admin potrzebny!");
			_delay_ms(1500);
			newFinger(mainUserID);
		}
	}
	lcd_send_info("Drzwi zamkniete", "");
     db6:	60 e1       	ldi	r22, 0x10	; 16
     db8:	73 e0       	ldi	r23, 0x03	; 3
     dba:	8b e8       	ldi	r24, 0x8B	; 139
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
			}
		}
		//gdy drzwi sa otwarte
		else if(!doorLocked){
			if(bit_is_clear(PINB, 0)){
				doorLocked = true;
     dc2:	c1 e0       	ldi	r28, 0x01	; 1
				PORTB ^= 1 << PINB3;
     dc4:	d8 e0       	ldi	r29, 0x08	; 8
								mainUser = false;
								_delay_ms(200);
								break;
							}
							else if(bit_is_clear(PINB, 2)){
								newFinger(mainUserID);
     dc6:	00 e0       	ldi	r16, 0x00	; 0
     dc8:	11 e0       	ldi	r17, 0x01	; 1
	}
	lcd_send_info("Drzwi zamkniete", "");
	
	//Glowna petla programu		
	while(1){
		if(doorLocked){
     dca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <doorLocked>
     dce:	88 23       	and	r24, r24
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <main+0xa4>
     dd2:	e8 c0       	rjmp	.+464    	; 0xfa4 <main+0x274>
			if(bit_is_clear(PINB, 0) && !(scanFinger)){
     dd4:	18 99       	sbic	0x03, 0	; 3
     dd6:	08 c0       	rjmp	.+16     	; 0xde8 <main+0xb8>
     dd8:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <scanFinger>
     ddc:	81 11       	cpse	r24, r1
     dde:	04 c0       	rjmp	.+8      	; 0xde8 <main+0xb8>
				scanFinger = true;
     de0:	c0 93 d1 03 	sts	0x03D1, r28	; 0x8003d1 <scanFinger>
					checkFinger();
     de4:	0e 94 73 04 	call	0x8e6	; 0x8e6 <checkFinger>

			}
			if(bit_is_clear(PINB, 1) && !(enrollFinger)){
     de8:	19 99       	sbic	0x03, 1	; 3
     dea:	5a c0       	rjmp	.+180    	; 0xea0 <main+0x170>
     dec:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <enrollFinger>
     df0:	81 11       	cpse	r24, r1
     df2:	56 c0       	rjmp	.+172    	; 0xea0 <main+0x170>
				enrollFinger = true;
     df4:	c0 93 d0 03 	sts	0x03D0, r28	; 0x8003d0 <enrollFinger>
				lcd_send_info("Wprowadz odcisk","    dla: ADMIN   ");
     df8:	63 e3       	ldi	r22, 0x33	; 51
     dfa:	73 e0       	ldi	r23, 0x03	; 3
     dfc:	85 e4       	ldi	r24, 0x45	; 69
     dfe:	93 e0       	ldi	r25, 0x03	; 3
     e00:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     e04:	ff ef       	ldi	r31, 0xFF	; 255
     e06:	23 ed       	ldi	r18, 0xD3	; 211
     e08:	80 e3       	ldi	r24, 0x30	; 48
     e0a:	f1 50       	subi	r31, 0x01	; 1
     e0c:	20 40       	sbci	r18, 0x00	; 0
     e0e:	80 40       	sbci	r24, 0x00	; 0
     e10:	e1 f7       	brne	.-8      	; 0xe0a <main+0xda>
     e12:	00 c0       	rjmp	.+0      	; 0xe14 <main+0xe4>
     e14:	00 00       	nop
				_delay_ms(1000);
				checkFinger();
     e16:	0e 94 73 04 	call	0x8e6	; 0x8e6 <checkFinger>
				if(mainUser){
     e1a:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <mainUser>
     e1e:	88 23       	and	r24, r24
     e20:	41 f1       	breq	.+80     	; 0xe72 <main+0x142>
					id = getID();
     e22:	0e 94 cb 05 	call	0xb96	; 0xb96 <getID>
     e26:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <id>
					if(id == mainUserID){
     e2a:	48 2f       	mov	r20, r24
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     e32:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     e36:	42 17       	cp	r20, r18
     e38:	53 07       	cpc	r21, r19
     e3a:	c1 f4       	brne	.+48     	; 0xe6c <main+0x13c>
						lcd_send_info("  Niedozwolona  ", "operacja!(ADMIN)");
     e3c:	65 e5       	ldi	r22, 0x55	; 85
     e3e:	73 e0       	ldi	r23, 0x03	; 3
     e40:	86 e6       	ldi	r24, 0x66	; 102
     e42:	93 e0       	ldi	r25, 0x03	; 3
     e44:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     e48:	9f ef       	ldi	r25, 0xFF	; 255
     e4a:	e7 ea       	ldi	r30, 0xA7	; 167
     e4c:	f1 e6       	ldi	r31, 0x61	; 97
     e4e:	91 50       	subi	r25, 0x01	; 1
     e50:	e0 40       	sbci	r30, 0x00	; 0
     e52:	f0 40       	sbci	r31, 0x00	; 0
     e54:	e1 f7       	brne	.-8      	; 0xe4e <main+0x11e>
     e56:	00 c0       	rjmp	.+0      	; 0xe58 <main+0x128>
     e58:	00 00       	nop
						_delay_ms(2000);
						enrollFinger = false;
     e5a:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <enrollFinger>
						lcd_send_info("Drzwi zamkniete", "");
     e5e:	60 e1       	ldi	r22, 0x10	; 16
     e60:	73 e0       	ldi	r23, 0x03	; 3
     e62:	8b e8       	ldi	r24, 0x8B	; 139
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     e6a:	1a c0       	rjmp	.+52     	; 0xea0 <main+0x170>
					}
					else{
						newFinger(id);
     e6c:	0e 94 96 02 	call	0x52c	; 0x52c <newFinger>
     e70:	17 c0       	rjmp	.+46     	; 0xea0 <main+0x170>
					}
				}
				else{
					lcd_send_info("Palec nie nalezy", "    do: ADMIN   ");
     e72:	67 e7       	ldi	r22, 0x77	; 119
     e74:	73 e0       	ldi	r23, 0x03	; 3
     e76:	88 e8       	ldi	r24, 0x88	; 136
     e78:	93 e0       	ldi	r25, 0x03	; 3
     e7a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
					enrollFinger = false;
     e7e:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <enrollFinger>
     e82:	2f ef       	ldi	r18, 0xFF	; 255
     e84:	87 ea       	ldi	r24, 0xA7	; 167
     e86:	91 e6       	ldi	r25, 0x61	; 97
     e88:	21 50       	subi	r18, 0x01	; 1
     e8a:	80 40       	sbci	r24, 0x00	; 0
     e8c:	90 40       	sbci	r25, 0x00	; 0
     e8e:	e1 f7       	brne	.-8      	; 0xe88 <main+0x158>
     e90:	00 c0       	rjmp	.+0      	; 0xe92 <main+0x162>
     e92:	00 00       	nop
					_delay_ms(2000);
					lcd_send_info("Drzwi zamkniete", "");
     e94:	60 e1       	ldi	r22, 0x10	; 16
     e96:	73 e0       	ldi	r23, 0x03	; 3
     e98:	8b e8       	ldi	r24, 0x8B	; 139
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
				}
			}
			if(bit_is_clear(PINB, 2) && !(removeFinger)){
     ea0:	1a 99       	sbic	0x03, 2	; 3
     ea2:	93 cf       	rjmp	.-218    	; 0xdca <main+0x9a>
     ea4:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <removeFinger>
     ea8:	81 11       	cpse	r24, r1
     eaa:	8f cf       	rjmp	.-226    	; 0xdca <main+0x9a>
				removeFinger = true;
     eac:	c0 93 cf 03 	sts	0x03CF, r28	; 0x8003cf <removeFinger>
				lcd_send_info("Wprowadz odcisk","    dla: ADMIN   ");
     eb0:	63 e3       	ldi	r22, 0x33	; 51
     eb2:	73 e0       	ldi	r23, 0x03	; 3
     eb4:	85 e4       	ldi	r24, 0x45	; 69
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     ebc:	ef ef       	ldi	r30, 0xFF	; 255
     ebe:	f3 ed       	ldi	r31, 0xD3	; 211
     ec0:	20 e3       	ldi	r18, 0x30	; 48
     ec2:	e1 50       	subi	r30, 0x01	; 1
     ec4:	f0 40       	sbci	r31, 0x00	; 0
     ec6:	20 40       	sbci	r18, 0x00	; 0
     ec8:	e1 f7       	brne	.-8      	; 0xec2 <main+0x192>
     eca:	00 c0       	rjmp	.+0      	; 0xecc <main+0x19c>
     ecc:	00 00       	nop
				_delay_ms(1000);
				checkFinger();
     ece:	0e 94 73 04 	call	0x8e6	; 0x8e6 <checkFinger>
				if(mainUser){
     ed2:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <mainUser>
     ed6:	88 23       	and	r24, r24
     ed8:	09 f4       	brne	.+2      	; 0xedc <main+0x1ac>
     eda:	4c c0       	rjmp	.+152    	; 0xf74 <main+0x244>
					id = getID();
     edc:	0e 94 cb 05 	call	0xb96	; 0xb96 <getID>
     ee0:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <id>
					if(id == mainUserID){
     ee4:	48 2f       	mov	r20, r24
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     eec:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     ef0:	42 17       	cp	r20, r18
     ef2:	53 07       	cpc	r21, r19
     ef4:	d1 f5       	brne	.+116    	; 0xf6a <main+0x23a>
						lcd_send_info("  Czy nadpisac  ", "palec dla ADMIN?");
     ef6:	69 e9       	ldi	r22, 0x99	; 153
     ef8:	73 e0       	ldi	r23, 0x03	; 3
     efa:	8a ea       	ldi	r24, 0xAA	; 170
     efc:	93 e0       	ldi	r25, 0x03	; 3
     efe:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	97 ea       	ldi	r25, 0xA7	; 167
     f06:	e1 e6       	ldi	r30, 0x61	; 97
     f08:	81 50       	subi	r24, 0x01	; 1
     f0a:	90 40       	sbci	r25, 0x00	; 0
     f0c:	e0 40       	sbci	r30, 0x00	; 0
     f0e:	e1 f7       	brne	.-8      	; 0xf08 <main+0x1d8>
     f10:	00 c0       	rjmp	.+0      	; 0xf12 <main+0x1e2>
     f12:	00 00       	nop
						_delay_ms(2000);
						lcd_send_info("B1- NIE  B2- TAK", "");
     f14:	60 e1       	ldi	r22, 0x10	; 16
     f16:	73 e0       	ldi	r23, 0x03	; 3
     f18:	8b eb       	ldi	r24, 0xBB	; 187
     f1a:	93 e0       	ldi	r25, 0x03	; 3
     f1c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
						while(true){
							if(bit_is_clear(PINB, 0)){
     f20:	18 99       	sbic	0x03, 0	; 3
     f22:	14 c0       	rjmp	.+40     	; 0xf4c <main+0x21c>
								lcd_send_info("Drzwi zamkniete", "");
     f24:	60 e1       	ldi	r22, 0x10	; 16
     f26:	73 e0       	ldi	r23, 0x03	; 3
     f28:	8b e8       	ldi	r24, 0x8B	; 139
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
								removeFinger = false;
     f30:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <removeFinger>
								mainUser = false;
     f34:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <mainUser>
     f38:	ff ef       	ldi	r31, 0xFF	; 255
     f3a:	23 ec       	ldi	r18, 0xC3	; 195
     f3c:	89 e0       	ldi	r24, 0x09	; 9
     f3e:	f1 50       	subi	r31, 0x01	; 1
     f40:	20 40       	sbci	r18, 0x00	; 0
     f42:	80 40       	sbci	r24, 0x00	; 0
     f44:	e1 f7       	brne	.-8      	; 0xf3e <main+0x20e>
     f46:	00 c0       	rjmp	.+0      	; 0xf48 <main+0x218>
     f48:	00 00       	nop
     f4a:	3f cf       	rjmp	.-386    	; 0xdca <main+0x9a>
								_delay_ms(200);
								break;
							}
							else if(bit_is_clear(PINB, 2)){
     f4c:	1a 99       	sbic	0x03, 2	; 3
     f4e:	e8 cf       	rjmp	.-48     	; 0xf20 <main+0x1f0>
								newFinger(mainUserID);
     f50:	f8 01       	movw	r30, r16
     f52:	80 81       	ld	r24, Z
     f54:	0e 94 96 02 	call	0x52c	; 0x52c <newFinger>
								mainUser = false;
     f58:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <mainUser>
								lcd_send_info("Drzwi zamkniete", "");
     f5c:	60 e1       	ldi	r22, 0x10	; 16
     f5e:	73 e0       	ldi	r23, 0x03	; 3
     f60:	8b e8       	ldi	r24, 0x8B	; 139
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
								break;
     f68:	30 cf       	rjmp	.-416    	; 0xdca <main+0x9a>
							}
						}
					}
					else{
						deleteFinger(id);
     f6a:	0e 94 18 04 	call	0x830	; 0x830 <deleteFinger>
						mainUser = false;
     f6e:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <mainUser>
     f72:	2b cf       	rjmp	.-426    	; 0xdca <main+0x9a>
					}
				}
				else{
					lcd_send_info("Palec nie nalezy", "    do: ADMIN   ");
     f74:	67 e7       	ldi	r22, 0x77	; 119
     f76:	73 e0       	ldi	r23, 0x03	; 3
     f78:	88 e8       	ldi	r24, 0x88	; 136
     f7a:	93 e0       	ldi	r25, 0x03	; 3
     f7c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
					removeFinger = false;
     f80:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <removeFinger>
     f84:	ff ef       	ldi	r31, 0xFF	; 255
     f86:	27 ea       	ldi	r18, 0xA7	; 167
     f88:	81 e6       	ldi	r24, 0x61	; 97
     f8a:	f1 50       	subi	r31, 0x01	; 1
     f8c:	20 40       	sbci	r18, 0x00	; 0
     f8e:	80 40       	sbci	r24, 0x00	; 0
     f90:	e1 f7       	brne	.-8      	; 0xf8a <main+0x25a>
     f92:	00 c0       	rjmp	.+0      	; 0xf94 <main+0x264>
     f94:	00 00       	nop
					_delay_ms(2000);
					lcd_send_info("Drzwi zamkniete", "");
     f96:	60 e1       	ldi	r22, 0x10	; 16
     f98:	73 e0       	ldi	r23, 0x03	; 3
     f9a:	8b e8       	ldi	r24, 0x8B	; 139
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     fa2:	13 cf       	rjmp	.-474    	; 0xdca <main+0x9a>
				}
			}
		}
		//gdy drzwi sa otwarte
		else if(!doorLocked){
     fa4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <doorLocked>
     fa8:	81 11       	cpse	r24, r1
     faa:	0f cf       	rjmp	.-482    	; 0xdca <main+0x9a>
			if(bit_is_clear(PINB, 0)){
     fac:	18 99       	sbic	0x03, 0	; 3
     fae:	0d cf       	rjmp	.-486    	; 0xdca <main+0x9a>
				doorLocked = true;
     fb0:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <doorLocked>
				PORTB ^= 1 << PINB3;
     fb4:	85 b1       	in	r24, 0x05	; 5
     fb6:	8d 27       	eor	r24, r29
     fb8:	85 b9       	out	0x05, r24	; 5
				lcd_send_info("Drzwi zamkniete", "");
     fba:	60 e1       	ldi	r22, 0x10	; 16
     fbc:	73 e0       	ldi	r23, 0x03	; 3
     fbe:	8b e8       	ldi	r24, 0x8B	; 139
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_send_info>
     fc6:	9f ef       	ldi	r25, 0xFF	; 255
     fc8:	e3 ed       	ldi	r30, 0xD3	; 211
     fca:	f0 e3       	ldi	r31, 0x30	; 48
     fcc:	91 50       	subi	r25, 0x01	; 1
     fce:	e0 40       	sbci	r30, 0x00	; 0
     fd0:	f0 40       	sbci	r31, 0x00	; 0
     fd2:	e1 f7       	brne	.-8      	; 0xfcc <main+0x29c>
     fd4:	00 c0       	rjmp	.+0      	; 0xfd6 <main+0x2a6>
     fd6:	00 00       	nop
     fd8:	f8 ce       	rjmp	.-528    	; 0xdca <main+0x9a>

00000fda <initUART>:
#include <avr/io.h>


void initUART(){
	//?
	DDRD |= (1 << PIND0);
     fda:	50 9a       	sbi	0x0a, 0	; 10
	DDRD &= ~ (1 << PIND1);
     fdc:	51 98       	cbi	0x0a, 1	; 10

	UBRR0H = ((_UBRR) & 0xF00);
     fde:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t) ((_UBRR) & 0xFF);
     fe2:	80 e1       	ldi	r24, 0x10	; 16
     fe4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	TX_START();
     fe8:	e1 ec       	ldi	r30, 0xC1	; 193
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	88 60       	ori	r24, 0x08	; 8
     ff0:	80 83       	st	Z, r24
	RX_START();
     ff2:	80 81       	ld	r24, Z
     ff4:	80 61       	ori	r24, 0x10	; 16
     ff6:	80 83       	st	Z, r24

	UCSR0C = (0x03 << UCSZ00);
     ff8:	86 e0       	ldi	r24, 0x06	; 6
     ffa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     ffe:	08 95       	ret

00001000 <getByte>:

}

uint8_t getByte(){
	//sprawdz czy zostalo cos otrzymane
	while (!(UCSR0A & (1 << RXC0)));
    1000:	e0 ec       	ldi	r30, 0xC0	; 192
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	88 23       	and	r24, r24
    1008:	ec f7       	brge	.-6      	; 0x1004 <getByte+0x4>
	return (uint8_t) UDR0;
    100a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
    100e:	08 95       	ret

00001010 <putByte>:

void putByte(uint8_t data){
	//zostan az rejestr nie bedzie pusty
	while (!(UCSR0A & (1 << UDRE0)));
    1010:	e0 ec       	ldi	r30, 0xC0	; 192
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	90 81       	ld	r25, Z
    1016:	95 ff       	sbrs	r25, 5
    1018:	fd cf       	rjmp	.-6      	; 0x1014 <putByte+0x4>
	UDR0 = data;
    101a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    101e:	08 95       	ret

00001020 <__umulhisi3>:
    1020:	a2 9f       	mul	r26, r18
    1022:	b0 01       	movw	r22, r0
    1024:	b3 9f       	mul	r27, r19
    1026:	c0 01       	movw	r24, r0
    1028:	a3 9f       	mul	r26, r19
    102a:	70 0d       	add	r23, r0
    102c:	81 1d       	adc	r24, r1
    102e:	11 24       	eor	r1, r1
    1030:	91 1d       	adc	r25, r1
    1032:	b2 9f       	mul	r27, r18
    1034:	70 0d       	add	r23, r0
    1036:	81 1d       	adc	r24, r1
    1038:	11 24       	eor	r1, r1
    103a:	91 1d       	adc	r25, r1
    103c:	08 95       	ret

0000103e <itoa>:
    103e:	45 32       	cpi	r20, 0x25	; 37
    1040:	51 05       	cpc	r21, r1
    1042:	20 f4       	brcc	.+8      	; 0x104c <itoa+0xe>
    1044:	42 30       	cpi	r20, 0x02	; 2
    1046:	10 f0       	brcs	.+4      	; 0x104c <itoa+0xe>
    1048:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__itoa_ncheck>
    104c:	fb 01       	movw	r30, r22
    104e:	10 82       	st	Z, r1
    1050:	cb 01       	movw	r24, r22
    1052:	08 95       	ret

00001054 <__itoa_ncheck>:
    1054:	bb 27       	eor	r27, r27
    1056:	4a 30       	cpi	r20, 0x0A	; 10
    1058:	31 f4       	brne	.+12     	; 0x1066 <__itoa_ncheck+0x12>
    105a:	99 23       	and	r25, r25
    105c:	22 f4       	brpl	.+8      	; 0x1066 <__itoa_ncheck+0x12>
    105e:	bd e2       	ldi	r27, 0x2D	; 45
    1060:	90 95       	com	r25
    1062:	81 95       	neg	r24
    1064:	9f 4f       	sbci	r25, 0xFF	; 255
    1066:	0c 94 36 08 	jmp	0x106c	; 0x106c <__utoa_common>

0000106a <__utoa_ncheck>:
    106a:	bb 27       	eor	r27, r27

0000106c <__utoa_common>:
    106c:	fb 01       	movw	r30, r22
    106e:	55 27       	eor	r21, r21
    1070:	aa 27       	eor	r26, r26
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	aa 1f       	adc	r26, r26
    1078:	a4 17       	cp	r26, r20
    107a:	10 f0       	brcs	.+4      	; 0x1080 <__utoa_common+0x14>
    107c:	a4 1b       	sub	r26, r20
    107e:	83 95       	inc	r24
    1080:	50 51       	subi	r21, 0x10	; 16
    1082:	b9 f7       	brne	.-18     	; 0x1072 <__utoa_common+0x6>
    1084:	a0 5d       	subi	r26, 0xD0	; 208
    1086:	aa 33       	cpi	r26, 0x3A	; 58
    1088:	08 f0       	brcs	.+2      	; 0x108c <__utoa_common+0x20>
    108a:	a9 5d       	subi	r26, 0xD9	; 217
    108c:	a1 93       	st	Z+, r26
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	79 f7       	brne	.-34     	; 0x1070 <__utoa_common+0x4>
    1092:	b1 11       	cpse	r27, r1
    1094:	b1 93       	st	Z+, r27
    1096:	11 92       	st	Z+, r1
    1098:	cb 01       	movw	r24, r22
    109a:	0c 94 4f 08 	jmp	0x109e	; 0x109e <strrev>

0000109e <strrev>:
    109e:	dc 01       	movw	r26, r24
    10a0:	fc 01       	movw	r30, r24
    10a2:	67 2f       	mov	r22, r23
    10a4:	71 91       	ld	r23, Z+
    10a6:	77 23       	and	r23, r23
    10a8:	e1 f7       	brne	.-8      	; 0x10a2 <strrev+0x4>
    10aa:	32 97       	sbiw	r30, 0x02	; 2
    10ac:	04 c0       	rjmp	.+8      	; 0x10b6 <strrev+0x18>
    10ae:	7c 91       	ld	r23, X
    10b0:	6d 93       	st	X+, r22
    10b2:	70 83       	st	Z, r23
    10b4:	62 91       	ld	r22, -Z
    10b6:	ae 17       	cp	r26, r30
    10b8:	bf 07       	cpc	r27, r31
    10ba:	c8 f3       	brcs	.-14     	; 0x10ae <strrev+0x10>
    10bc:	08 95       	ret

000010be <_exit>:
    10be:	f8 94       	cli

000010c0 <__stop_program>:
    10c0:	ff cf       	rjmp	.-2      	; 0x10c0 <__stop_program>
