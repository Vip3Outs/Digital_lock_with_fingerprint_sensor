
Zamek szyfrowy z czytnikiem linii papilarnych.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000030c  00800100  00001ab0  00001b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ab0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080040c  0080040c  00001e50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004550  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca5  00000000  00000000  00006598  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000155e  00000000  00000000  0000723d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000388  00000000  00000000  0000879c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070b  00000000  00000000  00008b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018b2  00000000  00000000  0000922f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000aae1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 eb       	ldi	r30, 0xB0	; 176
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 30       	cpi	r26, 0x0C	; 12
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	ac e0       	ldi	r26, 0x0C	; 12
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 31       	cpi	r26, 0x1D	; 29
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 df 08 	call	0x11be	; 0x11be <main>
      9e:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <fps_transmit_header>:
#include "fps.h"

void fps_transmit_header(){
	//starting code
	uart_putByte(0xEF);
      a6:	8f ee       	ldi	r24, 0xEF	; 239
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0x01);
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//address
	uart_putByte(0xFF);
      b6:	8f ef       	ldi	r24, 0xFF	; 255
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0xFF);
      be:	8f ef       	ldi	r24, 0xFF	; 255
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0xFF);
      c6:	8f ef       	ldi	r24, 0xFF	; 255
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0xFF);
      ce:	8f ef       	ldi	r24, 0xFF	; 255
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//package identifier
	uart_putByte(0x01);
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
      de:	08 95       	ret

000000e0 <fps_confirmation>:
}

void fps_confirmation(uint8_t instruction_code){
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	d8 2f       	mov	r29, r24
      e6:	c9 e0       	ldi	r28, 0x09	; 9

	for(uint8_t i = 0; i<9; ++i){
		uart_getByte();
      e8:	0e 94 12 0b 	call	0x1624	; 0x1624 <uart_getByte>
      ec:	c1 50       	subi	r28, 0x01	; 1
	uart_putByte(0x01);
}

void fps_confirmation(uint8_t instruction_code){

	for(uint8_t i = 0; i<9; ++i){
      ee:	e1 f7       	brne	.-8      	; 0xe8 <fps_confirmation+0x8>
		uart_getByte();
	}
	//confirmation code
	tmp[0] = uart_getByte();
      f0:	0e 94 12 0b 	call	0x1624	; 0x1624 <uart_getByte>
      f4:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <tmp>
	if(instruction_code == 0x1D){
      f8:	dd 31       	cpi	r29, 0x1D	; 29
      fa:	49 f4       	brne	.+18     	; 0x10e <fps_confirmation+0x2e>
		tmp[1] = uart_getByte();
      fc:	0e 94 12 0b 	call	0x1624	; 0x1624 <uart_getByte>
     100:	c3 e1       	ldi	r28, 0x13	; 19
     102:	d4 e0       	ldi	r29, 0x04	; 4
     104:	89 83       	std	Y+1, r24	; 0x01
		tmp[2] = uart_getByte();
     106:	0e 94 12 0b 	call	0x1624	; 0x1624 <uart_getByte>
     10a:	8a 83       	std	Y+2, r24	; 0x02
     10c:	10 c0       	rjmp	.+32     	; 0x12e <fps_confirmation+0x4e>
	}
	if(instruction_code == 0x04){
     10e:	d4 30       	cpi	r29, 0x04	; 4
     110:	71 f4       	brne	.+28     	; 0x12e <fps_confirmation+0x4e>
		//page_ID
		tmp[1] = uart_getByte();
     112:	0e 94 12 0b 	call	0x1624	; 0x1624 <uart_getByte>
     116:	c3 e1       	ldi	r28, 0x13	; 19
     118:	d4 e0       	ldi	r29, 0x04	; 4
     11a:	89 83       	std	Y+1, r24	; 0x01
		tmp[2] = uart_getByte();
     11c:	0e 94 12 0b 	call	0x1624	; 0x1624 <uart_getByte>
     120:	8a 83       	std	Y+2, r24	; 0x02
		//MatchScore
		tmp[3] = uart_getByte();
     122:	0e 94 12 0b 	call	0x1624	; 0x1624 <uart_getByte>
     126:	8b 83       	std	Y+3, r24	; 0x03
		tmp[4] = uart_getByte();
     128:	0e 94 12 0b 	call	0x1624	; 0x1624 <uart_getByte>
     12c:	8c 83       	std	Y+4, r24	; 0x04
	}
	//checksum
	uart_getByte();
     12e:	0e 94 12 0b 	call	0x1624	; 0x1624 <uart_getByte>
	uart_getByte();
     132:	0e 94 12 0b 	call	0x1624	; 0x1624 <uart_getByte>
}
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	08 95       	ret

0000013c <fps_read_finger>:



void fps_read_finger(){
	//header
	fps_transmit_header();
     13c:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	uart_putByte(0x00);
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0x03);
     148:	83 e0       	ldi	r24, 0x03	; 3
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//instruction code
	uart_putByte(0x01);
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//sum
	uart_putByte(0x00);
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0x05);
     160:	85 e0       	ldi	r24, 0x05	; 5
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	
	fps_confirmation(0x01);
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
     16e:	08 95       	ret

00000170 <fps_img2TZ>:
}

void fps_img2TZ(uint8_t buffer){
     170:	cf 93       	push	r28
     172:	c8 2f       	mov	r28, r24
	//header
	fps_transmit_header();
     174:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	uart_putByte(0x00);
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0x04);
     180:	84 e0       	ldi	r24, 0x04	; 4
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//instruction code
	uart_putByte(0x02);
     188:	82 e0       	ldi	r24, 0x02	; 2
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//bufferID
	uart_putByte(buffer);
     190:	8c 2f       	mov	r24, r28
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//sum
	buffer+=7;
	uart_putByte(buffer & 0xFF00);
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(buffer & 0x00FF);
     1a0:	87 e0       	ldi	r24, 0x07	; 7
     1a2:	8c 0f       	add	r24, r28
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
		
	fps_confirmation(0x02);
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
}
     1b0:	cf 91       	pop	r28
     1b2:	08 95       	ret

000001b4 <fps_search>:

void fps_search(){
	//header
	fps_transmit_header();
     1b4:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	uart_putByte(0x00);
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0x08);
     1c0:	88 e0       	ldi	r24, 0x08	; 8
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//instruction
	uart_putByte(0x04);
     1c8:	84 e0       	ldi	r24, 0x04	; 4
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//buffer_ID
	uart_putByte(0x01);
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//start location
	uart_putByte(0x00);
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0x01);
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//end location
	uart_putByte(0x00);
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0xFF);
     1f0:	8f ef       	ldi	r24, 0xFF	; 255
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//sum
	uart_putByte(0x01);
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0x0E);
     200:	8e e0       	ldi	r24, 0x0E	; 14
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>

	fps_confirmation(0x04);
     208:	84 e0       	ldi	r24, 0x04	; 4
     20a:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
     20e:	08 95       	ret

00000210 <fps_genModel>:
}

void fps_genModel(){
	//header
	fps_transmit_header();
     210:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	uart_putByte(0x00);
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0x03);
     21c:	83 e0       	ldi	r24, 0x03	; 3
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//instruction
	uart_putByte(0x05);
     224:	85 e0       	ldi	r24, 0x05	; 5
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//sum
	uart_putByte(0x00);
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0x09);
     234:	89 e0       	ldi	r24, 0x09	; 9
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	
	fps_confirmation(0x05);
     23c:	85 e0       	ldi	r24, 0x05	; 5
     23e:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
     242:	08 95       	ret

00000244 <fps_storeModel>:
}

void fps_storeModel(uint16_t storeID){
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	ec 01       	movw	r28, r24
	//header
	fps_transmit_header();
     24a:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	uart_putByte(0x00);
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0x06);
     256:	86 e0       	ldi	r24, 0x06	; 6
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//instruction
	uart_putByte(0x06);
     25e:	86 e0       	ldi	r24, 0x06	; 6
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//bufferID
	uart_putByte(0x01);
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//location number
	uart_putByte(storeID & 0xFF00);
     26e:	ce 01       	movw	r24, r28
     270:	88 27       	eor	r24, r24
     272:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(storeID & 0x00FF);
     276:	ce 01       	movw	r24, r28
     278:	99 27       	eor	r25, r25
     27a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//sum
	storeID += 14;
     27e:	2e 96       	adiw	r28, 0x0e	; 14
	uart_putByte(storeID & 0xFF00);
     280:	ce 01       	movw	r24, r28
     282:	88 27       	eor	r24, r24
     284:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(storeID & 0x00FF);
     288:	ce 01       	movw	r24, r28
     28a:	99 27       	eor	r25, r25
     28c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	
	fps_confirmation(0x06);
     290:	86 e0       	ldi	r24, 0x06	; 6
     292:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
}
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <fps_deleteModel>:

void fps_deleteModel(uint16_t deleteID){
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	ec 01       	movw	r28, r24
	//header
	fps_transmit_header();
     2a2:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	uart_putByte(0x00);
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0x07);
     2ae:	87 e0       	ldi	r24, 0x07	; 7
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//instruction
	uart_putByte(0x0c);
     2b6:	8c e0       	ldi	r24, 0x0C	; 12
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//pageID
	uart_putByte(deleteID & 0xFF00);
     2be:	ce 01       	movw	r24, r28
     2c0:	88 27       	eor	r24, r24
     2c2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(deleteID & 0x00FF);
     2c6:	ce 01       	movw	r24, r28
     2c8:	99 27       	eor	r25, r25
     2ca:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//number of templates to be deleted
	uart_putByte(0x00);
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0x01);
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//sum
	deleteID += 21;
     2de:	65 96       	adiw	r28, 0x15	; 21
	uart_putByte(deleteID & 0xFF00);
     2e0:	ce 01       	movw	r24, r28
     2e2:	88 27       	eor	r24, r24
     2e4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(deleteID & 0x00FF);
     2e8:	ce 01       	movw	r24, r28
     2ea:	99 27       	eor	r25, r25
     2ec:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	
	fps_confirmation(0x0c);
     2f0:	8c e0       	ldi	r24, 0x0C	; 12
     2f2:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <fps_templateNum>:

void fps_templateNum(){
	//header
	fps_transmit_header();
     2fc:	0e 94 53 00 	call	0xa6	; 0xa6 <fps_transmit_header>
	//length
	uart_putByte(0x00);
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0x03);
     308:	83 e0       	ldi	r24, 0x03	; 3
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//instruction
	uart_putByte(0x1D);	
     310:	8d e1       	ldi	r24, 0x1D	; 29
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	//sum
	uart_putByte(0x00);
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	uart_putByte(0x21);
     320:	81 e2       	ldi	r24, 0x21	; 33
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 1a 0b 	call	0x1634	; 0x1634 <uart_putByte>
	
	fps_confirmation(0x1D);
     328:	8d e1       	ldi	r24, 0x1D	; 29
     32a:	0e 94 70 00 	call	0xe0	; 0xe0 <fps_confirmation>
     32e:	08 95       	ret

00000330 <i2c_init>:
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    while ((TWCR & (1 << TWINT)) == 0);
}

void i2c_stop_condition(){
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     330:	8f ef       	ldi	r24, 0xFF	; 255
     332:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     336:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     33a:	08 95       	ret

0000033c <i2c_start_condition>:
     33c:	84 ea       	ldi	r24, 0xA4	; 164
     33e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     342:	ec eb       	ldi	r30, 0xBC	; 188
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	80 81       	ld	r24, Z
     348:	88 23       	and	r24, r24
     34a:	ec f7       	brge	.-6      	; 0x346 <i2c_start_condition+0xa>
     34c:	08 95       	ret

0000034e <i2c_send_byte>:
}

void i2c_send_byte(unsigned char byte){														
	TWDR = byte;
     34e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = (1 << TWINT) | (1 << TWEN);
     352:	84 e8       	ldi	r24, 0x84	; 132
     354:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while ((TWCR & (1 << TWINT)) == 0);
     358:	ec eb       	ldi	r30, 0xBC	; 188
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	80 81       	ld	r24, Z
     35e:	88 23       	and	r24, r24
     360:	ec f7       	brge	.-6      	; 0x35c <i2c_send_byte+0xe>
}
     362:	08 95       	ret

00000364 <i2c_send_packet>:

void i2c_send_packet(unsigned char value, unsigned char address){
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	c8 2f       	mov	r28, r24
     36a:	d6 2f       	mov	r29, r22
	i2c_start_condition();
     36c:	0e 94 9e 01 	call	0x33c	; 0x33c <i2c_start_condition>
	i2c_send_byte(address);
     370:	8d 2f       	mov	r24, r29
     372:	0e 94 a7 01 	call	0x34e	; 0x34e <i2c_send_byte>
	i2c_send_byte(value);
     376:	8c 2f       	mov	r24, r28
     378:	0e 94 a7 01 	call	0x34e	; 0x34e <i2c_send_byte>
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    while ((TWCR & (1 << TWINT)) == 0);
}

void i2c_stop_condition(){
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     37c:	84 e9       	ldi	r24, 0x94	; 148
     37e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
void i2c_send_packet(unsigned char value, unsigned char address){
	i2c_start_condition();
	i2c_send_byte(address);
	i2c_send_byte(value);
	i2c_stop_condition();
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <lcd_transmit_header>:
#include "lcd.h"
#include <util/delay.h>

uint8_t value;

void lcd_transmit_header(char tmp){
     388:	cf 93       	push	r28
     38a:	c8 2f       	mov	r28, r24
	i2c_send_packet(value |= 0x04, SLAVE_WRITE_ADDRESS);
     38c:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <value>
     390:	84 60       	ori	r24, 0x04	; 4
     392:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <value>
     396:	6e e7       	ldi	r22, 0x7E	; 126
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3a0:	30 e1       	ldi	r19, 0x10	; 16
     3a2:	3a 95       	dec	r19
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <lcd_transmit_header+0x1a>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <lcd_transmit_header+0x20>
	_delay_us(50);
	i2c_send_packet(value | (tmp << 4), SLAVE_WRITE_ADDRESS);
     3a8:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <value>
     3ac:	30 e1       	ldi	r19, 0x10	; 16
     3ae:	c3 9f       	mul	r28, r19
     3b0:	c0 01       	movw	r24, r0
     3b2:	11 24       	eor	r1, r1
     3b4:	6e e7       	ldi	r22, 0x7E	; 126
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	82 2b       	or	r24, r18
     3ba:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_send_packet>
	i2c_send_packet(value &= ~0x04, SLAVE_WRITE_ADDRESS);
     3be:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <value>
     3c2:	8b 7f       	andi	r24, 0xFB	; 251
     3c4:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <value>
     3c8:	6e e7       	ldi	r22, 0x7E	; 126
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_send_packet>
     3d2:	80 e1       	ldi	r24, 0x10	; 16
     3d4:	8a 95       	dec	r24
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <lcd_transmit_header+0x4c>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <lcd_transmit_header+0x52>
	_delay_us(50);
}
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <lcd_send_byte>:

void lcd_send_byte(char tmp){
     3de:	cf 93       	push	r28
     3e0:	c8 2f       	mov	r28, r24
	i2c_send_packet(value &= ~0x01, SLAVE_WRITE_ADDRESS); 
     3e2:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <value>
     3e6:	8e 7f       	andi	r24, 0xFE	; 254
     3e8:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <value>
     3ec:	6e e7       	ldi	r22, 0x7E	; 126
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_send_packet>
	lcd_transmit_header(tmp >> 4);
     3f6:	8c 2f       	mov	r24, r28
     3f8:	82 95       	swap	r24
     3fa:	8f 70       	andi	r24, 0x0F	; 15
     3fc:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_transmit_header>
	lcd_transmit_header(tmp);
     400:	8c 2f       	mov	r24, r28
     402:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_transmit_header>
}
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <lcd_send_char>:

void lcd_send_char(char tmp){
     40a:	cf 93       	push	r28
     40c:	c8 2f       	mov	r28, r24
	i2c_send_packet (value |= 0x01, SLAVE_WRITE_ADDRESS);
     40e:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <value>
     412:	81 60       	ori	r24, 0x01	; 1
     414:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <value>
     418:	6e e7       	ldi	r22, 0x7E	; 126
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_send_packet>
	lcd_transmit_header(tmp >> 4);
     422:	8c 2f       	mov	r24, r28
     424:	82 95       	swap	r24
     426:	8f 70       	andi	r24, 0x0F	; 15
     428:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_transmit_header>
	lcd_transmit_header(tmp);
     42c:	8c 2f       	mov	r24, r28
     42e:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_transmit_header>
}
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <lcd_init>:

void lcd_init(){
	value = 0;
     436:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <value>
	i2c_init();
     43a:	0e 94 98 01 	call	0x330	; 0x330 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     43e:	85 ea       	ldi	r24, 0xA5	; 165
     440:	9e e0       	ldi	r25, 0x0E	; 14
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	f1 f7       	brne	.-4      	; 0x442 <lcd_init+0xc>
     446:	00 c0       	rjmp	.+0      	; 0x448 <lcd_init+0x12>
     448:	00 00       	nop
	_delay_ms(15);
	lcd_transmit_header(0b00000011);	//interfejs 4bitowy
     44a:	83 e0       	ldi	r24, 0x03	; 3
     44c:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_transmit_header>
     450:	87 ee       	ldi	r24, 0xE7	; 231
     452:	93 e0       	ldi	r25, 0x03	; 3
     454:	01 97       	sbiw	r24, 0x01	; 1
     456:	f1 f7       	brne	.-4      	; 0x454 <lcd_init+0x1e>
     458:	00 c0       	rjmp	.+0      	; 0x45a <lcd_init+0x24>
     45a:	00 00       	nop
	_delay_ms(4);
	lcd_transmit_header(0b00000011);				
     45c:	83 e0       	ldi	r24, 0x03	; 3
     45e:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_transmit_header>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     462:	91 e2       	ldi	r25, 0x21	; 33
     464:	9a 95       	dec	r25
     466:	f1 f7       	brne	.-4      	; 0x464 <lcd_init+0x2e>
     468:	00 00       	nop
	_delay_us(100);							
	lcd_transmit_header(0b00000011);
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_transmit_header>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     470:	89 ef       	ldi	r24, 0xF9	; 249
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <lcd_init+0x3e>
     478:	00 c0       	rjmp	.+0      	; 0x47a <lcd_init+0x44>
     47a:	00 00       	nop
	_delay_ms(1);				
	lcd_transmit_header(0b00000010);
     47c:	82 e0       	ldi	r24, 0x02	; 2
     47e:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_transmit_header>
     482:	89 ef       	ldi	r24, 0xF9	; 249
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <lcd_init+0x50>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <lcd_init+0x56>
     48c:	00 00       	nop
	_delay_ms(1);			
	lcd_send_byte(0b00101000);	//rozmiar 16x2 i 5x8dot (0x28)	
     48e:	88 e2       	ldi	r24, 0x28	; 40
     490:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_send_byte>
     494:	89 ef       	ldi	r24, 0xF9	; 249
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <lcd_init+0x62>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <lcd_init+0x68>
     49e:	00 00       	nop
	_delay_ms(1);
	lcd_send_byte(0b00001100);	//wylaczenie kursora i miganie kursora (0x0C)
     4a0:	8c e0       	ldi	r24, 0x0C	; 12
     4a2:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_send_byte>
     4a6:	89 ef       	ldi	r24, 0xF9	; 249
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <lcd_init+0x74>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <lcd_init+0x7a>
     4b0:	00 00       	nop
	_delay_ms(1);
	lcd_send_byte(0b00000110);	//autoinkrementacja kursora (0x06)
     4b2:	86 e0       	ldi	r24, 0x06	; 6
     4b4:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_send_byte>
     4b8:	89 ef       	ldi	r24, 0xF9	; 249
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	f1 f7       	brne	.-4      	; 0x4bc <lcd_init+0x86>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <lcd_init+0x8c>
     4c2:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(value |= 0x08, SLAVE_WRITE_ADDRESS);	//podswietlenie (backlight)
     4c4:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <value>
     4c8:	88 60       	ori	r24, 0x08	; 8
     4ca:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <value>
     4ce:	6e e7       	ldi	r22, 0x7E	; 126
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_send_packet>
	i2c_send_packet(value &=~ 0x02, SLAVE_WRITE_ADDRESS);	
     4d8:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <value>
     4dc:	8d 7f       	andi	r24, 0xFD	; 253
     4de:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <value>
     4e2:	6e e7       	ldi	r22, 0x7E	; 126
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_send_packet>
     4ec:	08 95       	ret

000004ee <lcd_clear>:
}

void lcd_clear(){
	lcd_send_byte(0x01);
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4f4:	86 e7       	ldi	r24, 0x76	; 118
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <lcd_clear+0xa>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <lcd_clear+0x10>
     4fe:	00 00       	nop
     500:	08 95       	ret

00000502 <lcd_setCursor>:
	_delay_us(1500);
}

void lcd_setCursor(char col, char row){
	char tmp;
	tmp = 0x40 * row + col;
     502:	90 e4       	ldi	r25, 0x40	; 64
     504:	69 9f       	mul	r22, r25
     506:	80 0d       	add	r24, r0
     508:	11 24       	eor	r1, r1
	tmp |= 0x80;
	lcd_send_byte(tmp);
     50a:	80 68       	ori	r24, 0x80	; 128
     50c:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_send_byte>
     510:	08 95       	ret

00000512 <lcd_send_string>:
}

void lcd_send_string(const char *str){
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	ec 01       	movw	r28, r24
	while(*str != 0)
     518:	88 81       	ld	r24, Y
     51a:	88 23       	and	r24, r24
     51c:	31 f0       	breq	.+12     	; 0x52a <lcd_send_string+0x18>
     51e:	21 96       	adiw	r28, 0x01	; 1
	lcd_send_char(*str++);
     520:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_send_char>
	tmp |= 0x80;
	lcd_send_byte(tmp);
}

void lcd_send_string(const char *str){
	while(*str != 0)
     524:	89 91       	ld	r24, Y+
     526:	81 11       	cpse	r24, r1
     528:	fb cf       	rjmp	.-10     	; 0x520 <lcd_send_string+0xe>
	lcd_send_char(*str++);
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <lcd_send_info>:

void lcd_send_info(const char *line1, const char *line2){
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	8c 01       	movw	r16, r24
     53a:	eb 01       	movw	r28, r22
	lcd_clear();
     53c:	0e 94 77 02 	call	0x4ee	; 0x4ee <lcd_clear>

void lcd_setCursor(char col, char row){
	char tmp;
	tmp = 0x40 * row + col;
	tmp |= 0x80;
	lcd_send_byte(tmp);
     540:	80 e8       	ldi	r24, 0x80	; 128
     542:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_send_byte>
}

void lcd_send_info(const char *line1, const char *line2){
	lcd_clear();
	lcd_setCursor(0,0);
	lcd_send_string(line1);
     546:	c8 01       	movw	r24, r16
     548:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>

void lcd_setCursor(char col, char row){
	char tmp;
	tmp = 0x40 * row + col;
	tmp |= 0x80;
	lcd_send_byte(tmp);
     54c:	80 ec       	ldi	r24, 0xC0	; 192
     54e:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_send_byte>
void lcd_send_info(const char *line1, const char *line2){
	lcd_clear();
	lcd_setCursor(0,0);
	lcd_send_string(line1);
	lcd_setCursor(0,1);
	lcd_send_string(line2);
     552:	ce 01       	movw	r24, r28
     554:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>
}
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	08 95       	ret

00000562 <lcd_special_char>:

void lcd_special_char(char col, char row, uint8_t num){
     562:	cf 93       	push	r28
     564:	c4 2f       	mov	r28, r20
	_delay_us(1500);
}

void lcd_setCursor(char col, char row){
	char tmp;
	tmp = 0x40 * row + col;
     566:	90 e4       	ldi	r25, 0x40	; 64
     568:	69 9f       	mul	r22, r25
     56a:	80 0d       	add	r24, r0
     56c:	11 24       	eor	r1, r1
	tmp |= 0x80;
	lcd_send_byte(tmp);
     56e:	80 68       	ori	r24, 0x80	; 128
     570:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_send_byte>
	lcd_send_string(line2);
}

void lcd_special_char(char col, char row, uint8_t num){
	lcd_setCursor(col, row);
	lcd_send_char(num);
     574:	8c 2f       	mov	r24, r28
     576:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_send_char>
}
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret

0000057e <lcd_custom_char>:

void lcd_custom_char(unsigned char location, unsigned char *msg)
{
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	8b 01       	movw	r16, r22
		lcd_send_byte(0x40 + (location*8));
     588:	88 0f       	add	r24, r24
     58a:	88 0f       	add	r24, r24
     58c:	88 0f       	add	r24, r24
     58e:	80 5c       	subi	r24, 0xC0	; 192
     590:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_send_byte>
     594:	e8 01       	movw	r28, r16
     596:	08 5f       	subi	r16, 0xF8	; 248
     598:	1f 4f       	sbci	r17, 0xFF	; 255
		for(uint8_t i = 0; i < 8; i++){	
		lcd_send_char(msg[i]);
     59a:	89 91       	ld	r24, Y+
     59c:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_send_char>
}

void lcd_custom_char(unsigned char location, unsigned char *msg)
{
		lcd_send_byte(0x40 + (location*8));
		for(uint8_t i = 0; i < 8; i++){	
     5a0:	c0 17       	cp	r28, r16
     5a2:	d1 07       	cpc	r29, r17
     5a4:	d1 f7       	brne	.-12     	; 0x59a <lcd_custom_char+0x1c>
		lcd_send_char(msg[i]);
		}

}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	08 95       	ret

000005b0 <newFinger>:
	}
	return 0;
}//Koniec void main()


void newFinger(uint8_t id){
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	d8 2f       	mov	r29, r24
	lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
     5ba:	63 e4       	ldi	r22, 0x43	; 67
     5bc:	71 e0       	ldi	r23, 0x01	; 1
     5be:	84 e5       	ldi	r24, 0x54	; 84
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
	lcd_special_char(6,0,5);
     5c6:	45 e0       	ldi	r20, 0x05	; 5
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	86 e0       	ldi	r24, 0x06	; 6
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
	lcd_special_char(7,0,1);
     5d6:	41 e0       	ldi	r20, 0x01	; 1
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	87 e0       	ldi	r24, 0x07	; 7
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
	fps_read_finger();
     5e6:	0e 94 9e 00 	call	0x13c	; 0x13c <fps_read_finger>
	uint8_t timer = 0;
     5ea:	c0 e0       	ldi	r28, 0x00	; 0
	while(tmp[0] == 0x02){
     5ec:	03 e1       	ldi	r16, 0x13	; 19
     5ee:	14 e0       	ldi	r17, 0x04	; 4
     5f0:	92 c0       	rjmp	.+292    	; 0x716 <newFinger+0x166>
		fps_read_finger();
     5f2:	0e 94 9e 00 	call	0x13c	; 0x13c <fps_read_finger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f6:	2f ef       	ldi	r18, 0xFF	; 255
     5f8:	81 ee       	ldi	r24, 0xE1	; 225
     5fa:	94 e0       	ldi	r25, 0x04	; 4
     5fc:	21 50       	subi	r18, 0x01	; 1
     5fe:	80 40       	sbci	r24, 0x00	; 0
     600:	90 40       	sbci	r25, 0x00	; 0
     602:	e1 f7       	brne	.-8      	; 0x5fc <newFinger+0x4c>
     604:	00 c0       	rjmp	.+0      	; 0x606 <newFinger+0x56>
     606:	00 00       	nop
		_delay_ms(100);
		timer += 1;
     608:	cf 5f       	subi	r28, 0xFF	; 255
		if(timer == 10){
     60a:	ca 30       	cpi	r28, 0x0A	; 10
     60c:	b9 f4       	brne	.+46     	; 0x63c <newFinger+0x8c>
			lcd_send_info("  Umiesc palec  ", "Skanowanie: ----");
     60e:	65 e6       	ldi	r22, 0x65	; 101
     610:	71 e0       	ldi	r23, 0x01	; 1
     612:	84 e5       	ldi	r24, 0x54	; 84
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
			lcd_special_char(6,0,5);
     61a:	45 e0       	ldi	r20, 0x05	; 5
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	86 e0       	ldi	r24, 0x06	; 6
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
			lcd_special_char(7,0,1);
     62a:	41 e0       	ldi	r20, 0x01	; 1
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	87 e0       	ldi	r24, 0x07	; 7
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     63a:	32 c0       	rjmp	.+100    	; 0x6a0 <newFinger+0xf0>
		}
		if(timer == 20){
     63c:	c4 31       	cpi	r28, 0x14	; 20
     63e:	b9 f4       	brne	.+46     	; 0x66e <newFinger+0xbe>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:  ---");
     640:	66 e7       	ldi	r22, 0x76	; 118
     642:	71 e0       	ldi	r23, 0x01	; 1
     644:	84 e5       	ldi	r24, 0x54	; 84
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
			lcd_special_char(6,0,5);
     64c:	45 e0       	ldi	r20, 0x05	; 5
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	86 e0       	ldi	r24, 0x06	; 6
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
			lcd_special_char(7,0,1);
     65c:	41 e0       	ldi	r20, 0x01	; 1
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	87 e0       	ldi	r24, 0x07	; 7
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     66c:	32 c0       	rjmp	.+100    	; 0x6d2 <newFinger+0x122>
		}
		if(timer == 30){
     66e:	ce 31       	cpi	r28, 0x1E	; 30
     670:	b9 f4       	brne	.+46     	; 0x6a0 <newFinger+0xf0>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:   --");
     672:	67 e8       	ldi	r22, 0x87	; 135
     674:	71 e0       	ldi	r23, 0x01	; 1
     676:	84 e5       	ldi	r24, 0x54	; 84
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
			lcd_special_char(6,0,5);
     67e:	45 e0       	ldi	r20, 0x05	; 5
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	86 e0       	ldi	r24, 0x06	; 6
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
			lcd_special_char(7,0,1);
     68e:	41 e0       	ldi	r20, 0x01	; 1
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	87 e0       	ldi	r24, 0x07	; 7
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     69e:	3b c0       	rjmp	.+118    	; 0x716 <newFinger+0x166>
		}
		if(timer == 40){
     6a0:	c8 32       	cpi	r28, 0x28	; 40
     6a2:	b9 f4       	brne	.+46     	; 0x6d2 <newFinger+0x122>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:    -");
     6a4:	68 e9       	ldi	r22, 0x98	; 152
     6a6:	71 e0       	ldi	r23, 0x01	; 1
     6a8:	84 e5       	ldi	r24, 0x54	; 84
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
			lcd_special_char(6,0,5);
     6b0:	45 e0       	ldi	r20, 0x05	; 5
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	86 e0       	ldi	r24, 0x06	; 6
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
			lcd_special_char(7,0,1);
     6c0:	41 e0       	ldi	r20, 0x01	; 1
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	87 e0       	ldi	r24, 0x07	; 7
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     6d0:	22 c0       	rjmp	.+68     	; 0x716 <newFinger+0x166>
		}
		if(timer == 49){
     6d2:	c1 33       	cpi	r28, 0x31	; 49
     6d4:	01 f5       	brne	.+64     	; 0x716 <newFinger+0x166>
			lcd_send_info("  Brak palca na ", " czytniku linii ");
     6d6:	69 ea       	ldi	r22, 0xA9	; 169
     6d8:	71 e0       	ldi	r23, 0x01	; 1
     6da:	8a eb       	ldi	r24, 0xBA	; 186
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
     6e2:	ef ef       	ldi	r30, 0xFF	; 255
     6e4:	fd e3       	ldi	r31, 0x3D	; 61
     6e6:	29 e4       	ldi	r18, 0x49	; 73
     6e8:	e1 50       	subi	r30, 0x01	; 1
     6ea:	f0 40       	sbci	r31, 0x00	; 0
     6ec:	20 40       	sbci	r18, 0x00	; 0
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <newFinger+0x138>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <newFinger+0x142>
     6f2:	00 00       	nop
			_delay_ms(1500);
			enrollFinger = false;
     6f4:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <enrollFinger>
			lcd_send_info("Drzwi zamkniete", "");
     6f8:	60 e5       	ldi	r22, 0x50	; 80
     6fa:	73 e0       	ldi	r23, 0x03	; 3
     6fc:	8b ec       	ldi	r24, 0xCB	; 203
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
			lcd_special_char(12,0,2);
     704:	42 e0       	ldi	r20, 0x02	; 2
     706:	50 e0       	ldi	r21, 0x00	; 0
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	8c e0       	ldi	r24, 0x0C	; 12
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
			break;
     714:	05 c0       	rjmp	.+10     	; 0x720 <newFinger+0x170>
	lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
	lcd_special_char(6,0,5);
	lcd_special_char(7,0,1);
	fps_read_finger();
	uint8_t timer = 0;
	while(tmp[0] == 0x02){
     716:	f8 01       	movw	r30, r16
     718:	80 81       	ld	r24, Z
     71a:	82 30       	cpi	r24, 0x02	; 2
     71c:	09 f4       	brne	.+2      	; 0x720 <newFinger+0x170>
     71e:	69 cf       	rjmp	.-302    	; 0x5f2 <newFinger+0x42>
			lcd_send_info("Drzwi zamkniete", "");
			lcd_special_char(12,0,2);
			break;
		}
	}
	if(tmp[0] == 0x00){
     720:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <tmp>
     724:	81 11       	cpse	r24, r1
     726:	c6 c1       	rjmp	.+908    	; 0xab4 <__stack+0x1b5>
		fps_img2TZ(1);
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	0e 94 b8 00 	call	0x170	; 0x170 <fps_img2TZ>
     72e:	ff ef       	ldi	r31, 0xFF	; 255
     730:	21 ee       	ldi	r18, 0xE1	; 225
     732:	84 e0       	ldi	r24, 0x04	; 4
     734:	f1 50       	subi	r31, 0x01	; 1
     736:	20 40       	sbci	r18, 0x00	; 0
     738:	80 40       	sbci	r24, 0x00	; 0
     73a:	e1 f7       	brne	.-8      	; 0x734 <newFinger+0x184>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <newFinger+0x18e>
     73e:	00 00       	nop
		_delay_ms(100);
		if(tmp[0] == 0x00){
     740:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <tmp>
     744:	81 11       	cpse	r24, r1
     746:	96 c1       	rjmp	.+812    	; 0xa74 <__stack+0x175>
			lcd_send_info("   Raz jeszcze  ", "  umiesc palec  ");
     748:	6b ed       	ldi	r22, 0xDB	; 219
     74a:	71 e0       	ldi	r23, 0x01	; 1
     74c:	8c ee       	ldi	r24, 0xEC	; 236
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
			lcd_special_char(6,1,5);
     754:	45 e0       	ldi	r20, 0x05	; 5
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	86 e0       	ldi	r24, 0x06	; 6
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
			lcd_special_char(7,1,1);
     764:	41 e0       	ldi	r20, 0x01	; 1
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	61 e0       	ldi	r22, 0x01	; 1
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	87 e0       	ldi	r24, 0x07	; 7
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     774:	9f ef       	ldi	r25, 0xFF	; 255
     776:	ed e3       	ldi	r30, 0x3D	; 61
     778:	f9 e4       	ldi	r31, 0x49	; 73
     77a:	91 50       	subi	r25, 0x01	; 1
     77c:	e0 40       	sbci	r30, 0x00	; 0
     77e:	f0 40       	sbci	r31, 0x00	; 0
     780:	e1 f7       	brne	.-8      	; 0x77a <newFinger+0x1ca>
     782:	00 c0       	rjmp	.+0      	; 0x784 <newFinger+0x1d4>
     784:	00 00       	nop
			_delay_ms(1500);
				lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
     786:	63 e4       	ldi	r22, 0x43	; 67
     788:	71 e0       	ldi	r23, 0x01	; 1
     78a:	84 e5       	ldi	r24, 0x54	; 84
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
				lcd_special_char(6,0,5);
     792:	45 e0       	ldi	r20, 0x05	; 5
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	86 e0       	ldi	r24, 0x06	; 6
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
				lcd_special_char(7,0,1);
     7a2:	41 e0       	ldi	r20, 0x01	; 1
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	87 e0       	ldi	r24, 0x07	; 7
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
				fps_read_finger();
     7b2:	0e 94 9e 00 	call	0x13c	; 0x13c <fps_read_finger>
				timer = 0;
     7b6:	c0 e0       	ldi	r28, 0x00	; 0
				while(tmp[0] == 0x02){
     7b8:	03 e1       	ldi	r16, 0x13	; 19
     7ba:	14 e0       	ldi	r17, 0x04	; 4
     7bc:	a2 c0       	rjmp	.+324    	; 0x902 <__stack+0x3>
					fps_read_finger();
     7be:	0e 94 9e 00 	call	0x13c	; 0x13c <fps_read_finger>
     7c2:	2f ef       	ldi	r18, 0xFF	; 255
     7c4:	81 ee       	ldi	r24, 0xE1	; 225
     7c6:	94 e0       	ldi	r25, 0x04	; 4
     7c8:	21 50       	subi	r18, 0x01	; 1
     7ca:	80 40       	sbci	r24, 0x00	; 0
     7cc:	90 40       	sbci	r25, 0x00	; 0
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <newFinger+0x218>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <newFinger+0x222>
     7d2:	00 00       	nop
					_delay_ms(100);
					timer += 1;
     7d4:	cf 5f       	subi	r28, 0xFF	; 255
					if(timer == 10){
     7d6:	ca 30       	cpi	r28, 0x0A	; 10
     7d8:	b9 f4       	brne	.+46     	; 0x808 <newFinger+0x258>
						lcd_send_info("  Umiesc palec  ", "Skanowanie: ----");
     7da:	65 e6       	ldi	r22, 0x65	; 101
     7dc:	71 e0       	ldi	r23, 0x01	; 1
     7de:	84 e5       	ldi	r24, 0x54	; 84
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
						lcd_special_char(6,0,5);
     7e6:	45 e0       	ldi	r20, 0x05	; 5
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	86 e0       	ldi	r24, 0x06	; 6
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
						lcd_special_char(7,0,1);
     7f6:	41 e0       	ldi	r20, 0x01	; 1
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	87 e0       	ldi	r24, 0x07	; 7
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     806:	32 c0       	rjmp	.+100    	; 0x86c <newFinger+0x2bc>
					}
					if(timer == 20){
     808:	c4 31       	cpi	r28, 0x14	; 20
     80a:	b9 f4       	brne	.+46     	; 0x83a <newFinger+0x28a>
						lcd_send_info("  Umiesc palec  ", "Skanowanie:  ---");
     80c:	66 e7       	ldi	r22, 0x76	; 118
     80e:	71 e0       	ldi	r23, 0x01	; 1
     810:	84 e5       	ldi	r24, 0x54	; 84
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
						lcd_special_char(6,0,5);
     818:	45 e0       	ldi	r20, 0x05	; 5
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	86 e0       	ldi	r24, 0x06	; 6
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
						lcd_special_char(7,0,1);
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	87 e0       	ldi	r24, 0x07	; 7
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     838:	32 c0       	rjmp	.+100    	; 0x89e <newFinger+0x2ee>
					}
					if(timer == 30){
     83a:	ce 31       	cpi	r28, 0x1E	; 30
     83c:	b9 f4       	brne	.+46     	; 0x86c <newFinger+0x2bc>
						lcd_send_info("  Umiesc palec  ", "Skanowanie:   --");
     83e:	67 e8       	ldi	r22, 0x87	; 135
     840:	71 e0       	ldi	r23, 0x01	; 1
     842:	84 e5       	ldi	r24, 0x54	; 84
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
						lcd_special_char(6,0,5);
     84a:	45 e0       	ldi	r20, 0x05	; 5
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	86 e0       	ldi	r24, 0x06	; 6
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
						lcd_special_char(7,0,1);
     85a:	41 e0       	ldi	r20, 0x01	; 1
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	87 e0       	ldi	r24, 0x07	; 7
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     86a:	4b c0       	rjmp	.+150    	; 0x902 <__stack+0x3>
					}
					if(timer == 40){
     86c:	c8 32       	cpi	r28, 0x28	; 40
     86e:	b9 f4       	brne	.+46     	; 0x89e <newFinger+0x2ee>
						lcd_send_info("  Umiesc palec  ", "Skanowanie:    -");
     870:	68 e9       	ldi	r22, 0x98	; 152
     872:	71 e0       	ldi	r23, 0x01	; 1
     874:	84 e5       	ldi	r24, 0x54	; 84
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
						lcd_special_char(6,0,5);
     87c:	45 e0       	ldi	r20, 0x05	; 5
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	86 e0       	ldi	r24, 0x06	; 6
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
						lcd_special_char(7,0,1);
     88c:	41 e0       	ldi	r20, 0x01	; 1
     88e:	50 e0       	ldi	r21, 0x00	; 0
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	87 e0       	ldi	r24, 0x07	; 7
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     89c:	32 c0       	rjmp	.+100    	; 0x902 <__stack+0x3>
					}
					if(timer == 49){
     89e:	c1 33       	cpi	r28, 0x31	; 49
     8a0:	81 f5       	brne	.+96     	; 0x902 <__stack+0x3>
						lcd_send_info("  Brak palca na ", " czytniku linii ");
     8a2:	69 ea       	ldi	r22, 0xA9	; 169
     8a4:	71 e0       	ldi	r23, 0x01	; 1
     8a6:	8a eb       	ldi	r24, 0xBA	; 186
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
						lcd_special_char(6,0,5);
     8ae:	45 e0       	ldi	r20, 0x05	; 5
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	86 e0       	ldi	r24, 0x06	; 6
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
						lcd_special_char(7,0,1);
     8be:	41 e0       	ldi	r20, 0x01	; 1
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	87 e0       	ldi	r24, 0x07	; 7
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     8ce:	ef ef       	ldi	r30, 0xFF	; 255
     8d0:	fd e3       	ldi	r31, 0x3D	; 61
     8d2:	29 e4       	ldi	r18, 0x49	; 73
     8d4:	e1 50       	subi	r30, 0x01	; 1
     8d6:	f0 40       	sbci	r31, 0x00	; 0
     8d8:	20 40       	sbci	r18, 0x00	; 0
     8da:	e1 f7       	brne	.-8      	; 0x8d4 <newFinger+0x324>
     8dc:	00 c0       	rjmp	.+0      	; 0x8de <newFinger+0x32e>
     8de:	00 00       	nop
						_delay_ms(1500);
						enrollFinger = false;
     8e0:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <enrollFinger>
						lcd_send_info("Drzwi zamkniete", "");
     8e4:	60 e5       	ldi	r22, 0x50	; 80
     8e6:	73 e0       	ldi	r23, 0x03	; 3
     8e8:	8b ec       	ldi	r24, 0xCB	; 203
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
						lcd_special_char(12,0,2);
     8f0:	42 e0       	ldi	r20, 0x02	; 2
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	8c e0       	ldi	r24, 0x0C	; 12
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
						break;
     900:	05 c0       	rjmp	.+10     	; 0x90c <__stack+0xd>
				lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
				lcd_special_char(6,0,5);
				lcd_special_char(7,0,1);
				fps_read_finger();
				timer = 0;
				while(tmp[0] == 0x02){
     902:	f8 01       	movw	r30, r16
     904:	80 81       	ld	r24, Z
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	09 f4       	brne	.+2      	; 0x90c <__stack+0xd>
     90a:	59 cf       	rjmp	.-334    	; 0x7be <newFinger+0x20e>
						lcd_send_info("Drzwi zamkniete", "");
						lcd_special_char(12,0,2);
						break;
					}
				}
			if(tmp[0] == 0x00){
     90c:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <tmp>
     910:	81 11       	cpse	r24, r1
     912:	98 c0       	rjmp	.+304    	; 0xa44 <__stack+0x145>
				fps_img2TZ(2);
     914:	82 e0       	ldi	r24, 0x02	; 2
     916:	0e 94 b8 00 	call	0x170	; 0x170 <fps_img2TZ>
     91a:	ff ef       	ldi	r31, 0xFF	; 255
     91c:	29 e6       	ldi	r18, 0x69	; 105
     91e:	88 e1       	ldi	r24, 0x18	; 24
     920:	f1 50       	subi	r31, 0x01	; 1
     922:	20 40       	sbci	r18, 0x00	; 0
     924:	80 40       	sbci	r24, 0x00	; 0
     926:	e1 f7       	brne	.-8      	; 0x920 <__stack+0x21>
     928:	00 c0       	rjmp	.+0      	; 0x92a <__stack+0x2b>
     92a:	00 00       	nop
				_delay_ms(500);
				if(tmp[0] == 0x00){
     92c:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <tmp>
     930:	81 11       	cpse	r24, r1
     932:	68 c0       	rjmp	.+208    	; 0xa04 <__stack+0x105>
					fps_genModel();
     934:	0e 94 08 01 	call	0x210	; 0x210 <fps_genModel>
					if(tmp[0] == 0x00){
     938:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <tmp>
     93c:	81 11       	cpse	r24, r1
     93e:	42 c0       	rjmp	.+132    	; 0x9c4 <__stack+0xc5>
						fps_storeModel(id);
     940:	8d 2f       	mov	r24, r29
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 22 01 	call	0x244	; 0x244 <fps_storeModel>
						if(tmp[0] == 0x00){
     948:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <tmp>
     94c:	81 11       	cpse	r24, r1
     94e:	1a c0       	rjmp	.+52     	; 0x984 <__stack+0x85>
							lcd_send_info(" Pomyslny zapis ", " palca w bazie! ");
     950:	6d ef       	ldi	r22, 0xFD	; 253
     952:	71 e0       	ldi	r23, 0x01	; 1
     954:	8e e0       	ldi	r24, 0x0E	; 14
     956:	92 e0       	ldi	r25, 0x02	; 2
     958:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
							lcd_special_char(5,0,5);
     95c:	45 e0       	ldi	r20, 0x05	; 5
     95e:	50 e0       	ldi	r21, 0x00	; 0
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	85 e0       	ldi	r24, 0x05	; 5
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
							firstUse = false;
     96c:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <firstUse>
     970:	9f ef       	ldi	r25, 0xFF	; 255
     972:	e7 ea       	ldi	r30, 0xA7	; 167
     974:	f1 e6       	ldi	r31, 0x61	; 97
     976:	91 50       	subi	r25, 0x01	; 1
     978:	e0 40       	sbci	r30, 0x00	; 0
     97a:	f0 40       	sbci	r31, 0x00	; 0
     97c:	e1 f7       	brne	.-8      	; 0x976 <__stack+0x77>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <__stack+0x81>
     980:	00 00       	nop
     982:	af c0       	rjmp	.+350    	; 0xae2 <__stack+0x1e3>
							_delay_ms(2000);
						}
						else{
							lcd_send_info("  Blad podczas  ", " zapisu do bazy ");
     984:	6f e1       	ldi	r22, 0x1F	; 31
     986:	72 e0       	ldi	r23, 0x02	; 2
     988:	80 e3       	ldi	r24, 0x30	; 48
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
							lcd_special_char(3,0,3);
     990:	43 e0       	ldi	r20, 0x03	; 3
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	83 e0       	ldi	r24, 0x03	; 3
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
							lcd_special_char(4,0,0);
     9a0:	40 e0       	ldi	r20, 0x00	; 0
     9a2:	50 e0       	ldi	r21, 0x00	; 0
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	84 e0       	ldi	r24, 0x04	; 4
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     9b0:	2f ef       	ldi	r18, 0xFF	; 255
     9b2:	87 ea       	ldi	r24, 0xA7	; 167
     9b4:	91 e6       	ldi	r25, 0x61	; 97
     9b6:	21 50       	subi	r18, 0x01	; 1
     9b8:	80 40       	sbci	r24, 0x00	; 0
     9ba:	90 40       	sbci	r25, 0x00	; 0
     9bc:	e1 f7       	brne	.-8      	; 0x9b6 <__stack+0xb7>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <__stack+0xc1>
     9c0:	00 00       	nop
     9c2:	8f c0       	rjmp	.+286    	; 0xae2 <__stack+0x1e3>
							_delay_ms(2000);
						}
					}
					else{
						lcd_send_info("  Blad podczas  ", "tworzenia modelu");
     9c4:	61 e4       	ldi	r22, 0x41	; 65
     9c6:	72 e0       	ldi	r23, 0x02	; 2
     9c8:	80 e3       	ldi	r24, 0x30	; 48
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
						lcd_special_char(3,0,3);
     9d0:	43 e0       	ldi	r20, 0x03	; 3
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
						lcd_special_char(4,0,0);
     9e0:	40 e0       	ldi	r20, 0x00	; 0
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     9f0:	ef ef       	ldi	r30, 0xFF	; 255
     9f2:	f7 ea       	ldi	r31, 0xA7	; 167
     9f4:	21 e6       	ldi	r18, 0x61	; 97
     9f6:	e1 50       	subi	r30, 0x01	; 1
     9f8:	f0 40       	sbci	r31, 0x00	; 0
     9fa:	20 40       	sbci	r18, 0x00	; 0
     9fc:	e1 f7       	brne	.-8      	; 0x9f6 <__stack+0xf7>
     9fe:	00 c0       	rjmp	.+0      	; 0xa00 <__stack+0x101>
     a00:	00 00       	nop
     a02:	6f c0       	rjmp	.+222    	; 0xae2 <__stack+0x1e3>
						_delay_ms(2000);
					}
				}
				else{
					lcd_send_info(" Blad tworzenia ", "  obrazu palca  ");
     a04:	62 e5       	ldi	r22, 0x52	; 82
     a06:	72 e0       	ldi	r23, 0x02	; 2
     a08:	83 e6       	ldi	r24, 0x63	; 99
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
					lcd_special_char(2,0,3);
     a10:	43 e0       	ldi	r20, 0x03	; 3
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
					lcd_special_char(3,0,0);
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	83 e0       	ldi	r24, 0x03	; 3
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     a30:	8f ef       	ldi	r24, 0xFF	; 255
     a32:	97 ea       	ldi	r25, 0xA7	; 167
     a34:	e1 e6       	ldi	r30, 0x61	; 97
     a36:	81 50       	subi	r24, 0x01	; 1
     a38:	90 40       	sbci	r25, 0x00	; 0
     a3a:	e0 40       	sbci	r30, 0x00	; 0
     a3c:	e1 f7       	brne	.-8      	; 0xa36 <__stack+0x137>
     a3e:	00 c0       	rjmp	.+0      	; 0xa40 <__stack+0x141>
     a40:	00 00       	nop
     a42:	4f c0       	rjmp	.+158    	; 0xae2 <__stack+0x1e3>
					_delay_ms(2000);
				}
			}
			else{
				lcd_send_info("   Brak palca!  ", "Sprobuj ponownie");
     a44:	64 e7       	ldi	r22, 0x74	; 116
     a46:	72 e0       	ldi	r23, 0x02	; 2
     a48:	85 e8       	ldi	r24, 0x85	; 133
     a4a:	92 e0       	ldi	r25, 0x02	; 2
     a4c:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
				lcd_special_char(3,1,4);
     a50:	44 e0       	ldi	r20, 0x04	; 4
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	61 e0       	ldi	r22, 0x01	; 1
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	83 e0       	ldi	r24, 0x03	; 3
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     a60:	ff ef       	ldi	r31, 0xFF	; 255
     a62:	27 ea       	ldi	r18, 0xA7	; 167
     a64:	81 e6       	ldi	r24, 0x61	; 97
     a66:	f1 50       	subi	r31, 0x01	; 1
     a68:	20 40       	sbci	r18, 0x00	; 0
     a6a:	80 40       	sbci	r24, 0x00	; 0
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <__stack+0x167>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <__stack+0x171>
     a70:	00 00       	nop
     a72:	37 c0       	rjmp	.+110    	; 0xae2 <__stack+0x1e3>
				_delay_ms(2000);
			}
		}
		else{
			lcd_send_info(" Blad tworzenia ", "  obrazu palca  ");
     a74:	62 e5       	ldi	r22, 0x52	; 82
     a76:	72 e0       	ldi	r23, 0x02	; 2
     a78:	83 e6       	ldi	r24, 0x63	; 99
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
			lcd_special_char(2,0,3);
     a80:	43 e0       	ldi	r20, 0x03	; 3
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
			lcd_special_char(3,0,0);
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     aa0:	9f ef       	ldi	r25, 0xFF	; 255
     aa2:	e7 ea       	ldi	r30, 0xA7	; 167
     aa4:	f1 e6       	ldi	r31, 0x61	; 97
     aa6:	91 50       	subi	r25, 0x01	; 1
     aa8:	e0 40       	sbci	r30, 0x00	; 0
     aaa:	f0 40       	sbci	r31, 0x00	; 0
     aac:	e1 f7       	brne	.-8      	; 0xaa6 <__stack+0x1a7>
     aae:	00 c0       	rjmp	.+0      	; 0xab0 <__stack+0x1b1>
     ab0:	00 00       	nop
     ab2:	17 c0       	rjmp	.+46     	; 0xae2 <__stack+0x1e3>
			_delay_ms(2000);
		}
	}
	else{
		lcd_send_info("   Brak palca!  ", "Sprobuj ponownie");
     ab4:	64 e7       	ldi	r22, 0x74	; 116
     ab6:	72 e0       	ldi	r23, 0x02	; 2
     ab8:	85 e8       	ldi	r24, 0x85	; 133
     aba:	92 e0       	ldi	r25, 0x02	; 2
     abc:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
		lcd_special_char(3,1,4);
     ac0:	44 e0       	ldi	r20, 0x04	; 4
     ac2:	50 e0       	ldi	r21, 0x00	; 0
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	83 e0       	ldi	r24, 0x03	; 3
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     ad0:	2f ef       	ldi	r18, 0xFF	; 255
     ad2:	87 ea       	ldi	r24, 0xA7	; 167
     ad4:	91 e6       	ldi	r25, 0x61	; 97
     ad6:	21 50       	subi	r18, 0x01	; 1
     ad8:	80 40       	sbci	r24, 0x00	; 0
     ada:	90 40       	sbci	r25, 0x00	; 0
     adc:	e1 f7       	brne	.-8      	; 0xad6 <__stack+0x1d7>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <__stack+0x1e1>
     ae0:	00 00       	nop
		_delay_ms(2000);
	}
	enrollFinger = false;
     ae2:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <enrollFinger>
	if(!firstUse){
     ae6:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <firstUse>
     aea:	81 11       	cpse	r24, r1
     aec:	0e c0       	rjmp	.+28     	; 0xb0a <__stack+0x20b>
		lcd_send_info("Drzwi zamkniete", "");
     aee:	60 e5       	ldi	r22, 0x50	; 80
     af0:	73 e0       	ldi	r23, 0x03	; 3
     af2:	8b ec       	ldi	r24, 0xCB	; 203
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
		lcd_special_char(12,0,2);
     afa:	42 e0       	ldi	r20, 0x02	; 2
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	8c e0       	ldi	r24, 0x0C	; 12
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
	}	
}
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	08 95       	ret

00000b14 <deleteFinger>:

void deleteFinger(uint8_t id){
     b14:	cf 93       	push	r28
     b16:	c8 2f       	mov	r28, r24
	fps_deleteModel(id);
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 4e 01 	call	0x29c	; 0x29c <fps_deleteModel>
     b1e:	2f ef       	ldi	r18, 0xFF	; 255
     b20:	81 ee       	ldi	r24, 0xE1	; 225
     b22:	94 e0       	ldi	r25, 0x04	; 4
     b24:	21 50       	subi	r18, 0x01	; 1
     b26:	80 40       	sbci	r24, 0x00	; 0
     b28:	90 40       	sbci	r25, 0x00	; 0
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <deleteFinger+0x10>
     b2c:	00 c0       	rjmp	.+0      	; 0xb2e <deleteFinger+0x1a>
     b2e:	00 00       	nop
	_delay_ms(100);
	if(tmp[0] == 0x00){
     b30:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <tmp>
     b34:	81 11       	cpse	r24, r1
     b36:	40 c0       	rjmp	.+128    	; 0xbb8 <deleteFinger+0xa4>
		lcd_clear();
     b38:	0e 94 77 02 	call	0x4ee	; 0x4ee <lcd_clear>
		lcd_setCursor(0,0);
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	0e 94 81 02 	call	0x502	; 0x502 <lcd_setCursor>
		lcd_send_string(" Usunieto palec ");
     b44:	86 e9       	ldi	r24, 0x96	; 150
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>
		lcd_special_char(6,0,2);
     b4c:	42 e0       	ldi	r20, 0x02	; 2
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	86 e0       	ldi	r24, 0x06	; 6
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
		lcd_setCursor(0,1);
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 81 02 	call	0x502	; 0x502 <lcd_setCursor>
		lcd_send_string("o ID: ");
     b64:	87 ea       	ldi	r24, 0xA7	; 167
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>
		lcd_setCursor(6,1);
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	86 e0       	ldi	r24, 0x06	; 6
     b70:	0e 94 81 02 	call	0x502	; 0x502 <lcd_setCursor>
		lcd_send_string(itoa(id, buffer, 10));
     b74:	4a e0       	ldi	r20, 0x0A	; 10
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	6a e1       	ldi	r22, 0x1A	; 26
     b7a:	74 e0       	ldi	r23, 0x04	; 4
     b7c:	8c 2f       	mov	r24, r28
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <itoa>
     b84:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>
     b88:	2f ef       	ldi	r18, 0xFF	; 255
     b8a:	87 ea       	ldi	r24, 0xA7	; 167
     b8c:	91 e6       	ldi	r25, 0x61	; 97
     b8e:	21 50       	subi	r18, 0x01	; 1
     b90:	80 40       	sbci	r24, 0x00	; 0
     b92:	90 40       	sbci	r25, 0x00	; 0
     b94:	e1 f7       	brne	.-8      	; 0xb8e <deleteFinger+0x7a>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <deleteFinger+0x84>
     b98:	00 00       	nop
		_delay_ms(2000);
		lcd_send_info("Drzwi zamkniete", "");
     b9a:	60 e5       	ldi	r22, 0x50	; 80
     b9c:	73 e0       	ldi	r23, 0x03	; 3
     b9e:	8b ec       	ldi	r24, 0xCB	; 203
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
		lcd_special_char(12,0,2);
     ba6:	42 e0       	ldi	r20, 0x02	; 2
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	8c e0       	ldi	r24, 0x0C	; 12
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     bb6:	3d c0       	rjmp	.+122    	; 0xc32 <deleteFinger+0x11e>
	}
	else{
		lcd_send_info(" Nie udalo sie  ", "  usunac palca! ");
     bb8:	6e ea       	ldi	r22, 0xAE	; 174
     bba:	72 e0       	ldi	r23, 0x02	; 2
     bbc:	8f eb       	ldi	r24, 0xBF	; 191
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
		lcd_special_char(8,0,3);
     bc4:	43 e0       	ldi	r20, 0x03	; 3
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	88 e0       	ldi	r24, 0x08	; 8
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
		lcd_special_char(13,0,2);
     bd4:	42 e0       	ldi	r20, 0x02	; 2
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	8d e0       	ldi	r24, 0x0D	; 13
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
		lcd_special_char(5,1,0);
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	85 e0       	ldi	r24, 0x05	; 5
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
		lcd_special_char(6,1,1);
     bf4:	41 e0       	ldi	r20, 0x01	; 1
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	61 e0       	ldi	r22, 0x01	; 1
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	86 e0       	ldi	r24, 0x06	; 6
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     c04:	2f ef       	ldi	r18, 0xFF	; 255
     c06:	87 ea       	ldi	r24, 0xA7	; 167
     c08:	91 e6       	ldi	r25, 0x61	; 97
     c0a:	21 50       	subi	r18, 0x01	; 1
     c0c:	80 40       	sbci	r24, 0x00	; 0
     c0e:	90 40       	sbci	r25, 0x00	; 0
     c10:	e1 f7       	brne	.-8      	; 0xc0a <deleteFinger+0xf6>
     c12:	00 c0       	rjmp	.+0      	; 0xc14 <deleteFinger+0x100>
     c14:	00 00       	nop
		_delay_ms(2000);
		lcd_send_info("Drzwi zamkniete", "");
     c16:	60 e5       	ldi	r22, 0x50	; 80
     c18:	73 e0       	ldi	r23, 0x03	; 3
     c1a:	8b ec       	ldi	r24, 0xCB	; 203
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
		lcd_special_char(12,0,2);
     c22:	42 e0       	ldi	r20, 0x02	; 2
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	8c e0       	ldi	r24, 0x0C	; 12
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
	}
	removeFinger = false;
     c32:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <removeFinger>
}
     c36:	cf 91       	pop	r28
     c38:	08 95       	ret

00000c3a <checkFinger>:

void checkFinger(){
     c3a:	ef 92       	push	r14
     c3c:	ff 92       	push	r15
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	00 d0       	rcall	.+0      	; 0xc46 <checkFinger+0xc>
     c46:	1f 92       	push	r1
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
	lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
     c4c:	63 e4       	ldi	r22, 0x43	; 67
     c4e:	71 e0       	ldi	r23, 0x01	; 1
     c50:	84 e5       	ldi	r24, 0x54	; 84
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
	lcd_special_char(6,0,5);
     c58:	45 e0       	ldi	r20, 0x05	; 5
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	86 e0       	ldi	r24, 0x06	; 6
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
	lcd_special_char(7,0,1);
     c68:	41 e0       	ldi	r20, 0x01	; 1
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	87 e0       	ldi	r24, 0x07	; 7
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
	fps_read_finger();
     c78:	0e 94 9e 00 	call	0x13c	; 0x13c <fps_read_finger>
	uint8_t timer = 0;
     c7c:	10 e0       	ldi	r17, 0x00	; 0
	while(tmp[0] == 0x02){
     c7e:	0f 2e       	mov	r0, r31
     c80:	f3 e1       	ldi	r31, 0x13	; 19
     c82:	ef 2e       	mov	r14, r31
     c84:	f4 e0       	ldi	r31, 0x04	; 4
     c86:	ff 2e       	mov	r15, r31
     c88:	f0 2d       	mov	r31, r0
     c8a:	a6 c0       	rjmp	.+332    	; 0xdd8 <checkFinger+0x19e>
		fps_read_finger();
     c8c:	0e 94 9e 00 	call	0x13c	; 0x13c <fps_read_finger>
     c90:	2f ef       	ldi	r18, 0xFF	; 255
     c92:	81 ee       	ldi	r24, 0xE1	; 225
     c94:	94 e0       	ldi	r25, 0x04	; 4
     c96:	21 50       	subi	r18, 0x01	; 1
     c98:	80 40       	sbci	r24, 0x00	; 0
     c9a:	90 40       	sbci	r25, 0x00	; 0
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <checkFinger+0x5c>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <checkFinger+0x66>
     ca0:	00 00       	nop
		_delay_ms(100);
		timer += 1;
     ca2:	1f 5f       	subi	r17, 0xFF	; 255
		if(timer == 10){
     ca4:	1a 30       	cpi	r17, 0x0A	; 10
     ca6:	b9 f4       	brne	.+46     	; 0xcd6 <checkFinger+0x9c>
			lcd_send_info("  Umiesc palec  ", "Skanowanie: ----");
     ca8:	65 e6       	ldi	r22, 0x65	; 101
     caa:	71 e0       	ldi	r23, 0x01	; 1
     cac:	84 e5       	ldi	r24, 0x54	; 84
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
			lcd_special_char(6,0,5);
     cb4:	45 e0       	ldi	r20, 0x05	; 5
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	86 e0       	ldi	r24, 0x06	; 6
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
			lcd_special_char(7,0,1);
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	87 e0       	ldi	r24, 0x07	; 7
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     cd4:	32 c0       	rjmp	.+100    	; 0xd3a <checkFinger+0x100>
		}
		if(timer == 20){
     cd6:	14 31       	cpi	r17, 0x14	; 20
     cd8:	b9 f4       	brne	.+46     	; 0xd08 <checkFinger+0xce>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:  ---");
     cda:	66 e7       	ldi	r22, 0x76	; 118
     cdc:	71 e0       	ldi	r23, 0x01	; 1
     cde:	84 e5       	ldi	r24, 0x54	; 84
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
			lcd_special_char(6,0,5);
     ce6:	45 e0       	ldi	r20, 0x05	; 5
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	86 e0       	ldi	r24, 0x06	; 6
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
			lcd_special_char(7,0,1);
     cf6:	41 e0       	ldi	r20, 0x01	; 1
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	87 e0       	ldi	r24, 0x07	; 7
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     d06:	32 c0       	rjmp	.+100    	; 0xd6c <checkFinger+0x132>
		}
		if(timer == 30){
     d08:	1e 31       	cpi	r17, 0x1E	; 30
     d0a:	b9 f4       	brne	.+46     	; 0xd3a <checkFinger+0x100>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:   --");
     d0c:	67 e8       	ldi	r22, 0x87	; 135
     d0e:	71 e0       	ldi	r23, 0x01	; 1
     d10:	84 e5       	ldi	r24, 0x54	; 84
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
			lcd_special_char(6,0,5);
     d18:	45 e0       	ldi	r20, 0x05	; 5
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	86 e0       	ldi	r24, 0x06	; 6
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
			lcd_special_char(7,0,1);
     d28:	41 e0       	ldi	r20, 0x01	; 1
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	87 e0       	ldi	r24, 0x07	; 7
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     d38:	4f c0       	rjmp	.+158    	; 0xdd8 <checkFinger+0x19e>
		}
		if(timer == 40){
     d3a:	18 32       	cpi	r17, 0x28	; 40
     d3c:	b9 f4       	brne	.+46     	; 0xd6c <checkFinger+0x132>
			lcd_send_info("  Umiesc palec  ", "Skanowanie:    -");
     d3e:	68 e9       	ldi	r22, 0x98	; 152
     d40:	71 e0       	ldi	r23, 0x01	; 1
     d42:	84 e5       	ldi	r24, 0x54	; 84
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
			lcd_special_char(6,0,5);
     d4a:	45 e0       	ldi	r20, 0x05	; 5
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	86 e0       	ldi	r24, 0x06	; 6
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
			lcd_special_char(7,0,1);
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	87 e0       	ldi	r24, 0x07	; 7
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     d6a:	36 c0       	rjmp	.+108    	; 0xdd8 <checkFinger+0x19e>
		}
		if(timer == 50){
     d6c:	12 33       	cpi	r17, 0x32	; 50
     d6e:	a1 f5       	brne	.+104    	; 0xdd8 <checkFinger+0x19e>
			lcd_send_info("  Brak palca na ", " czytniku linii ");
     d70:	69 ea       	ldi	r22, 0xA9	; 169
     d72:	71 e0       	ldi	r23, 0x01	; 1
     d74:	8a eb       	ldi	r24, 0xBA	; 186
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
			lcd_special_char(6,0,5);
     d7c:	45 e0       	ldi	r20, 0x05	; 5
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	86 e0       	ldi	r24, 0x06	; 6
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
			lcd_special_char(7,0,1);
     d8c:	41 e0       	ldi	r20, 0x01	; 1
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	87 e0       	ldi	r24, 0x07	; 7
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     d9c:	ef ef       	ldi	r30, 0xFF	; 255
     d9e:	fd e3       	ldi	r31, 0x3D	; 61
     da0:	29 e4       	ldi	r18, 0x49	; 73
     da2:	e1 50       	subi	r30, 0x01	; 1
     da4:	f0 40       	sbci	r31, 0x00	; 0
     da6:	20 40       	sbci	r18, 0x00	; 0
     da8:	e1 f7       	brne	.-8      	; 0xda2 <checkFinger+0x168>
     daa:	00 c0       	rjmp	.+0      	; 0xdac <checkFinger+0x172>
     dac:	00 00       	nop
			_delay_ms(1500);
			scanFinger = false;
     dae:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <scanFinger>
			enrollFinger = false;
     db2:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <enrollFinger>
			removeFinger = false;
     db6:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <removeFinger>
			lcd_send_info("Drzwi zamkniete", "");
     dba:	60 e5       	ldi	r22, 0x50	; 80
     dbc:	73 e0       	ldi	r23, 0x03	; 3
     dbe:	8b ec       	ldi	r24, 0xCB	; 203
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
			lcd_special_char(12,0,2);
     dc6:	42 e0       	ldi	r20, 0x02	; 2
     dc8:	50 e0       	ldi	r21, 0x00	; 0
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	8c e0       	ldi	r24, 0x0C	; 12
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
			return;
     dd6:	1d c1       	rjmp	.+570    	; 0x1012 <checkFinger+0x3d8>
	lcd_send_info("  Umiesc palec  ", "Skanowanie:-----");
	lcd_special_char(6,0,5);
	lcd_special_char(7,0,1);
	fps_read_finger();
	uint8_t timer = 0;
	while(tmp[0] == 0x02){
     dd8:	f7 01       	movw	r30, r14
     dda:	80 81       	ld	r24, Z
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	09 f4       	brne	.+2      	; 0xde2 <checkFinger+0x1a8>
     de0:	55 cf       	rjmp	.-342    	; 0xc8c <checkFinger+0x52>
			lcd_send_info("Drzwi zamkniete", "");
			lcd_special_char(12,0,2);
			return;
		}
	}
	if(tmp[0] == 0x00){
     de2:	81 11       	cpse	r24, r1
     de4:	e7 c0       	rjmp	.+462    	; 0xfb4 <checkFinger+0x37a>
		fps_img2TZ(1);
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	0e 94 b8 00 	call	0x170	; 0x170 <fps_img2TZ>
     dec:	ff ef       	ldi	r31, 0xFF	; 255
     dee:	21 ee       	ldi	r18, 0xE1	; 225
     df0:	84 e0       	ldi	r24, 0x04	; 4
     df2:	f1 50       	subi	r31, 0x01	; 1
     df4:	20 40       	sbci	r18, 0x00	; 0
     df6:	80 40       	sbci	r24, 0x00	; 0
     df8:	e1 f7       	brne	.-8      	; 0xdf2 <checkFinger+0x1b8>
     dfa:	00 c0       	rjmp	.+0      	; 0xdfc <checkFinger+0x1c2>
     dfc:	00 00       	nop
		_delay_ms(100);
		if(tmp[0] == 0x00){
     dfe:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <tmp>
     e02:	81 11       	cpse	r24, r1
     e04:	b7 c0       	rjmp	.+366    	; 0xf74 <checkFinger+0x33a>
			fps_search();
     e06:	0e 94 da 00 	call	0x1b4	; 0x1b4 <fps_search>
     e0a:	9f ef       	ldi	r25, 0xFF	; 255
     e0c:	e1 ee       	ldi	r30, 0xE1	; 225
     e0e:	f4 e0       	ldi	r31, 0x04	; 4
     e10:	91 50       	subi	r25, 0x01	; 1
     e12:	e0 40       	sbci	r30, 0x00	; 0
     e14:	f0 40       	sbci	r31, 0x00	; 0
     e16:	e1 f7       	brne	.-8      	; 0xe10 <checkFinger+0x1d6>
     e18:	00 c0       	rjmp	.+0      	; 0xe1a <checkFinger+0x1e0>
     e1a:	00 00       	nop
			_delay_ms(100);
			if(tmp[0] == 0x00){
     e1c:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <tmp>
     e20:	81 11       	cpse	r24, r1
     e22:	98 c0       	rjmp	.+304    	; 0xf54 <checkFinger+0x31a>
				if(enrollFinger == true || removeFinger == true){
     e24:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <enrollFinger>
     e28:	81 11       	cpse	r24, r1
     e2a:	04 c0       	rjmp	.+8      	; 0xe34 <checkFinger+0x1fa>
     e2c:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <removeFinger>
     e30:	88 23       	and	r24, r24
     e32:	f9 f0       	breq	.+62     	; 0xe72 <checkFinger+0x238>
					uint16_t mainID = tmp[1] << 8;
     e34:	e3 e1       	ldi	r30, 0x13	; 19
     e36:	f4 e0       	ldi	r31, 0x04	; 4
     e38:	81 81       	ldd	r24, Z+1	; 0x01
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	98 2f       	mov	r25, r24
     e3e:	88 27       	eor	r24, r24
					mainID += tmp[2];
					if(mainID == mainUserID){
     e40:	22 81       	ldd	r18, Z+2	; 0x02
     e42:	82 0f       	add	r24, r18
     e44:	91 1d       	adc	r25, r1
     e46:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     e4a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     e4e:	82 17       	cp	r24, r18
     e50:	93 07       	cpc	r25, r19
     e52:	41 f4       	brne	.+16     	; 0xe64 <checkFinger+0x22a>
						mainUser = true;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <mainUser>
						scanFinger = false;
     e5a:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <scanFinger>
						removeFinger = false;
     e5e:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <removeFinger>
     e62:	bf c0       	rjmp	.+382    	; 0xfe2 <checkFinger+0x3a8>
					}
					else{
						mainUser = false;
     e64:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <mainUser>
						scanFinger = false;
     e68:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <scanFinger>
						removeFinger = false;
     e6c:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <removeFinger>
     e70:	b8 c0       	rjmp	.+368    	; 0xfe2 <checkFinger+0x3a8>
					}
				}
				else if(firstUse == true){
     e72:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <firstUse>
     e76:	81 11       	cpse	r24, r1
     e78:	b4 c0       	rjmp	.+360    	; 0xfe2 <checkFinger+0x3a8>
					
				}
				else{
					uint16_t score;
					score = tmp[3] << 8;
     e7a:	e3 e1       	ldi	r30, 0x13	; 19
     e7c:	f4 e0       	ldi	r31, 0x04	; 4
     e7e:	63 81       	ldd	r22, Z+3	; 0x03
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	76 2f       	mov	r23, r22
     e84:	66 27       	eor	r22, r22
					score += tmp[4];
     e86:	84 81       	ldd	r24, Z+4	; 0x04
     e88:	7b 01       	movw	r14, r22
     e8a:	e8 0e       	add	r14, r24
     e8c:	f1 1c       	adc	r15, r1
					uint8_t percentage;
					char buffor[3];
					lcd_clear();
     e8e:	0e 94 77 02 	call	0x4ee	; 0x4ee <lcd_clear>
					lcd_setCursor(0,0);
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	0e 94 81 02 	call	0x502	; 0x502 <lcd_setCursor>
					lcd_send_string("Znaleziono palec");
     e9a:	80 ed       	ldi	r24, 0xD0	; 208
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>
					lcd_setCursor(0,1);
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	0e 94 81 02 	call	0x502	; 0x502 <lcd_setCursor>
					lcd_send_string(" Zgodnosc: ");
     eaa:	81 ee       	ldi	r24, 0xE1	; 225
     eac:	92 e0       	ldi	r25, 0x02	; 2
     eae:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>
					lcd_special_char(7,1,5);
     eb2:	45 e0       	ldi	r20, 0x05	; 5
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	61 e0       	ldi	r22, 0x01	; 1
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	87 e0       	ldi	r24, 0x07	; 7
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
					lcd_special_char(8,1,1);
     ec2:	41 e0       	ldi	r20, 0x01	; 1
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	88 e0       	ldi	r24, 0x08	; 8
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
					lcd_setCursor(11,1);
     ed2:	61 e0       	ldi	r22, 0x01	; 1
     ed4:	8b e0       	ldi	r24, 0x0B	; 11
     ed6:	0e 94 81 02 	call	0x502	; 0x502 <lcd_setCursor>
					percentage = ceil(((float)score/255) *100);
     eda:	b7 01       	movw	r22, r14
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__floatunsisf>
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	4f e7       	ldi	r20, 0x7F	; 127
     eea:	53 e4       	ldi	r21, 0x43	; 67
     eec:	0e 94 39 0b 	call	0x1672	; 0x1672 <__divsf3>
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	48 ec       	ldi	r20, 0xC8	; 200
     ef6:	52 e4       	ldi	r21, 0x42	; 66
     ef8:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__mulsf3>
     efc:	0e 94 22 0b 	call	0x1644	; 0x1644 <ceil>
					lcd_send_string(itoa(percentage, buffor, 10));
     f00:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__fixunssfsi>
     f04:	86 2f       	mov	r24, r22
     f06:	4a e0       	ldi	r20, 0x0A	; 10
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	be 01       	movw	r22, r28
     f0c:	6f 5f       	subi	r22, 0xFF	; 255
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <itoa>
     f16:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>
					lcd_setCursor(15,1);
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	8f e0       	ldi	r24, 0x0F	; 15
     f1e:	0e 94 81 02 	call	0x502	; 0x502 <lcd_setCursor>
					lcd_send_string("%");
     f22:	8d ee       	ldi	r24, 0xED	; 237
     f24:	92 e0       	ldi	r25, 0x02	; 2
     f26:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>
					PORTB |= (1 << PINB3);
     f2a:	2b 9a       	sbi	0x05, 3	; 5
     f2c:	2f ef       	ldi	r18, 0xFF	; 255
     f2e:	8b e7       	ldi	r24, 0x7B	; 123
     f30:	92 e9       	ldi	r25, 0x92	; 146
     f32:	21 50       	subi	r18, 0x01	; 1
     f34:	80 40       	sbci	r24, 0x00	; 0
     f36:	90 40       	sbci	r25, 0x00	; 0
     f38:	e1 f7       	brne	.-8      	; 0xf32 <checkFinger+0x2f8>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <checkFinger+0x302>
     f3c:	00 00       	nop
					_delay_ms(3000);
					lcd_send_info("--Drzwi otwarte--", "");
     f3e:	60 e5       	ldi	r22, 0x50	; 80
     f40:	73 e0       	ldi	r23, 0x03	; 3
     f42:	8f ee       	ldi	r24, 0xEF	; 239
     f44:	92 e0       	ldi	r25, 0x02	; 2
     f46:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
					scanFinger = false;
     f4a:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <scanFinger>
					doorLocked = false;
     f4e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <doorLocked>
     f52:	47 c0       	rjmp	.+142    	; 0xfe2 <checkFinger+0x3a8>
				}
			}
			else{
				lcd_send_info(" Nie znaleziono ", "palca w systemie");
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	73 e0       	ldi	r23, 0x03	; 3
     f58:	82 e1       	ldi	r24, 0x12	; 18
     f5a:	93 e0       	ldi	r25, 0x03	; 3
     f5c:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
     f60:	ef ef       	ldi	r30, 0xFF	; 255
     f62:	f7 ea       	ldi	r31, 0xA7	; 167
     f64:	21 e6       	ldi	r18, 0x61	; 97
     f66:	e1 50       	subi	r30, 0x01	; 1
     f68:	f0 40       	sbci	r31, 0x00	; 0
     f6a:	20 40       	sbci	r18, 0x00	; 0
     f6c:	e1 f7       	brne	.-8      	; 0xf66 <checkFinger+0x32c>
     f6e:	00 c0       	rjmp	.+0      	; 0xf70 <checkFinger+0x336>
     f70:	00 00       	nop
     f72:	37 c0       	rjmp	.+110    	; 0xfe2 <checkFinger+0x3a8>
				_delay_ms(2000);
			}
		}
		else{
			lcd_send_info(" Blad tworzenia ", "  obrazu palca  ");
     f74:	62 e5       	ldi	r22, 0x52	; 82
     f76:	72 e0       	ldi	r23, 0x02	; 2
     f78:	83 e6       	ldi	r24, 0x63	; 99
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
			lcd_special_char(2,0,3);
     f80:	43 e0       	ldi	r20, 0x03	; 3
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
			lcd_special_char(4,0,0);
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	84 e0       	ldi	r24, 0x04	; 4
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	97 ea       	ldi	r25, 0xA7	; 167
     fa4:	e1 e6       	ldi	r30, 0x61	; 97
     fa6:	81 50       	subi	r24, 0x01	; 1
     fa8:	90 40       	sbci	r25, 0x00	; 0
     faa:	e0 40       	sbci	r30, 0x00	; 0
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <checkFinger+0x36c>
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <checkFinger+0x376>
     fb0:	00 00       	nop
     fb2:	17 c0       	rjmp	.+46     	; 0xfe2 <checkFinger+0x3a8>
			_delay_ms(2000);
		}
	}
	else{
		lcd_send_info("   Brak palca!  ", "Sprobuj ponownie");
     fb4:	64 e7       	ldi	r22, 0x74	; 116
     fb6:	72 e0       	ldi	r23, 0x02	; 2
     fb8:	85 e8       	ldi	r24, 0x85	; 133
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
		lcd_special_char(3,1,4);
     fc0:	44 e0       	ldi	r20, 0x04	; 4
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
     fd0:	ff ef       	ldi	r31, 0xFF	; 255
     fd2:	27 ea       	ldi	r18, 0xA7	; 167
     fd4:	81 e6       	ldi	r24, 0x61	; 97
     fd6:	f1 50       	subi	r31, 0x01	; 1
     fd8:	20 40       	sbci	r18, 0x00	; 0
     fda:	80 40       	sbci	r24, 0x00	; 0
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <checkFinger+0x39c>
     fde:	00 c0       	rjmp	.+0      	; 0xfe0 <checkFinger+0x3a6>
     fe0:	00 00       	nop
		_delay_ms(2000);
	}
	removeFinger = false;
     fe2:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <removeFinger>
	enrollFinger = false;
     fe6:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <enrollFinger>
	scanFinger = false;
     fea:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <scanFinger>
	if(doorLocked){
     fee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <doorLocked>
     ff2:	88 23       	and	r24, r24
     ff4:	71 f0       	breq	.+28     	; 0x1012 <checkFinger+0x3d8>
	lcd_send_info("Drzwi zamkniete", "");
     ff6:	60 e5       	ldi	r22, 0x50	; 80
     ff8:	73 e0       	ldi	r23, 0x03	; 3
     ffa:	8b ec       	ldi	r24, 0xCB	; 203
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
	lcd_special_char(12,0,2);
    1002:	42 e0       	ldi	r20, 0x02	; 2
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	60 e0       	ldi	r22, 0x00	; 0
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	8c e0       	ldi	r24, 0x0C	; 12
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
	}
	
}
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	1f 91       	pop	r17
    101e:	ff 90       	pop	r15
    1020:	ef 90       	pop	r14
    1022:	08 95       	ret

00001024 <getID>:
	
uint8_t getID(){
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	00 d0       	rcall	.+0      	; 0x102c <getID+0x8>
    102c:	1f 92       	push	r1
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
	uint8_t id = 1;
	char buffor[3];
	lcd_clear();
    1032:	0e 94 77 02 	call	0x4ee	; 0x4ee <lcd_clear>
	lcd_setCursor(0,0);
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	0e 94 81 02 	call	0x502	; 0x502 <lcd_setCursor>
	lcd_send_string("Wybierz ID:");
    103e:	83 e2       	ldi	r24, 0x23	; 35
    1040:	93 e0       	ldi	r25, 0x03	; 3
    1042:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>
	lcd_setCursor(0,11);
    1046:	6b e0       	ldi	r22, 0x0B	; 11
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	0e 94 81 02 	call	0x502	; 0x502 <lcd_setCursor>
	lcd_send_string(itoa(id,buffor,10));
    104e:	4a e0       	ldi	r20, 0x0A	; 10
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	be 01       	movw	r22, r28
    1054:	6f 5f       	subi	r22, 0xFF	; 255
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <itoa>
    1060:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>
	getID_bool = true;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <getID_bool>
	}
	
}
	
uint8_t getID(){
	uint8_t id = 1;
    106a:	11 e0       	ldi	r17, 0x01	; 1
	lcd_setCursor(0,0);
	lcd_send_string("Wybierz ID:");
	lcd_setCursor(0,11);
	lcd_send_string(itoa(id,buffor,10));
	getID_bool = true;
	while(getID_bool){
    106c:	88 c0       	rjmp	.+272    	; 0x117e <getID+0x15a>
		if(bit_is_clear(PINB, 1)){
    106e:	19 99       	sbic	0x03, 1	; 3
    1070:	2c c0       	rjmp	.+88     	; 0x10ca <getID+0xa6>
			if(id == 255){
    1072:	1f 3f       	cpi	r17, 0xFF	; 255
    1074:	81 f4       	brne	.+32     	; 0x1096 <getID+0x72>
				lcd_setCursor(0,11);
    1076:	6b e0       	ldi	r22, 0x0B	; 11
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	0e 94 81 02 	call	0x502	; 0x502 <lcd_setCursor>
				lcd_send_string(itoa(255,buffor,10));
    107e:	4a e0       	ldi	r20, 0x0A	; 10
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	be 01       	movw	r22, r28
    1084:	6f 5f       	subi	r22, 0xFF	; 255
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	8f ef       	ldi	r24, 0xFF	; 255
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <itoa>
    1090:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>
    1094:	74 c0       	rjmp	.+232    	; 0x117e <getID+0x15a>
			}
			else{	
				id++;
    1096:	1f 5f       	subi	r17, 0xFF	; 255
				lcd_setCursor(0,11);
    1098:	6b e0       	ldi	r22, 0x0B	; 11
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	0e 94 81 02 	call	0x502	; 0x502 <lcd_setCursor>
				lcd_send_string(itoa(id,buffor,10));
    10a0:	4a e0       	ldi	r20, 0x0A	; 10
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	be 01       	movw	r22, r28
    10a6:	6f 5f       	subi	r22, 0xFF	; 255
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255
    10aa:	81 2f       	mov	r24, r17
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <itoa>
    10b2:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>
    10b6:	2f ef       	ldi	r18, 0xFF	; 255
    10b8:	83 ec       	ldi	r24, 0xC3	; 195
    10ba:	99 e0       	ldi	r25, 0x09	; 9
    10bc:	21 50       	subi	r18, 0x01	; 1
    10be:	80 40       	sbci	r24, 0x00	; 0
    10c0:	90 40       	sbci	r25, 0x00	; 0
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <getID+0x98>
    10c4:	00 c0       	rjmp	.+0      	; 0x10c6 <getID+0xa2>
    10c6:	00 00       	nop
    10c8:	5a c0       	rjmp	.+180    	; 0x117e <getID+0x15a>
				_delay_ms(200);	
			}
		}
		else if(bit_is_clear(PINB, 2)){
    10ca:	1a 99       	sbic	0x03, 2	; 3
    10cc:	52 c0       	rjmp	.+164    	; 0x1172 <getID+0x14e>
			if(id == 10){
    10ce:	1a 30       	cpi	r17, 0x0A	; 10
    10d0:	21 f5       	brne	.+72     	; 0x111a <getID+0xf6>
				id--;
				lcd_clear();
    10d2:	0e 94 77 02 	call	0x4ee	; 0x4ee <lcd_clear>
				lcd_setCursor(0,0);
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	0e 94 81 02 	call	0x502	; 0x502 <lcd_setCursor>
				lcd_send_string("Wybierz ID:");
    10de:	83 e2       	ldi	r24, 0x23	; 35
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>
				lcd_setCursor(0,11);
    10e6:	6b e0       	ldi	r22, 0x0B	; 11
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	0e 94 81 02 	call	0x502	; 0x502 <lcd_setCursor>
				lcd_send_string(itoa(id,buffor,10));
    10ee:	4a e0       	ldi	r20, 0x0A	; 10
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	be 01       	movw	r22, r28
    10f4:	6f 5f       	subi	r22, 0xFF	; 255
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	89 e0       	ldi	r24, 0x09	; 9
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <itoa>
    1100:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>
    1104:	2f ef       	ldi	r18, 0xFF	; 255
    1106:	83 ec       	ldi	r24, 0xC3	; 195
    1108:	99 e0       	ldi	r25, 0x09	; 9
    110a:	21 50       	subi	r18, 0x01	; 1
    110c:	80 40       	sbci	r24, 0x00	; 0
    110e:	90 40       	sbci	r25, 0x00	; 0
    1110:	e1 f7       	brne	.-8      	; 0x110a <getID+0xe6>
    1112:	00 c0       	rjmp	.+0      	; 0x1114 <getID+0xf0>
    1114:	00 00       	nop
				_delay_ms(200);	
			}
		}
		else if(bit_is_clear(PINB, 2)){
			if(id == 10){
				id--;
    1116:	19 e0       	ldi	r17, 0x09	; 9
    1118:	32 c0       	rjmp	.+100    	; 0x117e <getID+0x15a>
				lcd_send_string("Wybierz ID:");
				lcd_setCursor(0,11);
				lcd_send_string(itoa(id,buffor,10));
				_delay_ms(200);
			}
			else if(id == 1){
    111a:	11 30       	cpi	r17, 0x01	; 1
    111c:	81 f4       	brne	.+32     	; 0x113e <getID+0x11a>
				lcd_setCursor(0,11);
    111e:	6b e0       	ldi	r22, 0x0B	; 11
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	0e 94 81 02 	call	0x502	; 0x502 <lcd_setCursor>
				lcd_send_string(itoa(1,buffor,10));
    1126:	4a e0       	ldi	r20, 0x0A	; 10
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	be 01       	movw	r22, r28
    112c:	6f 5f       	subi	r22, 0xFF	; 255
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <itoa>
    1138:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>
    113c:	20 c0       	rjmp	.+64     	; 0x117e <getID+0x15a>
			}
			else{
				id--;
    113e:	11 50       	subi	r17, 0x01	; 1
				lcd_setCursor(0,11);
    1140:	6b e0       	ldi	r22, 0x0B	; 11
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	0e 94 81 02 	call	0x502	; 0x502 <lcd_setCursor>
				lcd_send_string(itoa(id,buffor,10));
    1148:	4a e0       	ldi	r20, 0x0A	; 10
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	be 01       	movw	r22, r28
    114e:	6f 5f       	subi	r22, 0xFF	; 255
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	81 2f       	mov	r24, r17
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <itoa>
    115a:	0e 94 89 02 	call	0x512	; 0x512 <lcd_send_string>
    115e:	2f ef       	ldi	r18, 0xFF	; 255
    1160:	83 ec       	ldi	r24, 0xC3	; 195
    1162:	99 e0       	ldi	r25, 0x09	; 9
    1164:	21 50       	subi	r18, 0x01	; 1
    1166:	80 40       	sbci	r24, 0x00	; 0
    1168:	90 40       	sbci	r25, 0x00	; 0
    116a:	e1 f7       	brne	.-8      	; 0x1164 <getID+0x140>
    116c:	00 c0       	rjmp	.+0      	; 0x116e <getID+0x14a>
    116e:	00 00       	nop
    1170:	06 c0       	rjmp	.+12     	; 0x117e <getID+0x15a>
				_delay_ms(200);
			}
		}
		else if(bit_is_clear(PINB, 0)){
    1172:	18 99       	sbic	0x03, 0	; 3
    1174:	04 c0       	rjmp	.+8      	; 0x117e <getID+0x15a>
			getID_bool = false;
    1176:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <getID_bool>
			return id;
    117a:	81 2f       	mov	r24, r17
    117c:	04 c0       	rjmp	.+8      	; 0x1186 <getID+0x162>
	lcd_setCursor(0,0);
	lcd_send_string("Wybierz ID:");
	lcd_setCursor(0,11);
	lcd_send_string(itoa(id,buffor,10));
	getID_bool = true;
	while(getID_bool){
    117e:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <getID_bool>
    1182:	81 11       	cpse	r24, r1
    1184:	74 cf       	rjmp	.-280    	; 0x106e <getID+0x4a>
			getID_bool = false;
			return id;
			_delay_ms(200);
		}
	}
}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	08 95       	ret

00001194 <getTemplateCount>:

uint16_t getTemplateCount(){
	uint16_t template;
	fps_templateNum();
    1194:	0e 94 7e 01 	call	0x2fc	; 0x2fc <fps_templateNum>
    1198:	2f ef       	ldi	r18, 0xFF	; 255
    119a:	80 e7       	ldi	r24, 0x70	; 112
    119c:	92 e0       	ldi	r25, 0x02	; 2
    119e:	21 50       	subi	r18, 0x01	; 1
    11a0:	80 40       	sbci	r24, 0x00	; 0
    11a2:	90 40       	sbci	r25, 0x00	; 0
    11a4:	e1 f7       	brne	.-8      	; 0x119e <getTemplateCount+0xa>
    11a6:	00 c0       	rjmp	.+0      	; 0x11a8 <getTemplateCount+0x14>
    11a8:	00 00       	nop
	_delay_ms(50);
	template = tmp[1] << 8;
    11aa:	e3 e1       	ldi	r30, 0x13	; 19
    11ac:	f4 e0       	ldi	r31, 0x04	; 4
    11ae:	81 81       	ldd	r24, Z+1	; 0x01
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	98 2f       	mov	r25, r24
    11b4:	88 27       	eor	r24, r24
	template += tmp[2];
	return template;
    11b6:	22 81       	ldd	r18, Z+2	; 0x02
}
    11b8:	82 0f       	add	r24, r18
    11ba:	91 1d       	adc	r25, r1
    11bc:	08 95       	ret

000011be <main>:
volatile bool scanFinger = false, enrollFinger = false, removeFinger = false, doorLocked = true, mainUser = false, getID_bool = false, firstUse = false, counter_check = false;
uint8_t id;
uint16_t mainUserID = 1;
uint8_t buffer[3];

int main(void){
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
	//Wstepne parametry programu
	lcd_init();
    11c6:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_init>
    11ca:	2f ef       	ldi	r18, 0xFF	; 255
    11cc:	80 e7       	ldi	r24, 0x70	; 112
    11ce:	92 e0       	ldi	r25, 0x02	; 2
    11d0:	21 50       	subi	r18, 0x01	; 1
    11d2:	80 40       	sbci	r24, 0x00	; 0
    11d4:	90 40       	sbci	r25, 0x00	; 0
    11d6:	e1 f7       	brne	.-8      	; 0x11d0 <main+0x12>
    11d8:	00 c0       	rjmp	.+0      	; 0x11da <main+0x1c>
    11da:	00 00       	nop
	_delay_ms(50);
	uart_init();
    11dc:	0e 94 04 0b 	call	0x1608	; 0x1608 <uart_init>
	
	DDRB = 0b00001000; //B0,B1,B2 - 3 przyciski; B3 - wyjscie elektrozamka
    11e0:	88 e0       	ldi	r24, 0x08	; 8
    11e2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000111;
    11e4:	87 e0       	ldi	r24, 0x07	; 7
    11e6:	85 b9       	out	0x05, r24	; 5

	TCCR1B |= (1 << CS11) | (1 << CS10) | (1 << WGM12);
    11e8:	e1 e8       	ldi	r30, 0x81	; 129
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	8b 60       	ori	r24, 0x0B	; 11
    11f0:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
    11f2:	ef e6       	ldi	r30, 0x6F	; 111
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	82 60       	ori	r24, 0x02	; 2
    11fa:	80 83       	st	Z, r24
	TCNT1 = 0;
    11fc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1200:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	OCR1A = 1249;
    1204:	81 ee       	ldi	r24, 0xE1	; 225
    1206:	94 e0       	ldi	r25, 0x04	; 4
    1208:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    120c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	sei();
    1210:	78 94       	sei
	
	//wyslanie do LCD polskie znaki
	lcd_custom_char(0, znak1);
    1212:	6b e3       	ldi	r22, 0x3B	; 59
    1214:	71 e0       	ldi	r23, 0x01	; 1
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 bf 02 	call	0x57e	; 0x57e <lcd_custom_char>
	lcd_custom_char(1, znak2);
    121e:	63 e3       	ldi	r22, 0x33	; 51
    1220:	71 e0       	ldi	r23, 0x01	; 1
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 bf 02 	call	0x57e	; 0x57e <lcd_custom_char>
	lcd_custom_char(2, znak3);
    122a:	6b e2       	ldi	r22, 0x2B	; 43
    122c:	71 e0       	ldi	r23, 0x01	; 1
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 bf 02 	call	0x57e	; 0x57e <lcd_custom_char>
	lcd_custom_char(3, znak4);
    1236:	63 e2       	ldi	r22, 0x23	; 35
    1238:	71 e0       	ldi	r23, 0x01	; 1
    123a:	83 e0       	ldi	r24, 0x03	; 3
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 bf 02 	call	0x57e	; 0x57e <lcd_custom_char>
	lcd_custom_char(4, znak5);
    1242:	6b e1       	ldi	r22, 0x1B	; 27
    1244:	71 e0       	ldi	r23, 0x01	; 1
    1246:	84 e0       	ldi	r24, 0x04	; 4
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 bf 02 	call	0x57e	; 0x57e <lcd_custom_char>
	lcd_custom_char(5, znak6);
    124e:	63 e1       	ldi	r22, 0x13	; 19
    1250:	71 e0       	ldi	r23, 0x01	; 1
    1252:	85 e0       	ldi	r24, 0x05	; 5
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 bf 02 	call	0x57e	; 0x57e <lcd_custom_char>
	lcd_custom_char(6, znak7);
    125a:	6b e0       	ldi	r22, 0x0B	; 11
    125c:	71 e0       	ldi	r23, 0x01	; 1
    125e:	86 e0       	ldi	r24, 0x06	; 6
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 bf 02 	call	0x57e	; 0x57e <lcd_custom_char>
	lcd_custom_char(7, znak8);
    1266:	63 e0       	ldi	r22, 0x03	; 3
    1268:	71 e0       	ldi	r23, 0x01	; 1
    126a:	87 e0       	ldi	r24, 0x07	; 7
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 bf 02 	call	0x57e	; 0x57e <lcd_custom_char>
	
	lcd_send_info("    Witaj w:    ", "Zamku szyfrowym ");
    1272:	6f e2       	ldi	r22, 0x2F	; 47
    1274:	73 e0       	ldi	r23, 0x03	; 3
    1276:	80 e4       	ldi	r24, 0x40	; 64
    1278:	93 e0       	ldi	r25, 0x03	; 3
    127a:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
    127e:	ef ef       	ldi	r30, 0xFF	; 255
    1280:	f7 ea       	ldi	r31, 0xA7	; 167
    1282:	21 e6       	ldi	r18, 0x61	; 97
    1284:	e1 50       	subi	r30, 0x01	; 1
    1286:	f0 40       	sbci	r31, 0x00	; 0
    1288:	20 40       	sbci	r18, 0x00	; 0
    128a:	e1 f7       	brne	.-8      	; 0x1284 <main+0xc6>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <main+0xd0>
    128e:	00 00       	nop
	_delay_ms(2000);
	
	if(getTemplateCount() == 0){
    1290:	0e 94 ca 08 	call	0x1194	; 0x1194 <getTemplateCount>
    1294:	89 2b       	or	r24, r25
    1296:	39 f5       	brne	.+78     	; 0x12e6 <main+0x128>
		firstUse = true;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <firstUse>
		while(firstUse){
    129e:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <firstUse>
    12a2:	88 23       	and	r24, r24
    12a4:	01 f1       	breq	.+64     	; 0x12e6 <main+0x128>
			lcd_send_info("Pierwsze uzycie ", "Admin potrzebny!");
			lcd_special_char(10,0,6);
			_delay_ms(1500);
			newFinger(mainUserID);
    12a6:	c0 e0       	ldi	r28, 0x00	; 0
    12a8:	d1 e0       	ldi	r29, 0x01	; 1
	_delay_ms(2000);
	
	if(getTemplateCount() == 0){
		firstUse = true;
		while(firstUse){
			lcd_send_info("Pierwsze uzycie ", "Admin potrzebny!");
    12aa:	61 e5       	ldi	r22, 0x51	; 81
    12ac:	73 e0       	ldi	r23, 0x03	; 3
    12ae:	82 e6       	ldi	r24, 0x62	; 98
    12b0:	93 e0       	ldi	r25, 0x03	; 3
    12b2:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
			lcd_special_char(10,0,6);
    12b6:	46 e0       	ldi	r20, 0x06	; 6
    12b8:	50 e0       	ldi	r21, 0x00	; 0
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	8a e0       	ldi	r24, 0x0A	; 10
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
    12c6:	8f ef       	ldi	r24, 0xFF	; 255
    12c8:	9d e3       	ldi	r25, 0x3D	; 61
    12ca:	e9 e4       	ldi	r30, 0x49	; 73
    12cc:	81 50       	subi	r24, 0x01	; 1
    12ce:	90 40       	sbci	r25, 0x00	; 0
    12d0:	e0 40       	sbci	r30, 0x00	; 0
    12d2:	e1 f7       	brne	.-8      	; 0x12cc <main+0x10e>
    12d4:	00 c0       	rjmp	.+0      	; 0x12d6 <main+0x118>
    12d6:	00 00       	nop
			_delay_ms(1500);
			newFinger(mainUserID);
    12d8:	88 81       	ld	r24, Y
    12da:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <newFinger>
	lcd_send_info("    Witaj w:    ", "Zamku szyfrowym ");
	_delay_ms(2000);
	
	if(getTemplateCount() == 0){
		firstUse = true;
		while(firstUse){
    12de:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <firstUse>
    12e2:	81 11       	cpse	r24, r1
    12e4:	e2 cf       	rjmp	.-60     	; 0x12aa <main+0xec>
			lcd_special_char(10,0,6);
			_delay_ms(1500);
			newFinger(mainUserID);
		}
	}
	lcd_send_info("Drzwi zamkniete", "");
    12e6:	60 e5       	ldi	r22, 0x50	; 80
    12e8:	73 e0       	ldi	r23, 0x03	; 3
    12ea:	8b ec       	ldi	r24, 0xCB	; 203
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
	lcd_special_char(12,0,2);
    12f2:	42 e0       	ldi	r20, 0x02	; 2
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	8c e0       	ldi	r24, 0x0C	; 12
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
			}
		}
		//gdy drzwi sa otwarte
		else if(!doorLocked){
			if(bit_is_clear(PINB, 0)){
				doorLocked = true;
    1302:	c1 e0       	ldi	r28, 0x01	; 1
								mainUser = false;
								_delay_ms(200);
								break;
							}
							else if(bit_is_clear(PINB, 1)){
								newFinger(mainUserID);
    1304:	00 e0       	ldi	r16, 0x00	; 0
    1306:	11 e0       	ldi	r17, 0x01	; 1
	lcd_send_info("Drzwi zamkniete", "");
	lcd_special_char(12,0,2);
	
	//Glowna petla programu		
	while(1){
		if(counter_check){
    1308:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <__data_end>
    130c:	88 23       	and	r24, r24
    130e:	09 f4       	brne	.+2      	; 0x1312 <main+0x154>
    1310:	3f c1       	rjmp	.+638    	; 0x1590 <main+0x3d2>
		if(doorLocked){
    1312:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <doorLocked>
    1316:	88 23       	and	r24, r24
    1318:	09 f4       	brne	.+2      	; 0x131c <main+0x15e>
    131a:	1a c1       	rjmp	.+564    	; 0x1550 <main+0x392>
			if(bit_is_clear(PINB, 0) && !(scanFinger)){
    131c:	18 99       	sbic	0x03, 0	; 3
    131e:	08 c0       	rjmp	.+16     	; 0x1330 <main+0x172>
    1320:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <scanFinger>
    1324:	81 11       	cpse	r24, r1
    1326:	04 c0       	rjmp	.+8      	; 0x1330 <main+0x172>
				scanFinger = true;
    1328:	c0 93 12 04 	sts	0x0412, r28	; 0x800412 <scanFinger>
					checkFinger();
    132c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <checkFinger>
			}
			
			if(bit_is_clear(PINB, 1) && !(enrollFinger)){
    1330:	19 99       	sbic	0x03, 1	; 3
    1332:	5b c0       	rjmp	.+182    	; 0x13ea <main+0x22c>
    1334:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <enrollFinger>
    1338:	81 11       	cpse	r24, r1
    133a:	57 c0       	rjmp	.+174    	; 0x13ea <main+0x22c>
				enrollFinger = true;
    133c:	c0 93 11 04 	sts	0x0411, r28	; 0x800411 <enrollFinger>
				lcd_send_info("Wprowadz odcisk","    dla: ADMIN   ");
    1340:	63 e7       	ldi	r22, 0x73	; 115
    1342:	73 e0       	ldi	r23, 0x03	; 3
    1344:	85 e8       	ldi	r24, 0x85	; 133
    1346:	93 e0       	ldi	r25, 0x03	; 3
    1348:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
				lcd_special_char(7,0,7);
    134c:	47 e0       	ldi	r20, 0x07	; 7
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	87 e0       	ldi	r24, 0x07	; 7
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
    135c:	ff ef       	ldi	r31, 0xFF	; 255
    135e:	23 ed       	ldi	r18, 0xD3	; 211
    1360:	80 e3       	ldi	r24, 0x30	; 48
    1362:	f1 50       	subi	r31, 0x01	; 1
    1364:	20 40       	sbci	r18, 0x00	; 0
    1366:	80 40       	sbci	r24, 0x00	; 0
    1368:	e1 f7       	brne	.-8      	; 0x1362 <main+0x1a4>
    136a:	00 c0       	rjmp	.+0      	; 0x136c <main+0x1ae>
    136c:	00 00       	nop
				_delay_ms(1000);
				checkFinger();
    136e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <checkFinger>
				if(mainUser){
    1372:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <mainUser>
    1376:	88 23       	and	r24, r24
    1378:	89 f0       	breq	.+34     	; 0x139c <main+0x1de>
					id = getID();
    137a:	0e 94 12 08 	call	0x1024	; 0x1024 <getID>
    137e:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <id>
					if(id == mainUserID){
    1382:	48 2f       	mov	r20, r24
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    138a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    138e:	42 17       	cp	r20, r18
    1390:	53 07       	cpc	r21, r19
    1392:	09 f4       	brne	.+2      	; 0x1396 <main+0x1d8>
    1394:	00 c1       	rjmp	.+512    	; 0x1596 <main+0x3d8>
						lcd_send_info("Drzwi zamkniete", "");
						lcd_special_char(12,0,2);
						break;
					}
					else{
						newFinger(id);
    1396:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <newFinger>
    139a:	27 c0       	rjmp	.+78     	; 0x13ea <main+0x22c>
					}
				}
				else{
					lcd_send_info("Palec nie nalezy", "    do: ADMIN   ");
    139c:	67 eb       	ldi	r22, 0xB7	; 183
    139e:	73 e0       	ldi	r23, 0x03	; 3
    13a0:	88 ec       	ldi	r24, 0xC8	; 200
    13a2:	93 e0       	ldi	r25, 0x03	; 3
    13a4:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
					lcd_special_char(14,0,6);
    13a8:	46 e0       	ldi	r20, 0x06	; 6
    13aa:	50 e0       	ldi	r21, 0x00	; 0
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	8e e0       	ldi	r24, 0x0E	; 14
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
					enrollFinger = false;
    13b8:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <enrollFinger>
    13bc:	2f ef       	ldi	r18, 0xFF	; 255
    13be:	87 ea       	ldi	r24, 0xA7	; 167
    13c0:	91 e6       	ldi	r25, 0x61	; 97
    13c2:	21 50       	subi	r18, 0x01	; 1
    13c4:	80 40       	sbci	r24, 0x00	; 0
    13c6:	90 40       	sbci	r25, 0x00	; 0
    13c8:	e1 f7       	brne	.-8      	; 0x13c2 <main+0x204>
    13ca:	00 c0       	rjmp	.+0      	; 0x13cc <main+0x20e>
    13cc:	00 00       	nop
					_delay_ms(2000);
					lcd_send_info("Drzwi zamkniete", "");
    13ce:	60 e5       	ldi	r22, 0x50	; 80
    13d0:	73 e0       	ldi	r23, 0x03	; 3
    13d2:	8b ec       	ldi	r24, 0xCB	; 203
    13d4:	91 e0       	ldi	r25, 0x01	; 1
    13d6:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
					lcd_special_char(12,0,2);
    13da:	42 e0       	ldi	r20, 0x02	; 2
    13dc:	50 e0       	ldi	r21, 0x00	; 0
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	8c e0       	ldi	r24, 0x0C	; 12
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
				}
			}
			
			if(bit_is_clear(PINB, 2) && !(removeFinger)){
    13ea:	1a 99       	sbic	0x03, 2	; 3
    13ec:	d1 c0       	rjmp	.+418    	; 0x1590 <main+0x3d2>
    13ee:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <removeFinger>
    13f2:	81 11       	cpse	r24, r1
    13f4:	cd c0       	rjmp	.+410    	; 0x1590 <main+0x3d2>
				removeFinger = true;
    13f6:	c0 93 10 04 	sts	0x0410, r28	; 0x800410 <removeFinger>
				lcd_send_info("Wprowadz odcisk","    dla: ADMIN   ");
    13fa:	63 e7       	ldi	r22, 0x73	; 115
    13fc:	73 e0       	ldi	r23, 0x03	; 3
    13fe:	85 e8       	ldi	r24, 0x85	; 133
    1400:	93 e0       	ldi	r25, 0x03	; 3
    1402:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
				lcd_special_char(7,0,7);
    1406:	47 e0       	ldi	r20, 0x07	; 7
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	87 e0       	ldi	r24, 0x07	; 7
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
    1416:	ef ef       	ldi	r30, 0xFF	; 255
    1418:	f3 ed       	ldi	r31, 0xD3	; 211
    141a:	20 e3       	ldi	r18, 0x30	; 48
    141c:	e1 50       	subi	r30, 0x01	; 1
    141e:	f0 40       	sbci	r31, 0x00	; 0
    1420:	20 40       	sbci	r18, 0x00	; 0
    1422:	e1 f7       	brne	.-8      	; 0x141c <main+0x25e>
    1424:	00 c0       	rjmp	.+0      	; 0x1426 <main+0x268>
    1426:	00 00       	nop
				_delay_ms(1000);
				checkFinger();
    1428:	0e 94 1d 06 	call	0xc3a	; 0xc3a <checkFinger>
				if(mainUser){
    142c:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <mainUser>
    1430:	88 23       	and	r24, r24
    1432:	09 f4       	brne	.+2      	; 0x1436 <main+0x278>
    1434:	65 c0       	rjmp	.+202    	; 0x1500 <main+0x342>
					id = getID();
    1436:	0e 94 12 08 	call	0x1024	; 0x1024 <getID>
    143a:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <id>
					if(id == mainUserID){
    143e:	48 2f       	mov	r20, r24
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1446:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    144a:	42 17       	cp	r20, r18
    144c:	53 07       	cpc	r21, r19
    144e:	09 f0       	breq	.+2      	; 0x1452 <main+0x294>
    1450:	52 c0       	rjmp	.+164    	; 0x14f6 <main+0x338>
						lcd_send_info("  Czy nadpisac  ", "palec dla ADMIN?");
    1452:	69 ed       	ldi	r22, 0xD9	; 217
    1454:	73 e0       	ldi	r23, 0x03	; 3
    1456:	8a ee       	ldi	r24, 0xEA	; 234
    1458:	93 e0       	ldi	r25, 0x03	; 3
    145a:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
						lcd_special_char(13,0,1);
    145e:	41 e0       	ldi	r20, 0x01	; 1
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	8d e0       	ldi	r24, 0x0D	; 13
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
    146e:	8f ef       	ldi	r24, 0xFF	; 255
    1470:	97 ea       	ldi	r25, 0xA7	; 167
    1472:	e1 e6       	ldi	r30, 0x61	; 97
    1474:	81 50       	subi	r24, 0x01	; 1
    1476:	90 40       	sbci	r25, 0x00	; 0
    1478:	e0 40       	sbci	r30, 0x00	; 0
    147a:	e1 f7       	brne	.-8      	; 0x1474 <main+0x2b6>
    147c:	00 c0       	rjmp	.+0      	; 0x147e <main+0x2c0>
    147e:	00 00       	nop
						_delay_ms(2000);
						lcd_send_info("B1- NIE  B2- TAK", "");
    1480:	60 e5       	ldi	r22, 0x50	; 80
    1482:	73 e0       	ldi	r23, 0x03	; 3
    1484:	8b ef       	ldi	r24, 0xFB	; 251
    1486:	93 e0       	ldi	r25, 0x03	; 3
    1488:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
						while(true){
							if(bit_is_clear(PINB, 0)){
    148c:	18 99       	sbic	0x03, 0	; 3
    148e:	1c c0       	rjmp	.+56     	; 0x14c8 <main+0x30a>
								lcd_send_info("Drzwi zamkniete", "");
    1490:	60 e5       	ldi	r22, 0x50	; 80
    1492:	73 e0       	ldi	r23, 0x03	; 3
    1494:	8b ec       	ldi	r24, 0xCB	; 203
    1496:	91 e0       	ldi	r25, 0x01	; 1
    1498:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
								lcd_special_char(12,0,2);
    149c:	42 e0       	ldi	r20, 0x02	; 2
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	8c e0       	ldi	r24, 0x0C	; 12
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
								removeFinger = false;
    14ac:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <removeFinger>
								mainUser = false;
    14b0:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <mainUser>
    14b4:	ff ef       	ldi	r31, 0xFF	; 255
    14b6:	23 ec       	ldi	r18, 0xC3	; 195
    14b8:	89 e0       	ldi	r24, 0x09	; 9
    14ba:	f1 50       	subi	r31, 0x01	; 1
    14bc:	20 40       	sbci	r18, 0x00	; 0
    14be:	80 40       	sbci	r24, 0x00	; 0
    14c0:	e1 f7       	brne	.-8      	; 0x14ba <main+0x2fc>
    14c2:	00 c0       	rjmp	.+0      	; 0x14c4 <main+0x306>
    14c4:	00 00       	nop
    14c6:	64 c0       	rjmp	.+200    	; 0x1590 <main+0x3d2>
								_delay_ms(200);
								break;
							}
							else if(bit_is_clear(PINB, 1)){
    14c8:	19 99       	sbic	0x03, 1	; 3
    14ca:	e0 cf       	rjmp	.-64     	; 0x148c <main+0x2ce>
								newFinger(mainUserID);
    14cc:	f8 01       	movw	r30, r16
    14ce:	80 81       	ld	r24, Z
    14d0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <newFinger>
								mainUser = false;
    14d4:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <mainUser>
								lcd_send_info("Drzwi zamkniete", "");
    14d8:	60 e5       	ldi	r22, 0x50	; 80
    14da:	73 e0       	ldi	r23, 0x03	; 3
    14dc:	8b ec       	ldi	r24, 0xCB	; 203
    14de:	91 e0       	ldi	r25, 0x01	; 1
    14e0:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
								lcd_special_char(12,0,2);
    14e4:	42 e0       	ldi	r20, 0x02	; 2
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	8c e0       	ldi	r24, 0x0C	; 12
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
								break;
    14f4:	4d c0       	rjmp	.+154    	; 0x1590 <main+0x3d2>
							}
						}
					}
					else{
						deleteFinger(id);
    14f6:	0e 94 8a 05 	call	0xb14	; 0xb14 <deleteFinger>
						mainUser = false;
    14fa:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <mainUser>
    14fe:	48 c0       	rjmp	.+144    	; 0x1590 <main+0x3d2>
					}
				}
				else{
					lcd_send_info("Palec nie nalezy", "    do: ADMIN   ");
    1500:	67 eb       	ldi	r22, 0xB7	; 183
    1502:	73 e0       	ldi	r23, 0x03	; 3
    1504:	88 ec       	ldi	r24, 0xC8	; 200
    1506:	93 e0       	ldi	r25, 0x03	; 3
    1508:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
					lcd_special_char(14,0,6);
    150c:	46 e0       	ldi	r20, 0x06	; 6
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	8e e0       	ldi	r24, 0x0E	; 14
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
					removeFinger = false;
    151c:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <removeFinger>
    1520:	ff ef       	ldi	r31, 0xFF	; 255
    1522:	27 ea       	ldi	r18, 0xA7	; 167
    1524:	81 e6       	ldi	r24, 0x61	; 97
    1526:	f1 50       	subi	r31, 0x01	; 1
    1528:	20 40       	sbci	r18, 0x00	; 0
    152a:	80 40       	sbci	r24, 0x00	; 0
    152c:	e1 f7       	brne	.-8      	; 0x1526 <main+0x368>
    152e:	00 c0       	rjmp	.+0      	; 0x1530 <main+0x372>
    1530:	00 00       	nop
					_delay_ms(2000);
					lcd_send_info("Drzwi zamkniete", "");
    1532:	60 e5       	ldi	r22, 0x50	; 80
    1534:	73 e0       	ldi	r23, 0x03	; 3
    1536:	8b ec       	ldi	r24, 0xCB	; 203
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
					lcd_special_char(12,0,2);
    153e:	42 e0       	ldi	r20, 0x02	; 2
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	8c e0       	ldi	r24, 0x0C	; 12
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
    154e:	20 c0       	rjmp	.+64     	; 0x1590 <main+0x3d2>
				}
			}
		}
		//gdy drzwi sa otwarte
		else if(!doorLocked){
    1550:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <doorLocked>
    1554:	81 11       	cpse	r24, r1
    1556:	1c c0       	rjmp	.+56     	; 0x1590 <main+0x3d2>
			if(bit_is_clear(PINB, 0)){
    1558:	18 99       	sbic	0x03, 0	; 3
    155a:	1a c0       	rjmp	.+52     	; 0x1590 <main+0x3d2>
				doorLocked = true;
    155c:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <doorLocked>
				PORTB &= ~(1 << PINB3);
    1560:	2b 98       	cbi	0x05, 3	; 5
				lcd_send_info("Drzwi zamkniete", "");
    1562:	60 e5       	ldi	r22, 0x50	; 80
    1564:	73 e0       	ldi	r23, 0x03	; 3
    1566:	8b ec       	ldi	r24, 0xCB	; 203
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
				lcd_special_char(12,0,2);
    156e:	42 e0       	ldi	r20, 0x02	; 2
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	8c e0       	ldi	r24, 0x0C	; 12
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
    157e:	9f ef       	ldi	r25, 0xFF	; 255
    1580:	e3 ed       	ldi	r30, 0xD3	; 211
    1582:	f0 e3       	ldi	r31, 0x30	; 48
    1584:	91 50       	subi	r25, 0x01	; 1
    1586:	e0 40       	sbci	r30, 0x00	; 0
    1588:	f0 40       	sbci	r31, 0x00	; 0
    158a:	e1 f7       	brne	.-8      	; 0x1584 <main+0x3c6>
    158c:	00 c0       	rjmp	.+0      	; 0x158e <main+0x3d0>
    158e:	00 00       	nop
				_delay_ms(1000);
			}
		}
		}
		counter_check = false;
    1590:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <__data_end>
	}
    1594:	b9 ce       	rjmp	.-654    	; 0x1308 <main+0x14a>
				_delay_ms(1000);
				checkFinger();
				if(mainUser){
					id = getID();
					if(id == mainUserID){
						lcd_send_info("  Niedozwolona  ", "operacja!(ADMIN)");
    1596:	65 e9       	ldi	r22, 0x95	; 149
    1598:	73 e0       	ldi	r23, 0x03	; 3
    159a:	86 ea       	ldi	r24, 0xA6	; 166
    159c:	93 e0       	ldi	r25, 0x03	; 3
    159e:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
    15a2:	9f ef       	ldi	r25, 0xFF	; 255
    15a4:	e7 ea       	ldi	r30, 0xA7	; 167
    15a6:	f1 e6       	ldi	r31, 0x61	; 97
    15a8:	91 50       	subi	r25, 0x01	; 1
    15aa:	e0 40       	sbci	r30, 0x00	; 0
    15ac:	f0 40       	sbci	r31, 0x00	; 0
    15ae:	e1 f7       	brne	.-8      	; 0x15a8 <main+0x3ea>
    15b0:	00 c0       	rjmp	.+0      	; 0x15b2 <main+0x3f4>
    15b2:	00 00       	nop
						_delay_ms(2000);
						enrollFinger = false;
    15b4:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <enrollFinger>
						lcd_send_info("Drzwi zamkniete", "");
    15b8:	60 e5       	ldi	r22, 0x50	; 80
    15ba:	73 e0       	ldi	r23, 0x03	; 3
    15bc:	8b ec       	ldi	r24, 0xCB	; 203
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	0e 94 98 02 	call	0x530	; 0x530 <lcd_send_info>
						lcd_special_char(12,0,2);
    15c4:	42 e0       	ldi	r20, 0x02	; 2
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	70 e0       	ldi	r23, 0x00	; 0
    15cc:	8c e0       	ldi	r24, 0x0C	; 12
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 b1 02 	call	0x562	; 0x562 <lcd_special_char>
		}
		}
		counter_check = false;
	}
	return 0;
}//Koniec void main()
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	08 95       	ret

000015e2 <__vector_11>:
	template = tmp[1] << 8;
	template += tmp[2];
	return template;
}

ISR(TIMER1_COMPA_vect){
    15e2:	1f 92       	push	r1
    15e4:	0f 92       	push	r0
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	0f 92       	push	r0
    15ea:	11 24       	eor	r1, r1
    15ec:	8f 93       	push	r24
		TCNT1 = 0;
    15ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		counter_check = true;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <__data_end>
    15fc:	8f 91       	pop	r24
    15fe:	0f 90       	pop	r0
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	0f 90       	pop	r0
    1604:	1f 90       	pop	r1
    1606:	18 95       	reti

00001608 <uart_init>:
#include "uart.h"
#include <avr/io.h>


void uart_init(){
	DDRD |= (1 << PIND0);
    1608:	50 9a       	sbi	0x0a, 0	; 10
	DDRD &= ~ (1 << PIND1);
    160a:	51 98       	cbi	0x0a, 1	; 10
	UBRR0H = (uint8_t)(UBRR >> 8);			//ustawienie baud rate
    160c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L =  (uint8_t)(UBRR);	
    1610:	80 e1       	ldi	r24, 0x10	; 16
    1612:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);	//wlaczenie linii RX i TX
    1616:	88 e1       	ldi	r24, 0x18	; 24
    1618:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (0x03 << UCSZ00);				//format ramki 8bitowy z 1 bitem stopu
    161c:	86 e0       	ldi	r24, 0x06	; 6
    161e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    1622:	08 95       	ret

00001624 <uart_getByte>:
}

uint8_t uart_getByte(){
	//sprawdz czy zostalo cos otrzymane
	while (!(UCSR0A & (1 << RXC0)));
    1624:	e0 ec       	ldi	r30, 0xC0	; 192
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	88 23       	and	r24, r24
    162c:	ec f7       	brge	.-6      	; 0x1628 <uart_getByte+0x4>
	return (uint8_t) UDR0;
    162e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
    1632:	08 95       	ret

00001634 <uart_putByte>:

void uart_putByte(uint8_t data){
	//zostan az rejestr nie bedzie pusty
	while (!(UCSR0A & (1 << UDRE0)));
    1634:	e0 ec       	ldi	r30, 0xC0	; 192
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	90 81       	ld	r25, Z
    163a:	95 ff       	sbrs	r25, 5
    163c:	fd cf       	rjmp	.-6      	; 0x1638 <uart_putByte+0x4>
	UDR0 = data;
    163e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1642:	08 95       	ret

00001644 <ceil>:
    1644:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__fp_trunc>
    1648:	90 f0       	brcs	.+36     	; 0x166e <ceil+0x2a>
    164a:	9f 37       	cpi	r25, 0x7F	; 127
    164c:	48 f4       	brcc	.+18     	; 0x1660 <ceil+0x1c>
    164e:	91 11       	cpse	r25, r1
    1650:	16 f4       	brtc	.+4      	; 0x1656 <ceil+0x12>
    1652:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__fp_szero>
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	80 e8       	ldi	r24, 0x80	; 128
    165c:	9f e3       	ldi	r25, 0x3F	; 63
    165e:	08 95       	ret
    1660:	26 f0       	brts	.+8      	; 0x166a <ceil+0x26>
    1662:	1b 16       	cp	r1, r27
    1664:	61 1d       	adc	r22, r1
    1666:	71 1d       	adc	r23, r1
    1668:	81 1d       	adc	r24, r1
    166a:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__fp_mintl>
    166e:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__fp_mpack>

00001672 <__divsf3>:
    1672:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divsf3x>
    1676:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <__fp_round>
    167a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fp_pscB>
    167e:	58 f0       	brcs	.+22     	; 0x1696 <__divsf3+0x24>
    1680:	0e 94 49 0c 	call	0x1892	; 0x1892 <__fp_pscA>
    1684:	40 f0       	brcs	.+16     	; 0x1696 <__divsf3+0x24>
    1686:	29 f4       	brne	.+10     	; 0x1692 <__divsf3+0x20>
    1688:	5f 3f       	cpi	r21, 0xFF	; 255
    168a:	29 f0       	breq	.+10     	; 0x1696 <__divsf3+0x24>
    168c:	0c 94 17 0c 	jmp	0x182e	; 0x182e <__fp_inf>
    1690:	51 11       	cpse	r21, r1
    1692:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__fp_szero>
    1696:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__fp_nan>

0000169a <__divsf3x>:
    169a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__fp_split3>
    169e:	68 f3       	brcs	.-38     	; 0x167a <__divsf3+0x8>

000016a0 <__divsf3_pse>:
    16a0:	99 23       	and	r25, r25
    16a2:	b1 f3       	breq	.-20     	; 0x1690 <__divsf3+0x1e>
    16a4:	55 23       	and	r21, r21
    16a6:	91 f3       	breq	.-28     	; 0x168c <__divsf3+0x1a>
    16a8:	95 1b       	sub	r25, r21
    16aa:	55 0b       	sbc	r21, r21
    16ac:	bb 27       	eor	r27, r27
    16ae:	aa 27       	eor	r26, r26
    16b0:	62 17       	cp	r22, r18
    16b2:	73 07       	cpc	r23, r19
    16b4:	84 07       	cpc	r24, r20
    16b6:	38 f0       	brcs	.+14     	; 0x16c6 <__divsf3_pse+0x26>
    16b8:	9f 5f       	subi	r25, 0xFF	; 255
    16ba:	5f 4f       	sbci	r21, 0xFF	; 255
    16bc:	22 0f       	add	r18, r18
    16be:	33 1f       	adc	r19, r19
    16c0:	44 1f       	adc	r20, r20
    16c2:	aa 1f       	adc	r26, r26
    16c4:	a9 f3       	breq	.-22     	; 0x16b0 <__divsf3_pse+0x10>
    16c6:	35 d0       	rcall	.+106    	; 0x1732 <__divsf3_pse+0x92>
    16c8:	0e 2e       	mov	r0, r30
    16ca:	3a f0       	brmi	.+14     	; 0x16da <__divsf3_pse+0x3a>
    16cc:	e0 e8       	ldi	r30, 0x80	; 128
    16ce:	32 d0       	rcall	.+100    	; 0x1734 <__divsf3_pse+0x94>
    16d0:	91 50       	subi	r25, 0x01	; 1
    16d2:	50 40       	sbci	r21, 0x00	; 0
    16d4:	e6 95       	lsr	r30
    16d6:	00 1c       	adc	r0, r0
    16d8:	ca f7       	brpl	.-14     	; 0x16cc <__divsf3_pse+0x2c>
    16da:	2b d0       	rcall	.+86     	; 0x1732 <__divsf3_pse+0x92>
    16dc:	fe 2f       	mov	r31, r30
    16de:	29 d0       	rcall	.+82     	; 0x1732 <__divsf3_pse+0x92>
    16e0:	66 0f       	add	r22, r22
    16e2:	77 1f       	adc	r23, r23
    16e4:	88 1f       	adc	r24, r24
    16e6:	bb 1f       	adc	r27, r27
    16e8:	26 17       	cp	r18, r22
    16ea:	37 07       	cpc	r19, r23
    16ec:	48 07       	cpc	r20, r24
    16ee:	ab 07       	cpc	r26, r27
    16f0:	b0 e8       	ldi	r27, 0x80	; 128
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <__divsf3_pse+0x56>
    16f4:	bb 0b       	sbc	r27, r27
    16f6:	80 2d       	mov	r24, r0
    16f8:	bf 01       	movw	r22, r30
    16fa:	ff 27       	eor	r31, r31
    16fc:	93 58       	subi	r25, 0x83	; 131
    16fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1700:	3a f0       	brmi	.+14     	; 0x1710 <__divsf3_pse+0x70>
    1702:	9e 3f       	cpi	r25, 0xFE	; 254
    1704:	51 05       	cpc	r21, r1
    1706:	78 f0       	brcs	.+30     	; 0x1726 <__divsf3_pse+0x86>
    1708:	0c 94 17 0c 	jmp	0x182e	; 0x182e <__fp_inf>
    170c:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__fp_szero>
    1710:	5f 3f       	cpi	r21, 0xFF	; 255
    1712:	e4 f3       	brlt	.-8      	; 0x170c <__divsf3_pse+0x6c>
    1714:	98 3e       	cpi	r25, 0xE8	; 232
    1716:	d4 f3       	brlt	.-12     	; 0x170c <__divsf3_pse+0x6c>
    1718:	86 95       	lsr	r24
    171a:	77 95       	ror	r23
    171c:	67 95       	ror	r22
    171e:	b7 95       	ror	r27
    1720:	f7 95       	ror	r31
    1722:	9f 5f       	subi	r25, 0xFF	; 255
    1724:	c9 f7       	brne	.-14     	; 0x1718 <__divsf3_pse+0x78>
    1726:	88 0f       	add	r24, r24
    1728:	91 1d       	adc	r25, r1
    172a:	96 95       	lsr	r25
    172c:	87 95       	ror	r24
    172e:	97 f9       	bld	r25, 7
    1730:	08 95       	ret
    1732:	e1 e0       	ldi	r30, 0x01	; 1
    1734:	66 0f       	add	r22, r22
    1736:	77 1f       	adc	r23, r23
    1738:	88 1f       	adc	r24, r24
    173a:	bb 1f       	adc	r27, r27
    173c:	62 17       	cp	r22, r18
    173e:	73 07       	cpc	r23, r19
    1740:	84 07       	cpc	r24, r20
    1742:	ba 07       	cpc	r27, r26
    1744:	20 f0       	brcs	.+8      	; 0x174e <__divsf3_pse+0xae>
    1746:	62 1b       	sub	r22, r18
    1748:	73 0b       	sbc	r23, r19
    174a:	84 0b       	sbc	r24, r20
    174c:	ba 0b       	sbc	r27, r26
    174e:	ee 1f       	adc	r30, r30
    1750:	88 f7       	brcc	.-30     	; 0x1734 <__divsf3_pse+0x94>
    1752:	e0 95       	com	r30
    1754:	08 95       	ret

00001756 <__fixunssfsi>:
    1756:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fp_splitA>
    175a:	88 f0       	brcs	.+34     	; 0x177e <__fixunssfsi+0x28>
    175c:	9f 57       	subi	r25, 0x7F	; 127
    175e:	98 f0       	brcs	.+38     	; 0x1786 <__fixunssfsi+0x30>
    1760:	b9 2f       	mov	r27, r25
    1762:	99 27       	eor	r25, r25
    1764:	b7 51       	subi	r27, 0x17	; 23
    1766:	b0 f0       	brcs	.+44     	; 0x1794 <__fixunssfsi+0x3e>
    1768:	e1 f0       	breq	.+56     	; 0x17a2 <__fixunssfsi+0x4c>
    176a:	66 0f       	add	r22, r22
    176c:	77 1f       	adc	r23, r23
    176e:	88 1f       	adc	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	1a f0       	brmi	.+6      	; 0x177a <__fixunssfsi+0x24>
    1774:	ba 95       	dec	r27
    1776:	c9 f7       	brne	.-14     	; 0x176a <__fixunssfsi+0x14>
    1778:	14 c0       	rjmp	.+40     	; 0x17a2 <__fixunssfsi+0x4c>
    177a:	b1 30       	cpi	r27, 0x01	; 1
    177c:	91 f0       	breq	.+36     	; 0x17a2 <__fixunssfsi+0x4c>
    177e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__fp_zero>
    1782:	b1 e0       	ldi	r27, 0x01	; 1
    1784:	08 95       	ret
    1786:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__fp_zero>
    178a:	67 2f       	mov	r22, r23
    178c:	78 2f       	mov	r23, r24
    178e:	88 27       	eor	r24, r24
    1790:	b8 5f       	subi	r27, 0xF8	; 248
    1792:	39 f0       	breq	.+14     	; 0x17a2 <__fixunssfsi+0x4c>
    1794:	b9 3f       	cpi	r27, 0xF9	; 249
    1796:	cc f3       	brlt	.-14     	; 0x178a <__fixunssfsi+0x34>
    1798:	86 95       	lsr	r24
    179a:	77 95       	ror	r23
    179c:	67 95       	ror	r22
    179e:	b3 95       	inc	r27
    17a0:	d9 f7       	brne	.-10     	; 0x1798 <__fixunssfsi+0x42>
    17a2:	3e f4       	brtc	.+14     	; 0x17b2 <__fixunssfsi+0x5c>
    17a4:	90 95       	com	r25
    17a6:	80 95       	com	r24
    17a8:	70 95       	com	r23
    17aa:	61 95       	neg	r22
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	8f 4f       	sbci	r24, 0xFF	; 255
    17b0:	9f 4f       	sbci	r25, 0xFF	; 255
    17b2:	08 95       	ret

000017b4 <__floatunsisf>:
    17b4:	e8 94       	clt
    17b6:	09 c0       	rjmp	.+18     	; 0x17ca <__floatsisf+0x12>

000017b8 <__floatsisf>:
    17b8:	97 fb       	bst	r25, 7
    17ba:	3e f4       	brtc	.+14     	; 0x17ca <__floatsisf+0x12>
    17bc:	90 95       	com	r25
    17be:	80 95       	com	r24
    17c0:	70 95       	com	r23
    17c2:	61 95       	neg	r22
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	8f 4f       	sbci	r24, 0xFF	; 255
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	99 23       	and	r25, r25
    17cc:	a9 f0       	breq	.+42     	; 0x17f8 <__floatsisf+0x40>
    17ce:	f9 2f       	mov	r31, r25
    17d0:	96 e9       	ldi	r25, 0x96	; 150
    17d2:	bb 27       	eor	r27, r27
    17d4:	93 95       	inc	r25
    17d6:	f6 95       	lsr	r31
    17d8:	87 95       	ror	r24
    17da:	77 95       	ror	r23
    17dc:	67 95       	ror	r22
    17de:	b7 95       	ror	r27
    17e0:	f1 11       	cpse	r31, r1
    17e2:	f8 cf       	rjmp	.-16     	; 0x17d4 <__floatsisf+0x1c>
    17e4:	fa f4       	brpl	.+62     	; 0x1824 <__floatsisf+0x6c>
    17e6:	bb 0f       	add	r27, r27
    17e8:	11 f4       	brne	.+4      	; 0x17ee <__floatsisf+0x36>
    17ea:	60 ff       	sbrs	r22, 0
    17ec:	1b c0       	rjmp	.+54     	; 0x1824 <__floatsisf+0x6c>
    17ee:	6f 5f       	subi	r22, 0xFF	; 255
    17f0:	7f 4f       	sbci	r23, 0xFF	; 255
    17f2:	8f 4f       	sbci	r24, 0xFF	; 255
    17f4:	9f 4f       	sbci	r25, 0xFF	; 255
    17f6:	16 c0       	rjmp	.+44     	; 0x1824 <__floatsisf+0x6c>
    17f8:	88 23       	and	r24, r24
    17fa:	11 f0       	breq	.+4      	; 0x1800 <__floatsisf+0x48>
    17fc:	96 e9       	ldi	r25, 0x96	; 150
    17fe:	11 c0       	rjmp	.+34     	; 0x1822 <__floatsisf+0x6a>
    1800:	77 23       	and	r23, r23
    1802:	21 f0       	breq	.+8      	; 0x180c <__floatsisf+0x54>
    1804:	9e e8       	ldi	r25, 0x8E	; 142
    1806:	87 2f       	mov	r24, r23
    1808:	76 2f       	mov	r23, r22
    180a:	05 c0       	rjmp	.+10     	; 0x1816 <__floatsisf+0x5e>
    180c:	66 23       	and	r22, r22
    180e:	71 f0       	breq	.+28     	; 0x182c <__floatsisf+0x74>
    1810:	96 e8       	ldi	r25, 0x86	; 134
    1812:	86 2f       	mov	r24, r22
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	2a f0       	brmi	.+10     	; 0x1824 <__floatsisf+0x6c>
    181a:	9a 95       	dec	r25
    181c:	66 0f       	add	r22, r22
    181e:	77 1f       	adc	r23, r23
    1820:	88 1f       	adc	r24, r24
    1822:	da f7       	brpl	.-10     	; 0x181a <__floatsisf+0x62>
    1824:	88 0f       	add	r24, r24
    1826:	96 95       	lsr	r25
    1828:	87 95       	ror	r24
    182a:	97 f9       	bld	r25, 7
    182c:	08 95       	ret

0000182e <__fp_inf>:
    182e:	97 f9       	bld	r25, 7
    1830:	9f 67       	ori	r25, 0x7F	; 127
    1832:	80 e8       	ldi	r24, 0x80	; 128
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	08 95       	ret

0000183a <__fp_mintl>:
    183a:	88 23       	and	r24, r24
    183c:	71 f4       	brne	.+28     	; 0x185a <__fp_mintl+0x20>
    183e:	77 23       	and	r23, r23
    1840:	21 f0       	breq	.+8      	; 0x184a <__fp_mintl+0x10>
    1842:	98 50       	subi	r25, 0x08	; 8
    1844:	87 2b       	or	r24, r23
    1846:	76 2f       	mov	r23, r22
    1848:	07 c0       	rjmp	.+14     	; 0x1858 <__fp_mintl+0x1e>
    184a:	66 23       	and	r22, r22
    184c:	11 f4       	brne	.+4      	; 0x1852 <__fp_mintl+0x18>
    184e:	99 27       	eor	r25, r25
    1850:	0d c0       	rjmp	.+26     	; 0x186c <__fp_mintl+0x32>
    1852:	90 51       	subi	r25, 0x10	; 16
    1854:	86 2b       	or	r24, r22
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	2a f0       	brmi	.+10     	; 0x1866 <__fp_mintl+0x2c>
    185c:	9a 95       	dec	r25
    185e:	66 0f       	add	r22, r22
    1860:	77 1f       	adc	r23, r23
    1862:	88 1f       	adc	r24, r24
    1864:	da f7       	brpl	.-10     	; 0x185c <__fp_mintl+0x22>
    1866:	88 0f       	add	r24, r24
    1868:	96 95       	lsr	r25
    186a:	87 95       	ror	r24
    186c:	97 f9       	bld	r25, 7
    186e:	08 95       	ret

00001870 <__fp_mpack>:
    1870:	9f 3f       	cpi	r25, 0xFF	; 255
    1872:	31 f0       	breq	.+12     	; 0x1880 <__fp_mpack_finite+0xc>

00001874 <__fp_mpack_finite>:
    1874:	91 50       	subi	r25, 0x01	; 1
    1876:	20 f4       	brcc	.+8      	; 0x1880 <__fp_mpack_finite+0xc>
    1878:	87 95       	ror	r24
    187a:	77 95       	ror	r23
    187c:	67 95       	ror	r22
    187e:	b7 95       	ror	r27
    1880:	88 0f       	add	r24, r24
    1882:	91 1d       	adc	r25, r1
    1884:	96 95       	lsr	r25
    1886:	87 95       	ror	r24
    1888:	97 f9       	bld	r25, 7
    188a:	08 95       	ret

0000188c <__fp_nan>:
    188c:	9f ef       	ldi	r25, 0xFF	; 255
    188e:	80 ec       	ldi	r24, 0xC0	; 192
    1890:	08 95       	ret

00001892 <__fp_pscA>:
    1892:	00 24       	eor	r0, r0
    1894:	0a 94       	dec	r0
    1896:	16 16       	cp	r1, r22
    1898:	17 06       	cpc	r1, r23
    189a:	18 06       	cpc	r1, r24
    189c:	09 06       	cpc	r0, r25
    189e:	08 95       	ret

000018a0 <__fp_pscB>:
    18a0:	00 24       	eor	r0, r0
    18a2:	0a 94       	dec	r0
    18a4:	12 16       	cp	r1, r18
    18a6:	13 06       	cpc	r1, r19
    18a8:	14 06       	cpc	r1, r20
    18aa:	05 06       	cpc	r0, r21
    18ac:	08 95       	ret

000018ae <__fp_round>:
    18ae:	09 2e       	mov	r0, r25
    18b0:	03 94       	inc	r0
    18b2:	00 0c       	add	r0, r0
    18b4:	11 f4       	brne	.+4      	; 0x18ba <__fp_round+0xc>
    18b6:	88 23       	and	r24, r24
    18b8:	52 f0       	brmi	.+20     	; 0x18ce <__fp_round+0x20>
    18ba:	bb 0f       	add	r27, r27
    18bc:	40 f4       	brcc	.+16     	; 0x18ce <__fp_round+0x20>
    18be:	bf 2b       	or	r27, r31
    18c0:	11 f4       	brne	.+4      	; 0x18c6 <__fp_round+0x18>
    18c2:	60 ff       	sbrs	r22, 0
    18c4:	04 c0       	rjmp	.+8      	; 0x18ce <__fp_round+0x20>
    18c6:	6f 5f       	subi	r22, 0xFF	; 255
    18c8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ca:	8f 4f       	sbci	r24, 0xFF	; 255
    18cc:	9f 4f       	sbci	r25, 0xFF	; 255
    18ce:	08 95       	ret

000018d0 <__fp_split3>:
    18d0:	57 fd       	sbrc	r21, 7
    18d2:	90 58       	subi	r25, 0x80	; 128
    18d4:	44 0f       	add	r20, r20
    18d6:	55 1f       	adc	r21, r21
    18d8:	59 f0       	breq	.+22     	; 0x18f0 <__fp_splitA+0x10>
    18da:	5f 3f       	cpi	r21, 0xFF	; 255
    18dc:	71 f0       	breq	.+28     	; 0x18fa <__fp_splitA+0x1a>
    18de:	47 95       	ror	r20

000018e0 <__fp_splitA>:
    18e0:	88 0f       	add	r24, r24
    18e2:	97 fb       	bst	r25, 7
    18e4:	99 1f       	adc	r25, r25
    18e6:	61 f0       	breq	.+24     	; 0x1900 <__fp_splitA+0x20>
    18e8:	9f 3f       	cpi	r25, 0xFF	; 255
    18ea:	79 f0       	breq	.+30     	; 0x190a <__fp_splitA+0x2a>
    18ec:	87 95       	ror	r24
    18ee:	08 95       	ret
    18f0:	12 16       	cp	r1, r18
    18f2:	13 06       	cpc	r1, r19
    18f4:	14 06       	cpc	r1, r20
    18f6:	55 1f       	adc	r21, r21
    18f8:	f2 cf       	rjmp	.-28     	; 0x18de <__fp_split3+0xe>
    18fa:	46 95       	lsr	r20
    18fc:	f1 df       	rcall	.-30     	; 0x18e0 <__fp_splitA>
    18fe:	08 c0       	rjmp	.+16     	; 0x1910 <__fp_splitA+0x30>
    1900:	16 16       	cp	r1, r22
    1902:	17 06       	cpc	r1, r23
    1904:	18 06       	cpc	r1, r24
    1906:	99 1f       	adc	r25, r25
    1908:	f1 cf       	rjmp	.-30     	; 0x18ec <__fp_splitA+0xc>
    190a:	86 95       	lsr	r24
    190c:	71 05       	cpc	r23, r1
    190e:	61 05       	cpc	r22, r1
    1910:	08 94       	sec
    1912:	08 95       	ret

00001914 <__fp_trunc>:
    1914:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__fp_splitA>
    1918:	a0 f0       	brcs	.+40     	; 0x1942 <__fp_trunc+0x2e>
    191a:	be e7       	ldi	r27, 0x7E	; 126
    191c:	b9 17       	cp	r27, r25
    191e:	88 f4       	brcc	.+34     	; 0x1942 <__fp_trunc+0x2e>
    1920:	bb 27       	eor	r27, r27
    1922:	9f 38       	cpi	r25, 0x8F	; 143
    1924:	60 f4       	brcc	.+24     	; 0x193e <__fp_trunc+0x2a>
    1926:	16 16       	cp	r1, r22
    1928:	b1 1d       	adc	r27, r1
    192a:	67 2f       	mov	r22, r23
    192c:	78 2f       	mov	r23, r24
    192e:	88 27       	eor	r24, r24
    1930:	98 5f       	subi	r25, 0xF8	; 248
    1932:	f7 cf       	rjmp	.-18     	; 0x1922 <__fp_trunc+0xe>
    1934:	86 95       	lsr	r24
    1936:	77 95       	ror	r23
    1938:	67 95       	ror	r22
    193a:	b1 1d       	adc	r27, r1
    193c:	93 95       	inc	r25
    193e:	96 39       	cpi	r25, 0x96	; 150
    1940:	c8 f3       	brcs	.-14     	; 0x1934 <__fp_trunc+0x20>
    1942:	08 95       	ret

00001944 <__fp_zero>:
    1944:	e8 94       	clt

00001946 <__fp_szero>:
    1946:	bb 27       	eor	r27, r27
    1948:	66 27       	eor	r22, r22
    194a:	77 27       	eor	r23, r23
    194c:	cb 01       	movw	r24, r22
    194e:	97 f9       	bld	r25, 7
    1950:	08 95       	ret

00001952 <__mulsf3>:
    1952:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__mulsf3x>
    1956:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <__fp_round>
    195a:	0e 94 49 0c 	call	0x1892	; 0x1892 <__fp_pscA>
    195e:	38 f0       	brcs	.+14     	; 0x196e <__mulsf3+0x1c>
    1960:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fp_pscB>
    1964:	20 f0       	brcs	.+8      	; 0x196e <__mulsf3+0x1c>
    1966:	95 23       	and	r25, r21
    1968:	11 f0       	breq	.+4      	; 0x196e <__mulsf3+0x1c>
    196a:	0c 94 17 0c 	jmp	0x182e	; 0x182e <__fp_inf>
    196e:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__fp_nan>
    1972:	11 24       	eor	r1, r1
    1974:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__fp_szero>

00001978 <__mulsf3x>:
    1978:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__fp_split3>
    197c:	70 f3       	brcs	.-36     	; 0x195a <__mulsf3+0x8>

0000197e <__mulsf3_pse>:
    197e:	95 9f       	mul	r25, r21
    1980:	c1 f3       	breq	.-16     	; 0x1972 <__mulsf3+0x20>
    1982:	95 0f       	add	r25, r21
    1984:	50 e0       	ldi	r21, 0x00	; 0
    1986:	55 1f       	adc	r21, r21
    1988:	62 9f       	mul	r22, r18
    198a:	f0 01       	movw	r30, r0
    198c:	72 9f       	mul	r23, r18
    198e:	bb 27       	eor	r27, r27
    1990:	f0 0d       	add	r31, r0
    1992:	b1 1d       	adc	r27, r1
    1994:	63 9f       	mul	r22, r19
    1996:	aa 27       	eor	r26, r26
    1998:	f0 0d       	add	r31, r0
    199a:	b1 1d       	adc	r27, r1
    199c:	aa 1f       	adc	r26, r26
    199e:	64 9f       	mul	r22, r20
    19a0:	66 27       	eor	r22, r22
    19a2:	b0 0d       	add	r27, r0
    19a4:	a1 1d       	adc	r26, r1
    19a6:	66 1f       	adc	r22, r22
    19a8:	82 9f       	mul	r24, r18
    19aa:	22 27       	eor	r18, r18
    19ac:	b0 0d       	add	r27, r0
    19ae:	a1 1d       	adc	r26, r1
    19b0:	62 1f       	adc	r22, r18
    19b2:	73 9f       	mul	r23, r19
    19b4:	b0 0d       	add	r27, r0
    19b6:	a1 1d       	adc	r26, r1
    19b8:	62 1f       	adc	r22, r18
    19ba:	83 9f       	mul	r24, r19
    19bc:	a0 0d       	add	r26, r0
    19be:	61 1d       	adc	r22, r1
    19c0:	22 1f       	adc	r18, r18
    19c2:	74 9f       	mul	r23, r20
    19c4:	33 27       	eor	r19, r19
    19c6:	a0 0d       	add	r26, r0
    19c8:	61 1d       	adc	r22, r1
    19ca:	23 1f       	adc	r18, r19
    19cc:	84 9f       	mul	r24, r20
    19ce:	60 0d       	add	r22, r0
    19d0:	21 1d       	adc	r18, r1
    19d2:	82 2f       	mov	r24, r18
    19d4:	76 2f       	mov	r23, r22
    19d6:	6a 2f       	mov	r22, r26
    19d8:	11 24       	eor	r1, r1
    19da:	9f 57       	subi	r25, 0x7F	; 127
    19dc:	50 40       	sbci	r21, 0x00	; 0
    19de:	9a f0       	brmi	.+38     	; 0x1a06 <__mulsf3_pse+0x88>
    19e0:	f1 f0       	breq	.+60     	; 0x1a1e <__mulsf3_pse+0xa0>
    19e2:	88 23       	and	r24, r24
    19e4:	4a f0       	brmi	.+18     	; 0x19f8 <__mulsf3_pse+0x7a>
    19e6:	ee 0f       	add	r30, r30
    19e8:	ff 1f       	adc	r31, r31
    19ea:	bb 1f       	adc	r27, r27
    19ec:	66 1f       	adc	r22, r22
    19ee:	77 1f       	adc	r23, r23
    19f0:	88 1f       	adc	r24, r24
    19f2:	91 50       	subi	r25, 0x01	; 1
    19f4:	50 40       	sbci	r21, 0x00	; 0
    19f6:	a9 f7       	brne	.-22     	; 0x19e2 <__mulsf3_pse+0x64>
    19f8:	9e 3f       	cpi	r25, 0xFE	; 254
    19fa:	51 05       	cpc	r21, r1
    19fc:	80 f0       	brcs	.+32     	; 0x1a1e <__mulsf3_pse+0xa0>
    19fe:	0c 94 17 0c 	jmp	0x182e	; 0x182e <__fp_inf>
    1a02:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__fp_szero>
    1a06:	5f 3f       	cpi	r21, 0xFF	; 255
    1a08:	e4 f3       	brlt	.-8      	; 0x1a02 <__mulsf3_pse+0x84>
    1a0a:	98 3e       	cpi	r25, 0xE8	; 232
    1a0c:	d4 f3       	brlt	.-12     	; 0x1a02 <__mulsf3_pse+0x84>
    1a0e:	86 95       	lsr	r24
    1a10:	77 95       	ror	r23
    1a12:	67 95       	ror	r22
    1a14:	b7 95       	ror	r27
    1a16:	f7 95       	ror	r31
    1a18:	e7 95       	ror	r30
    1a1a:	9f 5f       	subi	r25, 0xFF	; 255
    1a1c:	c1 f7       	brne	.-16     	; 0x1a0e <__mulsf3_pse+0x90>
    1a1e:	fe 2b       	or	r31, r30
    1a20:	88 0f       	add	r24, r24
    1a22:	91 1d       	adc	r25, r1
    1a24:	96 95       	lsr	r25
    1a26:	87 95       	ror	r24
    1a28:	97 f9       	bld	r25, 7
    1a2a:	08 95       	ret

00001a2c <itoa>:
    1a2c:	45 32       	cpi	r20, 0x25	; 37
    1a2e:	51 05       	cpc	r21, r1
    1a30:	20 f4       	brcc	.+8      	; 0x1a3a <itoa+0xe>
    1a32:	42 30       	cpi	r20, 0x02	; 2
    1a34:	10 f0       	brcs	.+4      	; 0x1a3a <itoa+0xe>
    1a36:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__itoa_ncheck>
    1a3a:	fb 01       	movw	r30, r22
    1a3c:	10 82       	st	Z, r1
    1a3e:	cb 01       	movw	r24, r22
    1a40:	08 95       	ret

00001a42 <__itoa_ncheck>:
    1a42:	bb 27       	eor	r27, r27
    1a44:	4a 30       	cpi	r20, 0x0A	; 10
    1a46:	31 f4       	brne	.+12     	; 0x1a54 <__itoa_ncheck+0x12>
    1a48:	99 23       	and	r25, r25
    1a4a:	22 f4       	brpl	.+8      	; 0x1a54 <__itoa_ncheck+0x12>
    1a4c:	bd e2       	ldi	r27, 0x2D	; 45
    1a4e:	90 95       	com	r25
    1a50:	81 95       	neg	r24
    1a52:	9f 4f       	sbci	r25, 0xFF	; 255
    1a54:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__utoa_common>

00001a58 <__utoa_ncheck>:
    1a58:	bb 27       	eor	r27, r27

00001a5a <__utoa_common>:
    1a5a:	fb 01       	movw	r30, r22
    1a5c:	55 27       	eor	r21, r21
    1a5e:	aa 27       	eor	r26, r26
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	aa 1f       	adc	r26, r26
    1a66:	a4 17       	cp	r26, r20
    1a68:	10 f0       	brcs	.+4      	; 0x1a6e <__utoa_common+0x14>
    1a6a:	a4 1b       	sub	r26, r20
    1a6c:	83 95       	inc	r24
    1a6e:	50 51       	subi	r21, 0x10	; 16
    1a70:	b9 f7       	brne	.-18     	; 0x1a60 <__utoa_common+0x6>
    1a72:	a0 5d       	subi	r26, 0xD0	; 208
    1a74:	aa 33       	cpi	r26, 0x3A	; 58
    1a76:	08 f0       	brcs	.+2      	; 0x1a7a <__utoa_common+0x20>
    1a78:	a9 5d       	subi	r26, 0xD9	; 217
    1a7a:	a1 93       	st	Z+, r26
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	79 f7       	brne	.-34     	; 0x1a5e <__utoa_common+0x4>
    1a80:	b1 11       	cpse	r27, r1
    1a82:	b1 93       	st	Z+, r27
    1a84:	11 92       	st	Z+, r1
    1a86:	cb 01       	movw	r24, r22
    1a88:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <strrev>

00001a8c <strrev>:
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	fc 01       	movw	r30, r24
    1a90:	67 2f       	mov	r22, r23
    1a92:	71 91       	ld	r23, Z+
    1a94:	77 23       	and	r23, r23
    1a96:	e1 f7       	brne	.-8      	; 0x1a90 <strrev+0x4>
    1a98:	32 97       	sbiw	r30, 0x02	; 2
    1a9a:	04 c0       	rjmp	.+8      	; 0x1aa4 <strrev+0x18>
    1a9c:	7c 91       	ld	r23, X
    1a9e:	6d 93       	st	X+, r22
    1aa0:	70 83       	st	Z, r23
    1aa2:	62 91       	ld	r22, -Z
    1aa4:	ae 17       	cp	r26, r30
    1aa6:	bf 07       	cpc	r27, r31
    1aa8:	c8 f3       	brcs	.-14     	; 0x1a9c <strrev+0x10>
    1aaa:	08 95       	ret

00001aac <_exit>:
    1aac:	f8 94       	cli

00001aae <__stop_program>:
    1aae:	ff cf       	rjmp	.-2      	; 0x1aae <__stop_program>
